
DHCP_MODBUS_TCP_STM32C6T6_WIZ5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ebc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  08003fc8  08003fc8  00013fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044e8  080044e8  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  080044e8  080044e8  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044e8  080044e8  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044e8  080044e8  000144e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044ec  080044ec  000144ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  080044f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  200000d4  080045c4  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  080045c4  00020470  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010caf  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c00  00000000  00000000  00030dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000aaee  00000000  00000000  000339ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa0  00000000  00000000  0003e4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e18  00000000  00000000  0003ef40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000355b  00000000  00000000  0003fd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001182f  00000000  00000000  000432b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000876b7  00000000  00000000  00054ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000dc199  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026f4  00000000  00000000  000dc1ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d4 	.word	0x200000d4
 8000128:	00000000 	.word	0x00000000
 800012c:	08003fb0 	.word	0x08003fb0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d8 	.word	0x200000d8
 8000148:	08003fb0 	.word	0x08003fb0

0800014c <my_ip_conflict>:

/************************************
 * @ brief Call back for ip Conflict
 ************************************/
void my_ip_conflict(void)
{
 800014c:	b508      	push	{r3, lr}
#ifdef _MAIN_DEBUG_
	printf("CONFLICT IP from DHCP\r\n");
 800014e:	4802      	ldr	r0, [pc, #8]	; (8000158 <my_ip_conflict+0xc>)
 8000150:	f002 fed4 	bl	8002efc <puts>
#endif
   //halt or reset or any...
   while(1); // this example is halt.
 8000154:	e7fe      	b.n	8000154 <my_ip_conflict+0x8>
 8000156:	bf00      	nop
 8000158:	08003fd8 	.word	0x08003fd8

0800015c <Display_Net_Conf>:
	uint8_t tmpstr[6] = {0,};
 800015c:	2300      	movs	r3, #0
{
 800015e:	b510      	push	{r4, lr}
	ctlnetwork(CN_GET_NETINFO, (void*) &gWIZNETINFO);
 8000160:	4c22      	ldr	r4, [pc, #136]	; (80001ec <Display_Net_Conf+0x90>)
{
 8000162:	b086      	sub	sp, #24
	ctlnetwork(CN_GET_NETINFO, (void*) &gWIZNETINFO);
 8000164:	4621      	mov	r1, r4
 8000166:	2001      	movs	r0, #1
	uint8_t tmpstr[6] = {0,};
 8000168:	9304      	str	r3, [sp, #16]
 800016a:	f8ad 3014 	strh.w	r3, [sp, #20]
	ctlnetwork(CN_GET_NETINFO, (void*) &gWIZNETINFO);
 800016e:	f002 f919 	bl	80023a4 <ctlnetwork>
	ctlwizchip(CW_GET_ID,(void*)tmpstr);
 8000172:	a904      	add	r1, sp, #16
 8000174:	2008      	movs	r0, #8
 8000176:	f002 f80b 	bl	8002190 <ctlwizchip>
	if(gWIZNETINFO.dhcp == NETINFO_DHCP) printf("\r\n===== %s NET CONF : DHCP =====\r\n",(char*)tmpstr);
 800017a:	7da3      	ldrb	r3, [r4, #22]
 800017c:	a904      	add	r1, sp, #16
 800017e:	2b02      	cmp	r3, #2
 8000180:	bf0c      	ite	eq
 8000182:	481b      	ldreq	r0, [pc, #108]	; (80001f0 <Display_Net_Conf+0x94>)
		else printf("\r\n===== %s NET CONF : Static =====\r\n",(char*)tmpstr);
 8000184:	481b      	ldrne	r0, [pc, #108]	; (80001f4 <Display_Net_Conf+0x98>)
 8000186:	f002 fe33 	bl	8002df0 <iprintf>
	printf(" MAC : %02X:%02X:%02X:%02X:%02X:%02X\r\n", gWIZNETINFO.mac[0], gWIZNETINFO.mac[1], gWIZNETINFO.mac[2], gWIZNETINFO.mac[3], gWIZNETINFO.mac[4], gWIZNETINFO.mac[5]);
 800018a:	7963      	ldrb	r3, [r4, #5]
 800018c:	7862      	ldrb	r2, [r4, #1]
 800018e:	9302      	str	r3, [sp, #8]
 8000190:	7923      	ldrb	r3, [r4, #4]
 8000192:	7821      	ldrb	r1, [r4, #0]
 8000194:	9301      	str	r3, [sp, #4]
 8000196:	78e3      	ldrb	r3, [r4, #3]
 8000198:	4817      	ldr	r0, [pc, #92]	; (80001f8 <Display_Net_Conf+0x9c>)
 800019a:	9300      	str	r3, [sp, #0]
 800019c:	78a3      	ldrb	r3, [r4, #2]
 800019e:	f002 fe27 	bl	8002df0 <iprintf>
	printf(" IP : %d.%d.%d.%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], gWIZNETINFO.ip[3]);
 80001a2:	7a63      	ldrb	r3, [r4, #9]
 80001a4:	79e2      	ldrb	r2, [r4, #7]
 80001a6:	79a1      	ldrb	r1, [r4, #6]
 80001a8:	9300      	str	r3, [sp, #0]
 80001aa:	4814      	ldr	r0, [pc, #80]	; (80001fc <Display_Net_Conf+0xa0>)
 80001ac:	7a23      	ldrb	r3, [r4, #8]
 80001ae:	f002 fe1f 	bl	8002df0 <iprintf>
	printf(" GW : %d.%d.%d.%d\r\n", gWIZNETINFO.gw[0], gWIZNETINFO.gw[1], gWIZNETINFO.gw[2], gWIZNETINFO.gw[3]);
 80001b2:	7c63      	ldrb	r3, [r4, #17]
 80001b4:	7be2      	ldrb	r2, [r4, #15]
 80001b6:	7ba1      	ldrb	r1, [r4, #14]
 80001b8:	9300      	str	r3, [sp, #0]
 80001ba:	4811      	ldr	r0, [pc, #68]	; (8000200 <Display_Net_Conf+0xa4>)
 80001bc:	7c23      	ldrb	r3, [r4, #16]
 80001be:	f002 fe17 	bl	8002df0 <iprintf>
	printf(" SN : %d.%d.%d.%d\r\n", gWIZNETINFO.sn[0], gWIZNETINFO.sn[1], gWIZNETINFO.sn[2], gWIZNETINFO.sn[3]);
 80001c2:	7b63      	ldrb	r3, [r4, #13]
 80001c4:	7ae2      	ldrb	r2, [r4, #11]
 80001c6:	7aa1      	ldrb	r1, [r4, #10]
 80001c8:	9300      	str	r3, [sp, #0]
 80001ca:	480e      	ldr	r0, [pc, #56]	; (8000204 <Display_Net_Conf+0xa8>)
 80001cc:	7b23      	ldrb	r3, [r4, #12]
 80001ce:	f002 fe0f 	bl	8002df0 <iprintf>
	printf(" DNS IP : %d.%d.%d.%d\r\n", gWIZNETINFO.dns[0], gWIZNETINFO.dns[1], gWIZNETINFO.dns[2], gWIZNETINFO.dns[3]);
 80001d2:	7d63      	ldrb	r3, [r4, #21]
 80001d4:	7ce2      	ldrb	r2, [r4, #19]
 80001d6:	7ca1      	ldrb	r1, [r4, #18]
 80001d8:	9300      	str	r3, [sp, #0]
 80001da:	480b      	ldr	r0, [pc, #44]	; (8000208 <Display_Net_Conf+0xac>)
 80001dc:	7d23      	ldrb	r3, [r4, #20]
 80001de:	f002 fe07 	bl	8002df0 <iprintf>
	printf("=======================================\r\n");
 80001e2:	480a      	ldr	r0, [pc, #40]	; (800020c <Display_Net_Conf+0xb0>)
 80001e4:	f002 fe8a 	bl	8002efc <puts>
}
 80001e8:	b006      	add	sp, #24
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000000 	.word	0x20000000
 80001f0:	08003fef 	.word	0x08003fef
 80001f4:	08004012 	.word	0x08004012
 80001f8:	08004037 	.word	0x08004037
 80001fc:	0800408a 	.word	0x0800408a
 8000200:	0800405e 	.word	0x0800405e
 8000204:	08004072 	.word	0x08004072
 8000208:	08004086 	.word	0x08004086
 800020c:	0800409e 	.word	0x0800409e

08000210 <my_ip_assign>:
{
 8000210:	b510      	push	{r4, lr}
   getIPfromDHCP(gWIZNETINFO.ip);
 8000212:	4c11      	ldr	r4, [pc, #68]	; (8000258 <my_ip_assign+0x48>)
 8000214:	1da0      	adds	r0, r4, #6
 8000216:	f000 fffb 	bl	8001210 <getIPfromDHCP>
   getGWfromDHCP(gWIZNETINFO.gw);
 800021a:	f104 000e 	add.w	r0, r4, #14
 800021e:	f001 f803 	bl	8001228 <getGWfromDHCP>
   getSNfromDHCP(gWIZNETINFO.sn);
 8000222:	f104 000a 	add.w	r0, r4, #10
 8000226:	f001 f80b 	bl	8001240 <getSNfromDHCP>
   getDNSfromDHCP(gWIZNETINFO.dns);
 800022a:	f104 0012 	add.w	r0, r4, #18
 800022e:	f001 f813 	bl	8001258 <getDNSfromDHCP>
   gWIZNETINFO.dhcp = NETINFO_DHCP;
 8000232:	2302      	movs	r3, #2
}

static void Net_Conf()
{
	/* wizchip netconf */
	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 8000234:	4621      	mov	r1, r4
 8000236:	2000      	movs	r0, #0
   gWIZNETINFO.dhcp = NETINFO_DHCP;
 8000238:	75a3      	strb	r3, [r4, #22]
	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 800023a:	f002 f8b3 	bl	80023a4 <ctlnetwork>
   Display_Net_Conf();
 800023e:	f7ff ff8d 	bl	800015c <Display_Net_Conf>
   printf("DHCP LEASED TIME : %ld Sec.\r\n", getDHCPLeasetime());
 8000242:	f001 f815 	bl	8001270 <getDHCPLeasetime>
 8000246:	4601      	mov	r1, r0
 8000248:	4804      	ldr	r0, [pc, #16]	; (800025c <my_ip_assign+0x4c>)
 800024a:	f002 fdd1 	bl	8002df0 <iprintf>
}
 800024e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   printf("\r\n");
 8000252:	4803      	ldr	r0, [pc, #12]	; (8000260 <my_ip_assign+0x50>)
 8000254:	f002 be52 	b.w	8002efc <puts>
 8000258:	20000000 	.word	0x20000000
 800025c:	080040c7 	.word	0x080040c7
 8000260:	080043ef 	.word	0x080043ef

08000264 <UWriteData>:
	while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==RESET);
 8000264:	4b03      	ldr	r3, [pc, #12]	; (8000274 <UWriteData+0x10>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	0612      	lsls	r2, r2, #24
 800026c:	d5fc      	bpl.n	8000268 <UWriteData+0x4>
	huart2.Instance->DR=data;
 800026e:	6058      	str	r0, [r3, #4]
}
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	200003b4 	.word	0x200003b4

08000278 <__io_putchar>:
{
 8000278:	4601      	mov	r1, r0
 800027a:	b508      	push	{r3, lr}
	UWriteData(ch);
 800027c:	b2c0      	uxtb	r0, r0
 800027e:	f7ff fff1 	bl	8000264 <UWriteData>
}
 8000282:	4608      	mov	r0, r1
 8000284:	bd08      	pop	{r3, pc}
	...

08000288 <PHYStatusCheck>:
{
 8000288:	b537      	push	{r0, r1, r2, r4, r5, lr}
		printf("\r\nChecking Ethernet Cable Presence ...");
 800028a:	4d0e      	ldr	r5, [pc, #56]	; (80002c4 <PHYStatusCheck+0x3c>)
			printf("NO Cable Connected!");
 800028c:	4c0e      	ldr	r4, [pc, #56]	; (80002c8 <PHYStatusCheck+0x40>)
		printf("\r\nChecking Ethernet Cable Presence ...");
 800028e:	4628      	mov	r0, r5
 8000290:	f002 fdae 	bl	8002df0 <iprintf>
		ctlwizchip(CW_GET_PHYLINK, (void*) &tmp);
 8000294:	200f      	movs	r0, #15
 8000296:	f10d 0107 	add.w	r1, sp, #7
 800029a:	f001 ff79 	bl	8002190 <ctlwizchip>
		if(tmp == PHY_LINK_OFF)
 800029e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80002a2:	b953      	cbnz	r3, 80002ba <PHYStatusCheck+0x32>
			printf("NO Cable Connected!");
 80002a4:	4620      	mov	r0, r4
 80002a6:	f002 fda3 	bl	8002df0 <iprintf>
			HAL_Delay(1500);
 80002aa:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80002ae:	f002 f8e7 	bl	8002480 <HAL_Delay>
	}while(tmp == PHY_LINK_OFF);
 80002b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d0e9      	beq.n	800028e <PHYStatusCheck+0x6>
	printf("Good! Cable got connected!");
 80002ba:	4804      	ldr	r0, [pc, #16]	; (80002cc <PHYStatusCheck+0x44>)
 80002bc:	f002 fd98 	bl	8002df0 <iprintf>
}
 80002c0:	b003      	add	sp, #12
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	080040e5 	.word	0x080040e5
 80002c8:	0800410c 	.word	0x0800410c
 80002cc:	08004120 	.word	0x08004120

080002d0 <PrintPHYConf>:
{
 80002d0:	b507      	push	{r0, r1, r2, lr}
	ctlwizchip(CW_GET_PHYCONF, (void*) &phyconf);
 80002d2:	200b      	movs	r0, #11
 80002d4:	a901      	add	r1, sp, #4
 80002d6:	f001 ff5b 	bl	8002190 <ctlwizchip>
	if(phyconf.by==PHY_CONFBY_HW)
 80002da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80002de:	b9db      	cbnz	r3, 8000318 <PrintPHYConf+0x48>
		printf("\n\rPHY Configured by Hardware Pins");
 80002e0:	480f      	ldr	r0, [pc, #60]	; (8000320 <PrintPHYConf+0x50>)
		printf("\n\rPHY Configured by Registers");
 80002e2:	f002 fd85 	bl	8002df0 <iprintf>
	if(phyconf.mode==PHY_MODE_AUTONEGO)
 80002e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80002ea:	2b01      	cmp	r3, #1
		printf("\n\rAutonegotiation Enabled");
 80002ec:	bf0c      	ite	eq
 80002ee:	480d      	ldreq	r0, [pc, #52]	; (8000324 <PrintPHYConf+0x54>)
		printf("\n\rAutonegotiation NOT Enabled");
 80002f0:	480d      	ldrne	r0, [pc, #52]	; (8000328 <PrintPHYConf+0x58>)
 80002f2:	f002 fd7d 	bl	8002df0 <iprintf>
	if(phyconf.duplex==PHY_DUPLEX_FULL)
 80002f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80002fa:	2b01      	cmp	r3, #1
		printf("\n\rDuplex Mode: Full");
 80002fc:	bf0c      	ite	eq
 80002fe:	480b      	ldreq	r0, [pc, #44]	; (800032c <PrintPHYConf+0x5c>)
		printf("\n\rDuplex Mode: Half");
 8000300:	480b      	ldrne	r0, [pc, #44]	; (8000330 <PrintPHYConf+0x60>)
 8000302:	f002 fd75 	bl	8002df0 <iprintf>
	if(phyconf.speed==PHY_SPEED_10)
 8000306:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800030a:	b93b      	cbnz	r3, 800031c <PrintPHYConf+0x4c>
		printf("\n\rSpeed: 10Mbps");
 800030c:	4809      	ldr	r0, [pc, #36]	; (8000334 <PrintPHYConf+0x64>)
		printf("\n\rSpeed: 100Mbps");
 800030e:	f002 fd6f 	bl	8002df0 <iprintf>
}
 8000312:	b003      	add	sp, #12
 8000314:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("\n\rPHY Configured by Registers");
 8000318:	4807      	ldr	r0, [pc, #28]	; (8000338 <PrintPHYConf+0x68>)
 800031a:	e7e2      	b.n	80002e2 <PrintPHYConf+0x12>
		printf("\n\rSpeed: 100Mbps");
 800031c:	4807      	ldr	r0, [pc, #28]	; (800033c <PrintPHYConf+0x6c>)
 800031e:	e7f6      	b.n	800030e <PrintPHYConf+0x3e>
 8000320:	0800413b 	.word	0x0800413b
 8000324:	0800417b 	.word	0x0800417b
 8000328:	08004195 	.word	0x08004195
 800032c:	080041b3 	.word	0x080041b3
 8000330:	080041c7 	.word	0x080041c7
 8000334:	080041db 	.word	0x080041db
 8000338:	0800415d 	.word	0x0800415d
 800033c:	080041eb 	.word	0x080041eb

08000340 <SystemClock_Config>:
{
 8000340:	b510      	push	{r4, lr}
 8000342:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000344:	2214      	movs	r2, #20
 8000346:	2100      	movs	r1, #0
 8000348:	a808      	add	r0, sp, #32
 800034a:	f002 fd49 	bl	8002de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034e:	2214      	movs	r2, #20
 8000350:	2100      	movs	r1, #0
 8000352:	a801      	add	r0, sp, #4
 8000354:	f002 fd44 	bl	8002de0 <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000358:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800035a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800035e:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000360:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000364:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000368:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000370:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000372:	f002 f9cb 	bl	800270c <HAL_RCC_OscConfig>
 8000376:	b108      	cbz	r0, 800037c <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000378:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800037a:	e7fe      	b.n	800037a <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800037c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800037e:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000382:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000386:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000388:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800038c:	4621      	mov	r1, r4
 800038e:	a801      	add	r0, sp, #4
 8000390:	f002 fb7e 	bl	8002a90 <HAL_RCC_ClockConfig>
 8000394:	b108      	cbz	r0, 800039a <SystemClock_Config+0x5a>
 8000396:	b672      	cpsid	i
  while (1)
 8000398:	e7fe      	b.n	8000398 <SystemClock_Config+0x58>
}
 800039a:	b010      	add	sp, #64	; 0x40
 800039c:	bd10      	pop	{r4, pc}
	...

080003a0 <main>:
{
 80003a0:	b570      	push	{r4, r5, r6, lr}
	setbuf(stdout, NULL);
 80003a2:	4b58      	ldr	r3, [pc, #352]	; (8000504 <main+0x164>)
{
 80003a4:	b086      	sub	sp, #24
	setbuf(stdout, NULL);
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2100      	movs	r1, #0
 80003aa:	6898      	ldr	r0, [r3, #8]
 80003ac:	f002 fdae 	bl	8002f0c <setbuf>
  HAL_Init();
 80003b0:	f002 f842 	bl	8002438 <HAL_Init>
  SystemClock_Config();
 80003b4:	f7ff ffc4 	bl	8000340 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b8:	2210      	movs	r2, #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	a802      	add	r0, sp, #8
 80003be:	f002 fd0f 	bl	8002de0 <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003c2:	4b51      	ldr	r3, [pc, #324]	; (8000508 <main+0x168>)
  HAL_GPIO_WritePin(GPIOA, RST_W5500_Pin|CS_W5500_Pin|RS485_Pin, GPIO_PIN_RESET);
 80003c4:	2113      	movs	r1, #19
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003c6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, RST_W5500_Pin|CS_W5500_Pin|RS485_Pin, GPIO_PIN_RESET);
 80003c8:	4850      	ldr	r0, [pc, #320]	; (800050c <main+0x16c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ca:	f042 0220 	orr.w	r2, r2, #32
 80003ce:	619a      	str	r2, [r3, #24]
 80003d0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d2:	2500      	movs	r5, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d4:	f002 0220 	and.w	r2, r2, #32
 80003d8:	9200      	str	r2, [sp, #0]
 80003da:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003dc:	699a      	ldr	r2, [r3, #24]
  hspi1.Instance = SPI1;
 80003de:	4c4c      	ldr	r4, [pc, #304]	; (8000510 <main+0x170>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e0:	f042 0204 	orr.w	r2, r2, #4
 80003e4:	619a      	str	r2, [r3, #24]
 80003e6:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, RST_W5500_Pin|CS_W5500_Pin|RS485_Pin, GPIO_PIN_RESET);
 80003e8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ea:	f003 0304 	and.w	r3, r3, #4
 80003ee:	9301      	str	r3, [sp, #4]
 80003f0:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, RST_W5500_Pin|CS_W5500_Pin|RS485_Pin, GPIO_PIN_RESET);
 80003f2:	f002 f985 	bl	8002700 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f6:	2213      	movs	r2, #19
 80003f8:	2301      	movs	r3, #1
 80003fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fe:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000400:	4842      	ldr	r0, [pc, #264]	; (800050c <main+0x16c>)
 8000402:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000404:	e9cd 5304 	strd	r5, r3, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000408:	f002 f8a4 	bl	8002554 <HAL_GPIO_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800040c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000410:	4940      	ldr	r1, [pc, #256]	; (8000514 <main+0x174>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000412:	f44f 7000 	mov.w	r0, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000416:	e9c4 1300 	strd	r1, r3, [r4]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800041a:	2308      	movs	r3, #8
 800041c:	e9c4 0306 	strd	r0, r3, [r4, #24]
  hspi1.Init.CRCPolynomial = 10;
 8000420:	230a      	movs	r3, #10
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000422:	4620      	mov	r0, r4
  hspi1.Init.CRCPolynomial = 10;
 8000424:	62e3      	str	r3, [r4, #44]	; 0x2c
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000426:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800042a:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800042e:	e9c4 5508 	strd	r5, r5, [r4, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000432:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000434:	f002 fbe8 	bl	8002c08 <HAL_SPI_Init>
 8000438:	4603      	mov	r3, r0
 800043a:	b108      	cbz	r0, 8000440 <main+0xa0>
 800043c:	b672      	cpsid	i
  while (1)
 800043e:	e7fe      	b.n	800043e <main+0x9e>
  __HAL_SPI_ENABLE(&hspi1);
 8000440:	6821      	ldr	r1, [r4, #0]
  huart2.Init.BaudRate = 115200;
 8000442:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000446:	240c      	movs	r4, #12
  __HAL_SPI_ENABLE(&hspi1);
 8000448:	680a      	ldr	r2, [r1, #0]
  huart2.Instance = USART2;
 800044a:	4833      	ldr	r0, [pc, #204]	; (8000518 <main+0x178>)
  __HAL_SPI_ENABLE(&hspi1);
 800044c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000450:	600a      	str	r2, [r1, #0]
  huart2.Init.BaudRate = 115200;
 8000452:	4a32      	ldr	r2, [pc, #200]	; (800051c <main+0x17c>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000454:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000458:	e9c0 4305 	strd	r4, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 800045c:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800045e:	61c3      	str	r3, [r0, #28]
  huart2.Init.BaudRate = 115200;
 8000460:	e9c0 2500 	strd	r2, r5, [r0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000464:	f002 fc62 	bl	8002d2c <HAL_UART_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	b108      	cbz	r0, 8000470 <main+0xd0>
 800046c:	b672      	cpsid	i
  while (1)
 800046e:	e7fe      	b.n	800046e <main+0xce>
  huart1.Instance = USART1;
 8000470:	482b      	ldr	r0, [pc, #172]	; (8000520 <main+0x180>)
 8000472:	4a2c      	ldr	r2, [pc, #176]	; (8000524 <main+0x184>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000474:	e9c0 3404 	strd	r3, r4, [r0, #16]
  huart1.Init.BaudRate = 115200;
 8000478:	e9c0 2500 	strd	r2, r5, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800047c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000480:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000484:	f002 fc52 	bl	8002d2c <HAL_UART_Init>
 8000488:	4604      	mov	r4, r0
 800048a:	b108      	cbz	r0, 8000490 <main+0xf0>
 800048c:	b672      	cpsid	i
  while (1)
 800048e:	e7fe      	b.n	800048e <main+0xee>
  ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 8000490:	4d25      	ldr	r5, [pc, #148]	; (8000528 <main+0x188>)
  printf("DHCP + DNS + SNTP W5500 Application!\r\n");
 8000492:	4826      	ldr	r0, [pc, #152]	; (800052c <main+0x18c>)
 8000494:	f002 fd32 	bl	8002efc <puts>
  W5500Init();
 8000498:	f000 fb72 	bl	8000b80 <W5500Init>
  ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 800049c:	4629      	mov	r1, r5
 800049e:	4620      	mov	r0, r4
 80004a0:	f001 ff80 	bl	80023a4 <ctlnetwork>
  PHYStatusCheck();
 80004a4:	f7ff fef0 	bl	8000288 <PHYStatusCheck>
    PrintPHYConf();
 80004a8:	f7ff ff12 	bl	80002d0 <PrintPHYConf>
    if(gWIZNETINFO.dhcp == NETINFO_DHCP)
 80004ac:	7dab      	ldrb	r3, [r5, #22]
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	d125      	bne.n	80004fe <main+0x15e>
      		DHCP_init(SOCK_DHCP, gDHCPBUF);
 80004b2:	2006      	movs	r0, #6
 80004b4:	491e      	ldr	r1, [pc, #120]	; (8000530 <main+0x190>)
 80004b6:	f000 fe53 	bl	8001160 <DHCP_init>
      		reg_dhcp_cbfunc(my_ip_assign, my_ip_assign, my_ip_conflict);
 80004ba:	491e      	ldr	r1, [pc, #120]	; (8000534 <main+0x194>)
 80004bc:	4a1e      	ldr	r2, [pc, #120]	; (8000538 <main+0x198>)
 80004be:	4608      	mov	r0, r1
 80004c0:	f000 fbee 	bl	8000ca0 <reg_dhcp_cbfunc>
	  if(gWIZNETINFO.dhcp == NETINFO_DHCP && exit_dhcp_loop != 1)
 80004c4:	7dab      	ldrb	r3, [r5, #22]
 80004c6:	2b02      	cmp	r3, #2
 80004c8:	d118      	bne.n	80004fc <main+0x15c>
	    				switch(DHCP_run())
 80004ca:	f001 f945 	bl	8001758 <DHCP_run>
 80004ce:	4604      	mov	r4, r0
 80004d0:	b9a0      	cbnz	r0, 80004fc <main+0x15c>
	    						my_dhcp_retry++;
 80004d2:	4e1a      	ldr	r6, [pc, #104]	; (800053c <main+0x19c>)
 80004d4:	7833      	ldrb	r3, [r6, #0]
 80004d6:	3301      	adds	r3, #1
 80004d8:	b2db      	uxtb	r3, r3
	    						if(my_dhcp_retry > MY_MAX_DHCP_RETRY)
 80004da:	2b02      	cmp	r3, #2
	    						my_dhcp_retry++;
 80004dc:	7033      	strb	r3, [r6, #0]
	    						if(my_dhcp_retry > MY_MAX_DHCP_RETRY)
 80004de:	d90d      	bls.n	80004fc <main+0x15c>
	    							gWIZNETINFO.dhcp = NETINFO_STATIC;
 80004e0:	2301      	movs	r3, #1
 80004e2:	75ab      	strb	r3, [r5, #22]
	    							DHCP_stop();      // if restart, recall DHCP_init()
 80004e4:	f000 fde6 	bl	80010b4 <DHCP_stop>
	    							printf(">> DHCP %d Failed\r\n", my_dhcp_retry);
 80004e8:	7831      	ldrb	r1, [r6, #0]
 80004ea:	4815      	ldr	r0, [pc, #84]	; (8000540 <main+0x1a0>)
 80004ec:	f002 fc80 	bl	8002df0 <iprintf>
	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 80004f0:	490d      	ldr	r1, [pc, #52]	; (8000528 <main+0x188>)
 80004f2:	4620      	mov	r0, r4
 80004f4:	f001 ff56 	bl	80023a4 <ctlnetwork>
	    							Display_Net_Conf();   // print out static netinfo to serial
 80004f8:	f7ff fe30 	bl	800015c <Display_Net_Conf>
  while (1)
 80004fc:	e7fe      	b.n	80004fc <main+0x15c>
      		Display_Net_Conf();
 80004fe:	f7ff fe2d 	bl	800015c <Display_Net_Conf>
      		run_user_applications = 1; 	// flag for running user's code
 8000502:	e7df      	b.n	80004c4 <main+0x124>
 8000504:	20000070 	.word	0x20000070
 8000508:	40021000 	.word	0x40021000
 800050c:	40010800 	.word	0x40010800
 8000510:	20000314 	.word	0x20000314
 8000514:	40013000 	.word	0x40013000
 8000518:	200003b4 	.word	0x200003b4
 800051c:	40004400 	.word	0x40004400
 8000520:	2000036c 	.word	0x2000036c
 8000524:	40013800 	.word	0x40013800
 8000528:	20000000 	.word	0x20000000
 800052c:	080041fc 	.word	0x080041fc
 8000530:	200000f0 	.word	0x200000f0
 8000534:	08000211 	.word	0x08000211
 8000538:	0800014d 	.word	0x0800014d
 800053c:	200003fc 	.word	0x200003fc
 8000540:	08004222 	.word	0x08004222

08000544 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000544:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <HAL_MspInit+0x3c>)
{
 8000546:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000548:	699a      	ldr	r2, [r3, #24]
 800054a:	f042 0201 	orr.w	r2, r2, #1
 800054e:	619a      	str	r2, [r3, #24]
 8000550:	699a      	ldr	r2, [r3, #24]
 8000552:	f002 0201 	and.w	r2, r2, #1
 8000556:	9200      	str	r2, [sp, #0]
 8000558:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055a:	69da      	ldr	r2, [r3, #28]
 800055c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000560:	61da      	str	r2, [r3, #28]
 8000562:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800056e:	6853      	ldr	r3, [r2, #4]
 8000570:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000574:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000578:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057a:	b002      	add	sp, #8
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000
 8000584:	40010000 	.word	0x40010000

08000588 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000588:	b510      	push	{r4, lr}
 800058a:	4604      	mov	r4, r0
 800058c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	2210      	movs	r2, #16
 8000590:	2100      	movs	r1, #0
 8000592:	a802      	add	r0, sp, #8
 8000594:	f002 fc24 	bl	8002de0 <memset>
  if(hspi->Instance==SPI1)
 8000598:	6822      	ldr	r2, [r4, #0]
 800059a:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <HAL_SPI_MspInit+0x6c>)
 800059c:	429a      	cmp	r2, r3
 800059e:	d126      	bne.n	80005ee <HAL_SPI_MspInit+0x66>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005a0:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80005a4:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a6:	4814      	ldr	r0, [pc, #80]	; (80005f8 <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80005ac:	619a      	str	r2, [r3, #24]
 80005ae:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005b2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80005b6:	9200      	str	r2, [sp, #0]
 80005b8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	699a      	ldr	r2, [r3, #24]
 80005bc:	f042 0204 	orr.w	r2, r2, #4
 80005c0:	619a      	str	r2, [r3, #24]
 80005c2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c4:	22a0      	movs	r2, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ce:	2302      	movs	r3, #2
 80005d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d4:	2303      	movs	r3, #3
 80005d6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d8:	f001 ffbc 	bl	8002554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005dc:	2140      	movs	r1, #64	; 0x40
 80005de:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e0:	4805      	ldr	r0, [pc, #20]	; (80005f8 <HAL_SPI_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e2:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	f001 ffb3 	bl	8002554 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80005ee:	b006      	add	sp, #24
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	bf00      	nop
 80005f4:	40013000 	.word	0x40013000
 80005f8:	40010800 	.word	0x40010800

080005fc <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	2210      	movs	r2, #16
{
 80005fe:	b510      	push	{r4, lr}
 8000600:	4604      	mov	r4, r0
 8000602:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	eb0d 0002 	add.w	r0, sp, r2
 8000608:	2100      	movs	r1, #0
 800060a:	f002 fbe9 	bl	8002de0 <memset>
  if(huart->Instance==USART1)
 800060e:	6823      	ldr	r3, [r4, #0]
 8000610:	4a27      	ldr	r2, [pc, #156]	; (80006b0 <HAL_UART_MspInit+0xb4>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d129      	bne.n	800066a <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000616:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <HAL_UART_MspInit+0xb8>)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000618:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 800061c:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061e:	4826      	ldr	r0, [pc, #152]	; (80006b8 <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8000620:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000624:	619a      	str	r2, [r3, #24]
 8000626:	699a      	ldr	r2, [r3, #24]
 8000628:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800062c:	9200      	str	r2, [sp, #0]
 800062e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000630:	699a      	ldr	r2, [r3, #24]
 8000632:	f042 0204 	orr.w	r2, r2, #4
 8000636:	619a      	str	r2, [r3, #24]
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000642:	2302      	movs	r3, #2
 8000644:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000648:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800064c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	f001 ff81 	bl	8002554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000652:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000656:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000658:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065a:	4817      	ldr	r0, [pc, #92]	; (80006b8 <HAL_UART_MspInit+0xbc>)
 800065c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	e9cd 3305 	strd	r3, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000662:	f001 ff77 	bl	8002554 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000666:	b008      	add	sp, #32
 8000668:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 800066a:	4a14      	ldr	r2, [pc, #80]	; (80006bc <HAL_UART_MspInit+0xc0>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d1fa      	bne.n	8000666 <HAL_UART_MspInit+0x6a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000670:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <HAL_UART_MspInit+0xb8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000672:	4811      	ldr	r0, [pc, #68]	; (80006b8 <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000674:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000676:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 8000678:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800067c:	61da      	str	r2, [r3, #28]
 800067e:	69da      	ldr	r2, [r3, #28]
 8000680:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000684:	9202      	str	r2, [sp, #8]
 8000686:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000688:	699a      	ldr	r2, [r3, #24]
 800068a:	f042 0204 	orr.w	r2, r2, #4
 800068e:	619a      	str	r2, [r3, #24]
 8000690:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000692:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000694:	f003 0304 	and.w	r3, r3, #4
 8000698:	9303      	str	r3, [sp, #12]
 800069a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069c:	2302      	movs	r3, #2
 800069e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a2:	2303      	movs	r3, #3
 80006a4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f001 ff55 	bl	8002554 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006aa:	2308      	movs	r3, #8
 80006ac:	e7d3      	b.n	8000656 <HAL_UART_MspInit+0x5a>
 80006ae:	bf00      	nop
 80006b0:	40013800 	.word	0x40013800
 80006b4:	40021000 	.word	0x40021000
 80006b8:	40010800 	.word	0x40010800
 80006bc:	40004400 	.word	0x40004400

080006c0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <NMI_Handler>

080006c2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <HardFault_Handler>

080006c4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <MemManage_Handler>

080006c6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <BusFault_Handler>

080006c8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <UsageFault_Handler>

080006ca <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ca:	4770      	bx	lr

080006cc <DebugMon_Handler>:
 80006cc:	4770      	bx	lr

080006ce <PendSV_Handler>:
 80006ce:	4770      	bx	lr

080006d0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d0:	f001 bec4 	b.w	800245c <HAL_IncTick>

080006d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006d4:	b570      	push	{r4, r5, r6, lr}
 80006d6:	460d      	mov	r5, r1
 80006d8:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006da:	460e      	mov	r6, r1
 80006dc:	1b73      	subs	r3, r6, r5
 80006de:	429c      	cmp	r4, r3
 80006e0:	dc01      	bgt.n	80006e6 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80006e2:	4620      	mov	r0, r4
 80006e4:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80006e6:	f3af 8000 	nop.w
 80006ea:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ee:	e7f5      	b.n	80006dc <_read+0x8>

080006f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006f0:	b570      	push	{r4, r5, r6, lr}
 80006f2:	460d      	mov	r5, r1
 80006f4:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f6:	460e      	mov	r6, r1
 80006f8:	1b73      	subs	r3, r6, r5
 80006fa:	429c      	cmp	r4, r3
 80006fc:	dc01      	bgt.n	8000702 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 80006fe:	4620      	mov	r0, r4
 8000700:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8000702:	f816 0b01 	ldrb.w	r0, [r6], #1
 8000706:	f7ff fdb7 	bl	8000278 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800070a:	e7f5      	b.n	80006f8 <_write+0x8>

0800070c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800070c:	f04f 30ff 	mov.w	r0, #4294967295
 8000710:	4770      	bx	lr

08000712 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000712:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 8000716:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8000718:	604b      	str	r3, [r1, #4]
}
 800071a:	4770      	bx	lr

0800071c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800071c:	2001      	movs	r0, #1
 800071e:	4770      	bx	lr

08000720 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000720:	2000      	movs	r0, #0
 8000722:	4770      	bx	lr

08000724 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000724:	4a0b      	ldr	r2, [pc, #44]	; (8000754 <_sbrk+0x30>)
{
 8000726:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000728:	6811      	ldr	r1, [r2, #0]
{
 800072a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800072c:	b909      	cbnz	r1, 8000732 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800072e:	490a      	ldr	r1, [pc, #40]	; (8000758 <_sbrk+0x34>)
 8000730:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000732:	6810      	ldr	r0, [r2, #0]
 8000734:	4909      	ldr	r1, [pc, #36]	; (800075c <_sbrk+0x38>)
 8000736:	4c0a      	ldr	r4, [pc, #40]	; (8000760 <_sbrk+0x3c>)
 8000738:	4403      	add	r3, r0
 800073a:	1b09      	subs	r1, r1, r4
 800073c:	428b      	cmp	r3, r1
 800073e:	d906      	bls.n	800074e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000740:	f002 fb24 	bl	8002d8c <__errno>
 8000744:	230c      	movs	r3, #12
 8000746:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000748:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800074c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800074e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8000750:	e7fc      	b.n	800074c <_sbrk+0x28>
 8000752:	bf00      	nop
 8000754:	20000400 	.word	0x20000400
 8000758:	20000470 	.word	0x20000470
 800075c:	20002800 	.word	0x20002800
 8000760:	00000400 	.word	0x00000400

08000764 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000764:	4770      	bx	lr
	...

08000768 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000768:	f7ff fffc 	bl	8000764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800076c:	480b      	ldr	r0, [pc, #44]	; (800079c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800076e:	490c      	ldr	r1, [pc, #48]	; (80007a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000770:	4a0c      	ldr	r2, [pc, #48]	; (80007a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000774:	e002      	b.n	800077c <LoopCopyDataInit>

08000776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077a:	3304      	adds	r3, #4

0800077c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800077c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800077e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000780:	d3f9      	bcc.n	8000776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000782:	4a09      	ldr	r2, [pc, #36]	; (80007a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000784:	4c09      	ldr	r4, [pc, #36]	; (80007ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000788:	e001      	b.n	800078e <LoopFillZerobss>

0800078a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800078c:	3204      	adds	r2, #4

0800078e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800078e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000790:	d3fb      	bcc.n	800078a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000792:	f002 fb01 	bl	8002d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000796:	f7ff fe03 	bl	80003a0 <main>
  bx lr
 800079a:	4770      	bx	lr
  ldr r0, =_sdata
 800079c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a0:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 80007a4:	080044f0 	.word	0x080044f0
  ldr r2, =_sbss
 80007a8:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 80007ac:	20000470 	.word	0x20000470

080007b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b0:	e7fe      	b.n	80007b0 <ADC1_2_IRQHandler>
	...

080007b4 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80007b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80007b6:	4605      	mov	r5, r0
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80007b8:	4c14      	ldr	r4, [pc, #80]	; (800080c <WIZCHIP_READ+0x58>)
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80007ba:	f3c5 2607 	ubfx	r6, r5, #8, #8
   WIZCHIP_CRITICAL_ENTER();
 80007be:	68e3      	ldr	r3, [r4, #12]
 80007c0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80007c2:	6963      	ldr	r3, [r4, #20]
 80007c4:	4798      	blx	r3
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80007c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80007c8:	f3c5 4007 	ubfx	r0, r5, #16, #8
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80007cc:	b2ed      	uxtb	r5, r5
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80007ce:	b10b      	cbz	r3, 80007d4 <WIZCHIP_READ+0x20>
 80007d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007d2:	b98b      	cbnz	r3, 80007f8 <WIZCHIP_READ+0x44>
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80007d4:	6a23      	ldr	r3, [r4, #32]
 80007d6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80007d8:	4630      	mov	r0, r6
 80007da:	6a23      	ldr	r3, [r4, #32]
 80007dc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80007de:	4628      	mov	r0, r5
 80007e0:	6a23      	ldr	r3, [r4, #32]
 80007e2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80007e4:	69e3      	ldr	r3, [r4, #28]
 80007e6:	4798      	blx	r3
 80007e8:	4605      	mov	r5, r0

   WIZCHIP.CS._deselect();
 80007ea:	69a3      	ldr	r3, [r4, #24]
 80007ec:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80007ee:	6923      	ldr	r3, [r4, #16]
 80007f0:	4798      	blx	r3
   return ret;
}
 80007f2:	4628      	mov	r0, r5
 80007f4:	b002      	add	sp, #8
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80007f8:	f88d 0004 	strb.w	r0, [sp, #4]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80007fc:	2103      	movs	r1, #3
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80007fe:	f88d 6005 	strb.w	r6, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000802:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000806:	a801      	add	r0, sp, #4
 8000808:	4798      	blx	r3
 800080a:	e7eb      	b.n	80007e4 <WIZCHIP_READ+0x30>
 800080c:	2000003c 	.word	0x2000003c

08000810 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000812:	4605      	mov	r5, r0
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000814:	4c16      	ldr	r4, [pc, #88]	; (8000870 <WIZCHIP_WRITE+0x60>)
{
 8000816:	460e      	mov	r6, r1
   WIZCHIP_CRITICAL_ENTER();
 8000818:	68e3      	ldr	r3, [r4, #12]
 800081a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800081c:	6963      	ldr	r3, [r4, #20]
 800081e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000820:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000822:	f045 0704 	orr.w	r7, r5, #4
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000826:	f3c5 4007 	ubfx	r0, r5, #16, #8
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800082a:	b2ff      	uxtb	r7, r7
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800082c:	f3c5 2507 	ubfx	r5, r5, #8, #8
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000830:	b983      	cbnz	r3, 8000854 <WIZCHIP_WRITE+0x44>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000832:	6a23      	ldr	r3, [r4, #32]
 8000834:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000836:	4628      	mov	r0, r5
 8000838:	6a23      	ldr	r3, [r4, #32]
 800083a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800083c:	4638      	mov	r0, r7
 800083e:	6a23      	ldr	r3, [r4, #32]
 8000840:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8000842:	4630      	mov	r0, r6
 8000844:	6a23      	ldr	r3, [r4, #32]
 8000846:	4798      	blx	r3
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		spi_data[3] = wb;
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
   }

   WIZCHIP.CS._deselect();
 8000848:	69a3      	ldr	r3, [r4, #24]
 800084a:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800084c:	6923      	ldr	r3, [r4, #16]
 800084e:	4798      	blx	r3
}
 8000850:	b003      	add	sp, #12
 8000852:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8000854:	2104      	movs	r1, #4
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000856:	f88d 0004 	strb.w	r0, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800085a:	f88d 5005 	strb.w	r5, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800085e:	f88d 7006 	strb.w	r7, [sp, #6]
		spi_data[3] = wb;
 8000862:	f88d 6007 	strb.w	r6, [sp, #7]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8000866:	eb0d 0001 	add.w	r0, sp, r1
 800086a:	4798      	blx	r3
 800086c:	e7ec      	b.n	8000848 <WIZCHIP_WRITE+0x38>
 800086e:	bf00      	nop
 8000870:	2000003c 	.word	0x2000003c

08000874 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000874:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000878:	4605      	mov	r5, r0
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800087a:	4c1a      	ldr	r4, [pc, #104]	; (80008e4 <WIZCHIP_READ_BUF+0x70>)
{
 800087c:	460e      	mov	r6, r1
   WIZCHIP_CRITICAL_ENTER();
 800087e:	68e3      	ldr	r3, [r4, #12]
{
 8000880:	4617      	mov	r7, r2
   WIZCHIP_CRITICAL_ENTER();
 8000882:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000884:	6963      	ldr	r3, [r4, #20]
 8000886:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000888:	6a63      	ldr	r3, [r4, #36]	; 0x24
		for(i = 0; i < len; i++)
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800088a:	f3c5 4007 	ubfx	r0, r5, #16, #8
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800088e:	f3c5 2807 	ubfx	r8, r5, #8, #8
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000892:	b2ed      	uxtb	r5, r5
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000894:	b10b      	cbz	r3, 800089a <WIZCHIP_READ_BUF+0x26>
 8000896:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000898:	b9b3      	cbnz	r3, 80008c8 <WIZCHIP_READ_BUF+0x54>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800089a:	6a23      	ldr	r3, [r4, #32]
 800089c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800089e:	4640      	mov	r0, r8
 80008a0:	6a23      	ldr	r3, [r4, #32]
 80008a2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80008a4:	4628      	mov	r0, r5
 80008a6:	6a23      	ldr	r3, [r4, #32]
 80008a8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80008aa:	4437      	add	r7, r6
 80008ac:	42b7      	cmp	r7, r6
 80008ae:	d106      	bne.n	80008be <WIZCHIP_READ_BUF+0x4a>
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
   }

   WIZCHIP.CS._deselect();
 80008b0:	69a3      	ldr	r3, [r4, #24]
 80008b2:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80008b4:	6923      	ldr	r3, [r4, #16]
 80008b6:	4798      	blx	r3
}
 80008b8:	b002      	add	sp, #8
 80008ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80008be:	69e3      	ldr	r3, [r4, #28]
 80008c0:	4798      	blx	r3
 80008c2:	f806 0b01 	strb.w	r0, [r6], #1
		for(i = 0; i < len; i++)
 80008c6:	e7f1      	b.n	80008ac <WIZCHIP_READ_BUF+0x38>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80008c8:	f88d 0004 	strb.w	r0, [sp, #4]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80008cc:	2103      	movs	r1, #3
 80008ce:	a801      	add	r0, sp, #4
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80008d0:	f88d 8005 	strb.w	r8, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80008d4:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80008d8:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80008da:	4639      	mov	r1, r7
 80008dc:	4630      	mov	r0, r6
 80008de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008e0:	4798      	blx	r3
 80008e2:	e7e5      	b.n	80008b0 <WIZCHIP_READ_BUF+0x3c>
 80008e4:	2000003c 	.word	0x2000003c

080008e8 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80008e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80008ec:	4605      	mov	r5, r0
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80008ee:	4c1a      	ldr	r4, [pc, #104]	; (8000958 <WIZCHIP_WRITE_BUF+0x70>)
{
 80008f0:	460f      	mov	r7, r1
   WIZCHIP_CRITICAL_ENTER();
 80008f2:	68e3      	ldr	r3, [r4, #12]
{
 80008f4:	4690      	mov	r8, r2
   WIZCHIP_CRITICAL_ENTER();
 80008f6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80008f8:	6963      	ldr	r3, [r4, #20]
 80008fa:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80008fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80008fe:	f045 0604 	orr.w	r6, r5, #4
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000902:	f3c5 4007 	ubfx	r0, r5, #16, #8
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000906:	b2f6      	uxtb	r6, r6
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000908:	f3c5 2507 	ubfx	r5, r5, #8, #8
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800090c:	b9b3      	cbnz	r3, 800093c <WIZCHIP_WRITE_BUF+0x54>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800090e:	6a23      	ldr	r3, [r4, #32]
 8000910:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000912:	4628      	mov	r0, r5
 8000914:	6a23      	ldr	r3, [r4, #32]
 8000916:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000918:	4630      	mov	r0, r6
 800091a:	6a23      	ldr	r3, [r4, #32]
 800091c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800091e:	44b8      	add	r8, r7
 8000920:	45b8      	cmp	r8, r7
 8000922:	d106      	bne.n	8000932 <WIZCHIP_WRITE_BUF+0x4a>
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
   }

   WIZCHIP.CS._deselect();
 8000924:	69a3      	ldr	r3, [r4, #24]
 8000926:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000928:	6923      	ldr	r3, [r4, #16]
 800092a:	4798      	blx	r3
}
 800092c:	b002      	add	sp, #8
 800092e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8000932:	6a23      	ldr	r3, [r4, #32]
 8000934:	f817 0b01 	ldrb.w	r0, [r7], #1
 8000938:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800093a:	e7f1      	b.n	8000920 <WIZCHIP_WRITE_BUF+0x38>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800093c:	f88d 0004 	strb.w	r0, [sp, #4]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000940:	2103      	movs	r1, #3
 8000942:	a801      	add	r0, sp, #4
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000944:	f88d 5005 	strb.w	r5, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000948:	f88d 6006 	strb.w	r6, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800094c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800094e:	4641      	mov	r1, r8
 8000950:	4638      	mov	r0, r7
 8000952:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000954:	4798      	blx	r3
 8000956:	e7e5      	b.n	8000924 <WIZCHIP_WRITE_BUF+0x3c>
 8000958:	2000003c 	.word	0x2000003c

0800095c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 800095c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t val=0,val1=0;
 800095e:	2400      	movs	r4, #0

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000960:	0146      	lsls	r6, r0, #5
 8000962:	3608      	adds	r6, #8
 8000964:	f506 5700 	add.w	r7, r6, #8192	; 0x2000
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000968:	f506 5604 	add.w	r6, r6, #8448	; 0x2100
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800096c:	4638      	mov	r0, r7
 800096e:	f7ff ff21 	bl	80007b4 <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000972:	0205      	lsls	r5, r0, #8
 8000974:	4630      	mov	r0, r6
 8000976:	f7ff ff1d 	bl	80007b4 <WIZCHIP_READ>
 800097a:	b2ad      	uxth	r5, r5
 800097c:	4405      	add	r5, r0
 800097e:	b2ad      	uxth	r5, r5
      if (val1 != 0)
 8000980:	b14d      	cbz	r5, 8000996 <getSn_TX_FSR+0x3a>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000982:	4638      	mov	r0, r7
 8000984:	f7ff ff16 	bl	80007b4 <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000988:	0204      	lsls	r4, r0, #8
 800098a:	4630      	mov	r0, r6
 800098c:	f7ff ff12 	bl	80007b4 <WIZCHIP_READ>
 8000990:	b2a4      	uxth	r4, r4
 8000992:	4404      	add	r4, r0
 8000994:	b2a4      	uxth	r4, r4
      }
   }while (val != val1);
 8000996:	42ac      	cmp	r4, r5
 8000998:	d1e8      	bne.n	800096c <getSn_TX_FSR+0x10>
   return val;
}
 800099a:	4620      	mov	r0, r4
 800099c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800099e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800099e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t val=0,val1=0;
 80009a0:	2400      	movs	r4, #0

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80009a2:	0146      	lsls	r6, r0, #5
 80009a4:	3608      	adds	r6, #8
 80009a6:	f506 5718 	add.w	r7, r6, #9728	; 0x2600
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80009aa:	f506 561c 	add.w	r6, r6, #9984	; 0x2700
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80009ae:	4638      	mov	r0, r7
 80009b0:	f7ff ff00 	bl	80007b4 <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80009b4:	0205      	lsls	r5, r0, #8
 80009b6:	4630      	mov	r0, r6
 80009b8:	f7ff fefc 	bl	80007b4 <WIZCHIP_READ>
 80009bc:	b2ad      	uxth	r5, r5
 80009be:	4405      	add	r5, r0
 80009c0:	b2ad      	uxth	r5, r5
      if (val1 != 0)
 80009c2:	b14d      	cbz	r5, 80009d8 <getSn_RX_RSR+0x3a>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80009c4:	4638      	mov	r0, r7
 80009c6:	f7ff fef5 	bl	80007b4 <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80009ca:	0204      	lsls	r4, r0, #8
 80009cc:	4630      	mov	r0, r6
 80009ce:	f7ff fef1 	bl	80007b4 <WIZCHIP_READ>
 80009d2:	b2a4      	uxth	r4, r4
 80009d4:	4404      	add	r4, r0
 80009d6:	b2a4      	uxth	r4, r4
      }
   }while (val != val1);
 80009d8:	42ac      	cmp	r4, r5
 80009da:	d1e8      	bne.n	80009ae <getSn_RX_RSR+0x10>
   return val;
}
 80009dc:	4620      	mov	r0, r4
 80009de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080009e0 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80009e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009e4:	4689      	mov	r9, r1
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
 80009e6:	4614      	mov	r4, r2
 80009e8:	b32a      	cbz	r2, 8000a36 <wiz_send_data+0x56>
   ptr = getSn_TX_WR(sn);
 80009ea:	0085      	lsls	r5, r0, #2
 80009ec:	1c6f      	adds	r7, r5, #1
 80009ee:	00ff      	lsls	r7, r7, #3
 80009f0:	f507 5810 	add.w	r8, r7, #9216	; 0x2400
 80009f4:	4640      	mov	r0, r8
 80009f6:	f7ff fedd 	bl	80007b4 <WIZCHIP_READ>
 80009fa:	f507 5714 	add.w	r7, r7, #9472	; 0x2500
 80009fe:	4606      	mov	r6, r0
 8000a00:	4638      	mov	r0, r7
 8000a02:	f7ff fed7 	bl	80007b4 <WIZCHIP_READ>
 8000a06:	eb00 2606 	add.w	r6, r0, r6, lsl #8
 8000a0a:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8000a0c:	3502      	adds	r5, #2
 8000a0e:	0230      	lsls	r0, r6, #8
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8000a10:	4622      	mov	r2, r4
 8000a12:	4649      	mov	r1, r9
 8000a14:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 8000a18:	f7ff ff66 	bl	80008e8 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8000a1c:	19a1      	adds	r1, r4, r6
   setSn_TX_WR(sn,ptr);
 8000a1e:	4640      	mov	r0, r8
   ptr += len;
 8000a20:	b28c      	uxth	r4, r1
   setSn_TX_WR(sn,ptr);
 8000a22:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8000a26:	f7ff fef3 	bl	8000810 <WIZCHIP_WRITE>
 8000a2a:	4638      	mov	r0, r7
 8000a2c:	b2e1      	uxtb	r1, r4
}
 8000a2e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   setSn_TX_WR(sn,ptr);
 8000a32:	f7ff beed 	b.w	8000810 <WIZCHIP_WRITE>
}
 8000a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000a3a <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8000a3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a3e:	4689      	mov	r9, r1
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
 8000a40:	4614      	mov	r4, r2
 8000a42:	b32a      	cbz	r2, 8000a90 <wiz_recv_data+0x56>
   ptr = getSn_RX_RD(sn);
 8000a44:	0085      	lsls	r5, r0, #2
 8000a46:	1c6f      	adds	r7, r5, #1
 8000a48:	00ff      	lsls	r7, r7, #3
 8000a4a:	f507 5820 	add.w	r8, r7, #10240	; 0x2800
 8000a4e:	4640      	mov	r0, r8
 8000a50:	f7ff feb0 	bl	80007b4 <WIZCHIP_READ>
 8000a54:	f507 5724 	add.w	r7, r7, #10496	; 0x2900
 8000a58:	4606      	mov	r6, r0
 8000a5a:	4638      	mov	r0, r7
 8000a5c:	f7ff feaa 	bl	80007b4 <WIZCHIP_READ>
 8000a60:	eb00 2606 	add.w	r6, r0, r6, lsl #8
 8000a64:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8000a66:	3503      	adds	r5, #3
 8000a68:	0230      	lsls	r0, r6, #8
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8000a6a:	4622      	mov	r2, r4
 8000a6c:	4649      	mov	r1, r9
 8000a6e:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 8000a72:	f7ff feff 	bl	8000874 <WIZCHIP_READ_BUF>
   ptr += len;
 8000a76:	19a1      	adds	r1, r4, r6
   
   setSn_RX_RD(sn,ptr);
 8000a78:	4640      	mov	r0, r8
   ptr += len;
 8000a7a:	b28c      	uxth	r4, r1
   setSn_RX_RD(sn,ptr);
 8000a7c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8000a80:	f7ff fec6 	bl	8000810 <WIZCHIP_WRITE>
 8000a84:	4638      	mov	r0, r7
 8000a86:	b2e1      	uxtb	r1, r4
}
 8000a88:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   setSn_RX_RD(sn,ptr);
 8000a8c:	f7ff bec0 	b.w	8000810 <WIZCHIP_WRITE>
}
 8000a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000a94 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8000a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t ptr = 0;

   ptr = getSn_RX_RD(sn);
 8000a96:	0144      	lsls	r4, r0, #5
 8000a98:	3408      	adds	r4, #8
 8000a9a:	f504 5720 	add.w	r7, r4, #10240	; 0x2800
 8000a9e:	4638      	mov	r0, r7
{
 8000aa0:	460d      	mov	r5, r1
   ptr = getSn_RX_RD(sn);
 8000aa2:	f7ff fe87 	bl	80007b4 <WIZCHIP_READ>
 8000aa6:	f504 5424 	add.w	r4, r4, #10496	; 0x2900
 8000aaa:	4606      	mov	r6, r0
 8000aac:	4620      	mov	r0, r4
 8000aae:	f7ff fe81 	bl	80007b4 <WIZCHIP_READ>
   ptr += len;
 8000ab2:	1829      	adds	r1, r5, r0
 8000ab4:	eb01 2106 	add.w	r1, r1, r6, lsl #8
   setSn_RX_RD(sn,ptr);
 8000ab8:	4638      	mov	r0, r7
   ptr += len;
 8000aba:	b28d      	uxth	r5, r1
   setSn_RX_RD(sn,ptr);
 8000abc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8000ac0:	f7ff fea6 	bl	8000810 <WIZCHIP_WRITE>
 8000ac4:	4620      	mov	r0, r4
 8000ac6:	b2e9      	uxtb	r1, r5
}
 8000ac8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   setSn_RX_RD(sn,ptr);
 8000acc:	f7ff bea0 	b.w	8000810 <WIZCHIP_WRITE>

08000ad0 <wizchip_select>:
	return (*(__IO uint8_t*)&hspi1.Instance->DR);
}

void  wizchip_select(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	4801      	ldr	r0, [pc, #4]	; (8000adc <wizchip_select+0xc>)
 8000ad6:	f001 be13 	b.w	8002700 <HAL_GPIO_WritePin>
 8000ada:	bf00      	nop
 8000adc:	40010800 	.word	0x40010800

08000ae0 <wizchip_deselect>:
}

void  wizchip_deselect(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	4801      	ldr	r0, [pc, #4]	; (8000aec <wizchip_deselect+0xc>)
 8000ae6:	f001 be0b 	b.w	8002700 <HAL_GPIO_WritePin>
 8000aea:	bf00      	nop
 8000aec:	40010800 	.word	0x40010800

08000af0 <SPIReadWrite>:
	while((hspi1.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <SPIReadWrite+0x18>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	0791      	lsls	r1, r2, #30
 8000af8:	d5fc      	bpl.n	8000af4 <SPIReadWrite+0x4>
	*(__IO uint8_t*)&hspi1.Instance->DR=data;
 8000afa:	7318      	strb	r0, [r3, #12]
	while((hspi1.Instance->SR & SPI_FLAG_RXNE)!=SPI_FLAG_RXNE);
 8000afc:	689a      	ldr	r2, [r3, #8]
 8000afe:	07d2      	lsls	r2, r2, #31
 8000b00:	d5fc      	bpl.n	8000afc <SPIReadWrite+0xc>
	return (*(__IO uint8_t*)&hspi1.Instance->DR);
 8000b02:	7b18      	ldrb	r0, [r3, #12]
}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000314 	.word	0x20000314

08000b0c <wizchip_read>:
}

uint8_t wizchip_read()
{
	uint8_t rb;
	rb=SPIReadWrite(0x00);
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f7ff bfef 	b.w	8000af0 <SPIReadWrite>

08000b12 <wizchip_write>:
	return rb;
}

void  wizchip_write(uint8_t wb)
{
	SPIReadWrite(wb);
 8000b12:	f7ff bfed 	b.w	8000af0 <SPIReadWrite>

08000b16 <wizchip_readburst>:
}

void wizchip_readburst(uint8_t* pBuf, uint16_t len)
{
 8000b16:	b538      	push	{r3, r4, r5, lr}
 8000b18:	4604      	mov	r4, r0
 8000b1a:	1845      	adds	r5, r0, r1
	for(uint16_t i=0;i<len;i++)
 8000b1c:	42ac      	cmp	r4, r5
 8000b1e:	d100      	bne.n	8000b22 <wizchip_readburst+0xc>
	{
		*pBuf=SPIReadWrite(0x00);
		pBuf++;
	}
}
 8000b20:	bd38      	pop	{r3, r4, r5, pc}
		*pBuf=SPIReadWrite(0x00);
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff ffe4 	bl	8000af0 <SPIReadWrite>
 8000b28:	f804 0b01 	strb.w	r0, [r4], #1
	for(uint16_t i=0;i<len;i++)
 8000b2c:	e7f6      	b.n	8000b1c <wizchip_readburst+0x6>

08000b2e <wizchip_writeburst>:

void  wizchip_writeburst(uint8_t* pBuf, uint16_t len)
{
 8000b2e:	b538      	push	{r3, r4, r5, lr}
 8000b30:	4604      	mov	r4, r0
 8000b32:	1845      	adds	r5, r0, r1
	for(uint16_t i=0;i<len;i++)
 8000b34:	42ac      	cmp	r4, r5
 8000b36:	d100      	bne.n	8000b3a <wizchip_writeburst+0xc>
	{
		SPIReadWrite(*pBuf);
		pBuf++;
	}
}
 8000b38:	bd38      	pop	{r3, r4, r5, pc}
		SPIReadWrite(*pBuf);
 8000b3a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000b3e:	f7ff ffd7 	bl	8000af0 <SPIReadWrite>
	for(uint16_t i=0;i<len;i++)
 8000b42:	e7f7      	b.n	8000b34 <wizchip_writeburst+0x6>

08000b44 <W5500IOInit>:

void W5500IOInit()
{
 8000b44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	 * Initialize the two GPIO pins
	 * RESET->PA0
	 * and
	 * CS->PA1
	 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	2300      	movs	r3, #0
 8000b48:	9304      	str	r3, [sp, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b4e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000b52:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	4809      	ldr	r0, [pc, #36]	; (8000b7c <W5500IOInit+0x38>)
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	f042 0204 	orr.w	r2, r2, #4
 8000b5a:	619a      	str	r2, [r3, #24]
 8000b5c:	699b      	ldr	r3, [r3, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2201      	movs	r2, #1
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	9301      	str	r3, [sp, #4]
 8000b66:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	2303      	movs	r3, #3
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	a902      	add	r1, sp, #8
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	e9cd 3202 	strd	r3, r2, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b70:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f001 fcef 	bl	8002554 <HAL_GPIO_Init>
}
 8000b76:	b007      	add	sp, #28
 8000b78:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b7c:	40010800 	.word	0x40010800

08000b80 <W5500Init>:

void W5500Init()
{
 8000b80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t tmp;
	uint8_t memsize[2][8] = { { 2, 2, 2, 2, 2, 2, 2, 2 }, { 2, 2, 2, 2, 2, 2, 2, 2 } };
 8000b82:	466a      	mov	r2, sp
 8000b84:	4615      	mov	r5, r2
 8000b86:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <W5500Init+0x74>)
 8000b88:	f103 0610 	add.w	r6, r3, #16
 8000b8c:	4614      	mov	r4, r2
 8000b8e:	6818      	ldr	r0, [r3, #0]
 8000b90:	6859      	ldr	r1, [r3, #4]
 8000b92:	3308      	adds	r3, #8
 8000b94:	c403      	stmia	r4!, {r0, r1}
 8000b96:	42b3      	cmp	r3, r6
 8000b98:	4622      	mov	r2, r4
 8000b9a:	d1f7      	bne.n	8000b8c <W5500Init+0xc>

	W5500IOInit();
 8000b9c:	f7ff ffd2 	bl	8000b44 <W5500IOInit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);//CS high by default
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	4814      	ldr	r0, [pc, #80]	; (8000bf8 <W5500Init+0x78>)
 8000ba6:	f001 fdab 	bl	8002700 <HAL_GPIO_WritePin>

	//Send a pulse on reset pin
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2101      	movs	r1, #1
 8000bae:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <W5500Init+0x78>)
 8000bb0:	f001 fda6 	bl	8002700 <HAL_GPIO_WritePin>
	tmp = 0xFF;
	while(tmp--);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	4810      	ldr	r0, [pc, #64]	; (8000bf8 <W5500Init+0x78>)
 8000bb8:	4611      	mov	r1, r2
 8000bba:	f001 fda1 	bl	8002700 <HAL_GPIO_WritePin>

	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8000bbe:	490f      	ldr	r1, [pc, #60]	; (8000bfc <W5500Init+0x7c>)
 8000bc0:	480f      	ldr	r0, [pc, #60]	; (8000c00 <W5500Init+0x80>)
 8000bc2:	f001 f93b 	bl	8001e3c <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8000bc6:	490f      	ldr	r1, [pc, #60]	; (8000c04 <W5500Init+0x84>)
 8000bc8:	480f      	ldr	r0, [pc, #60]	; (8000c08 <W5500Init+0x88>)
 8000bca:	f001 f949 	bl	8001e60 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 8000bce:	490f      	ldr	r1, [pc, #60]	; (8000c0c <W5500Init+0x8c>)
 8000bd0:	480f      	ldr	r0, [pc, #60]	; (8000c10 <W5500Init+0x90>)
 8000bd2:	f001 f95b 	bl	8001e8c <reg_wizchip_spiburst_cbfunc>

	/* WIZChip Initialize*/
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*) memsize) == -1) {
 8000bd6:	4629      	mov	r1, r5
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f001 fad9 	bl	8002190 <ctlwizchip>
 8000bde:	3001      	adds	r0, #1
 8000be0:	d103      	bne.n	8000bea <W5500Init+0x6a>
		printf("WIZCHIP Initialized Failed.\r\n");
 8000be2:	480c      	ldr	r0, [pc, #48]	; (8000c14 <W5500Init+0x94>)
 8000be4:	f002 f98a 	bl	8002efc <puts>
		while (1);
 8000be8:	e7fe      	b.n	8000be8 <W5500Init+0x68>
	}
	printf("WIZCHIP Initialization Success.\r\n");
 8000bea:	480b      	ldr	r0, [pc, #44]	; (8000c18 <W5500Init+0x98>)
 8000bec:	f002 f986 	bl	8002efc <puts>
	do {
		if (ctlwizchip(CW_GET_PHYLINK, (void*) &tmp) == -1)
			printf("Unknown PHY Link stauts.\r\n");
	} while (tmp == PHY_LINK_OFF);
*/
}
 8000bf0:	b004      	add	sp, #16
 8000bf2:	bd70      	pop	{r4, r5, r6, pc}
 8000bf4:	08003fc8 	.word	0x08003fc8
 8000bf8:	40010800 	.word	0x40010800
 8000bfc:	08000ae1 	.word	0x08000ae1
 8000c00:	08000ad1 	.word	0x08000ad1
 8000c04:	08000b13 	.word	0x08000b13
 8000c08:	08000b0d 	.word	0x08000b0d
 8000c0c:	08000b2f 	.word	0x08000b2f
 8000c10:	08000b17 	.word	0x08000b17
 8000c14:	0800424e 	.word	0x0800424e
 8000c18:	0800426b 	.word	0x0800426b

08000c1c <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8000c1c:	b508      	push	{r3, lr}
   setSIPR(DHCP_allocated_ip);
 8000c1e:	2204      	movs	r2, #4
 8000c20:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000c24:	4908      	ldr	r1, [pc, #32]	; (8000c48 <default_ip_assign+0x2c>)
 8000c26:	f7ff fe5f 	bl	80008e8 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000c30:	4906      	ldr	r1, [pc, #24]	; (8000c4c <default_ip_assign+0x30>)
 8000c32:	f7ff fe59 	bl	80008e8 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
}
 8000c36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   setGAR (DHCP_allocated_gw);
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c40:	4903      	ldr	r1, [pc, #12]	; (8000c50 <default_ip_assign+0x34>)
 8000c42:	f7ff be51 	b.w	80008e8 <WIZCHIP_WRITE_BUF>
 8000c46:	bf00      	nop
 8000c48:	20000420 	.word	0x20000420
 8000c4c:	20000424 	.word	0x20000424
 8000c50:	2000041c 	.word	0x2000041c

08000c54 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8000c54:	b508      	push	{r3, lr}
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8000c56:	2180      	movs	r1, #128	; 0x80
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f7ff fdd9 	bl	8000810 <WIZCHIP_WRITE>
   getMR(); // for delay
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff fda8 	bl	80007b4 <WIZCHIP_READ>
   default_ip_assign();
 8000c64:	f7ff ffda 	bl	8000c1c <default_ip_assign>
   setSHAR(DHCP_CHADDR);
}
 8000c68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   setSHAR(DHCP_CHADDR);
 8000c6c:	2206      	movs	r2, #6
 8000c6e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8000c72:	4901      	ldr	r1, [pc, #4]	; (8000c78 <default_ip_update+0x24>)
 8000c74:	f7ff be38 	b.w	80008e8 <WIZCHIP_WRITE_BUF>
 8000c78:	20000404 	.word	0x20000404

08000c7c <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8000c7c:	b508      	push	{r3, lr}
	// WIZchip Software Reset
	setMR(MR_RST);
 8000c7e:	2180      	movs	r1, #128	; 0x80
 8000c80:	2000      	movs	r0, #0
 8000c82:	f7ff fdc5 	bl	8000810 <WIZCHIP_WRITE>
	getMR(); // for delay
 8000c86:	2000      	movs	r0, #0
 8000c88:	f7ff fd94 	bl	80007b4 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
}
 8000c8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	setSHAR(DHCP_CHADDR);
 8000c90:	2206      	movs	r2, #6
 8000c92:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8000c96:	4901      	ldr	r1, [pc, #4]	; (8000c9c <default_ip_conflict+0x20>)
 8000c98:	f7ff be26 	b.w	80008e8 <WIZCHIP_WRITE_BUF>
 8000c9c:	20000404 	.word	0x20000404

08000ca0 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8000ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
   dhcp_ip_assign   = default_ip_assign;
   dhcp_ip_update   = default_ip_update;
   dhcp_ip_conflict = default_ip_conflict;
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8000ca2:	4d09      	ldr	r5, [pc, #36]	; (8000cc8 <reg_dhcp_cbfunc+0x28>)
   dhcp_ip_update   = default_ip_update;
 8000ca4:	4c09      	ldr	r4, [pc, #36]	; (8000ccc <reg_dhcp_cbfunc+0x2c>)
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	bf18      	it	ne
 8000caa:	4605      	movne	r5, r0
   if(ip_update)   dhcp_ip_update = ip_update;
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf18      	it	ne
 8000cb0:	460c      	movne	r4, r1
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8000cb2:	2a00      	cmp	r2, #0
   dhcp_ip_conflict = default_ip_conflict;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <reg_dhcp_cbfunc+0x30>)
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8000cb6:	bf18      	it	ne
 8000cb8:	4613      	movne	r3, r2
   dhcp_ip_update   = default_ip_update;
 8000cba:	4f06      	ldr	r7, [pc, #24]	; (8000cd4 <reg_dhcp_cbfunc+0x34>)
   dhcp_ip_conflict = default_ip_conflict;
 8000cbc:	4e06      	ldr	r6, [pc, #24]	; (8000cd8 <reg_dhcp_cbfunc+0x38>)
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8000cbe:	4807      	ldr	r0, [pc, #28]	; (8000cdc <reg_dhcp_cbfunc+0x3c>)
   if(ip_update)   dhcp_ip_update = ip_update;
 8000cc0:	603c      	str	r4, [r7, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8000cc2:	6005      	str	r5, [r0, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8000cc4:	6033      	str	r3, [r6, #0]
}
 8000cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc8:	08000c1d 	.word	0x08000c1d
 8000ccc:	08000c55 	.word	0x08000c55
 8000cd0:	08000c7d 	.word	0x08000c7d
 8000cd4:	2000002c 	.word	0x2000002c
 8000cd8:	20000028 	.word	0x20000028
 8000cdc:	20000024 	.word	0x20000024

08000ce0 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8000ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8000ce2:	2206      	movs	r2, #6
 8000ce4:	4669      	mov	r1, sp
 8000ce6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8000cea:	f7ff fdc3 	bl	8000874 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8000cee:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <makeDHCPMSG+0x84>)
	pDHCPMSG->secs    = DHCP_SECS;
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);

	pDHCPMSG->ciaddr[0] = 0;
 8000cf0:	2500      	movs	r5, #0
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8000cf2:	681c      	ldr	r4, [r3, #0]
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <makeDHCPMSG+0x88>)
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8000cf6:	4629      	mov	r1, r5
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8000cf8:	6023      	str	r3, [r4, #0]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <makeDHCPMSG+0x8c>)
	pDHCPMSG->siaddr[0] = 0;
 8000cfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8000d00:	681b      	ldr	r3, [r3, #0]
	pDHCPMSG->giaddr[0] = 0;
 8000d02:	61a5      	str	r5, [r4, #24]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8000d04:	0e1a      	lsrs	r2, r3, #24
 8000d06:	7122      	strb	r2, [r4, #4]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8000d08:	0c1a      	lsrs	r2, r3, #16
 8000d0a:	7162      	strb	r2, [r4, #5]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8000d0c:	71e3      	strb	r3, [r4, #7]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8000d0e:	0a1a      	lsrs	r2, r3, #8
	pDHCPMSG->ciaddr[0] = 0;
 8000d10:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000d14:	e9c4 3502 	strd	r3, r5, [r4, #8]
	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <makeDHCPMSG+0x90>)
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8000d1a:	71a2      	strb	r2, [r4, #6]
	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8000d1c:	781a      	ldrb	r2, [r3, #0]
	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8000d1e:	8565      	strh	r5, [r4, #42]	; 0x2a
	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8000d20:	7722      	strb	r2, [r4, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8000d22:	785a      	ldrb	r2, [r3, #1]
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8000d24:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8000d28:	7762      	strb	r2, [r4, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8000d2a:	789a      	ldrb	r2, [r3, #2]
 8000d2c:	77a2      	strb	r2, [r4, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8000d2e:	78da      	ldrb	r2, [r3, #3]
 8000d30:	77e2      	strb	r2, [r4, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8000d32:	791a      	ldrb	r2, [r3, #4]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8000d34:	795b      	ldrb	r3, [r3, #5]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8000d36:	f884 2020 	strb.w	r2, [r4, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8000d3a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8000d3e:	2240      	movs	r2, #64	; 0x40
	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8000d40:	f8c4 5022 	str.w	r5, [r4, #34]	; 0x22
 8000d44:	f8c4 5026 	str.w	r5, [r4, #38]	; 0x26
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8000d48:	f002 f84a 	bl	8002de0 <memset>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8000d4c:	2280      	movs	r2, #128	; 0x80
 8000d4e:	4629      	mov	r1, r5
 8000d50:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8000d54:	f002 f844 	bl	8002de0 <memset>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <makeDHCPMSG+0x94>)
 8000d5a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
}
 8000d5e:	b003      	add	sp, #12
 8000d60:	bd30      	pop	{r4, r5, pc}
 8000d62:	bf00      	nop
 8000d64:	20000434 	.word	0x20000434
 8000d68:	00060101 	.word	0x00060101
 8000d6c:	20000414 	.word	0x20000414
 8000d70:	20000404 	.word	0x20000404
 8000d74:	63538263 	.word	0x63538263

08000d78 <send_DHCP_DECLINE>:

}

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8000d78:	b530      	push	{r4, r5, lr}
	
	makeDHCPMSG();

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8000d7a:	4d32      	ldr	r5, [pc, #200]	; (8000e44 <send_DHCP_DECLINE+0xcc>)
{
 8000d7c:	b085      	sub	sp, #20
	makeDHCPMSG();
 8000d7e:	f7ff ffaf 	bl	8000ce0 <makeDHCPMSG>
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8000d82:	6828      	ldr	r0, [r5, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8000d84:	4b30      	ldr	r3, [pc, #192]	; (8000e48 <send_DHCP_DECLINE+0xd0>)
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8000d86:	2100      	movs	r1, #0
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8000d88:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
	pDHCPMSG->OPT[k++] = 0x01;
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
	pDHCPMSG->OPT[k++] = 0x07;
 8000d8c:	f240 1307 	movw	r3, #263	; 0x107
 8000d90:	f8a0 30f4 	strh.w	r3, [r0, #244]	; 0xf4
	pDHCPMSG->OPT[k++] = 0x01;
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8000d94:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <send_DHCP_DECLINE+0xd4>)
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];

	pDHCPMSG->OPT[k++] = endOption;
 8000d96:	24ff      	movs	r4, #255	; 0xff
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8000d98:	781a      	ldrb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8000d9a:	7281      	strb	r1, [r0, #10]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8000d9c:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8000da0:	785a      	ldrb	r2, [r3, #1]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8000da2:	72c1      	strb	r1, [r0, #11]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8000da4:	f880 20f7 	strb.w	r2, [r0, #247]	; 0xf7
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8000da8:	789a      	ldrb	r2, [r3, #2]

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8000daa:	f200 1009 	addw	r0, r0, #265	; 0x109
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8000dae:	f800 2c11 	strb.w	r2, [r0, #-17]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8000db2:	78da      	ldrb	r2, [r3, #3]
 8000db4:	f800 2c10 	strb.w	r2, [r0, #-16]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8000db8:	791a      	ldrb	r2, [r3, #4]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8000dba:	795b      	ldrb	r3, [r3, #5]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8000dbc:	f800 2c0f 	strb.w	r2, [r0, #-15]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8000dc0:	f800 3c0e 	strb.w	r3, [r0, #-14]
	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8000dc4:	f240 4332 	movw	r3, #1074	; 0x432
 8000dc8:	f820 3c0d 	strh.w	r3, [r0, #-13]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8000dcc:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <send_DHCP_DECLINE+0xd8>)
 8000dce:	781a      	ldrb	r2, [r3, #0]
 8000dd0:	f800 2c0b 	strb.w	r2, [r0, #-11]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8000dd4:	785a      	ldrb	r2, [r3, #1]
 8000dd6:	f800 2c0a 	strb.w	r2, [r0, #-10]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8000dda:	789a      	ldrb	r2, [r3, #2]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8000ddc:	78db      	ldrb	r3, [r3, #3]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8000dde:	f800 2c09 	strb.w	r2, [r0, #-9]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8000de2:	f800 3c08 	strb.w	r3, [r0, #-8]
	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8000de6:	f240 4336 	movw	r3, #1078	; 0x436
 8000dea:	f820 3c07 	strh.w	r3, [r0, #-7]
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8000dee:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <send_DHCP_DECLINE+0xdc>)
 8000df0:	781a      	ldrb	r2, [r3, #0]
 8000df2:	f800 2c05 	strb.w	r2, [r0, #-5]
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8000df6:	785a      	ldrb	r2, [r3, #1]
 8000df8:	f800 2c04 	strb.w	r2, [r0, #-4]
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8000dfc:	789a      	ldrb	r2, [r3, #2]
 8000dfe:	f800 2c03 	strb.w	r2, [r0, #-3]
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8000e02:	78db      	ldrb	r3, [r3, #3]
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8000e04:	f240 121b 	movw	r2, #283	; 0x11b
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8000e08:	f800 3c02 	strb.w	r3, [r0, #-2]
	pDHCPMSG->OPT[k++] = endOption;
 8000e0c:	f800 4c01 	strb.w	r4, [r0, #-1]
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8000e10:	f001 ffe6 	bl	8002de0 <memset>
	ip[1] = 0xFF;
	ip[2] = 0xFF;
	ip[3] = 0xFF;

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
 8000e14:	4810      	ldr	r0, [pc, #64]	; (8000e58 <send_DHCP_DECLINE+0xe0>)
	ip[0] = 0xFF;
 8000e16:	f88d 400c 	strb.w	r4, [sp, #12]
	ip[1] = 0xFF;
 8000e1a:	f88d 400d 	strb.w	r4, [sp, #13]
	ip[2] = 0xFF;
 8000e1e:	f88d 400e 	strb.w	r4, [sp, #14]
	ip[3] = 0xFF;
 8000e22:	f88d 400f 	strb.w	r4, [sp, #15]
	printf("\r\n> Send DHCP_DECLINE\r\n");
 8000e26:	f002 f869 	bl	8002efc <puts>
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8000e2a:	2343      	movs	r3, #67	; 0x43
 8000e2c:	480b      	ldr	r0, [pc, #44]	; (8000e5c <send_DHCP_DECLINE+0xe4>)
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	f44f 7209 	mov.w	r2, #548	; 0x224
 8000e34:	6829      	ldr	r1, [r5, #0]
 8000e36:	ab03      	add	r3, sp, #12
 8000e38:	7800      	ldrb	r0, [r0, #0]
 8000e3a:	f000 fe3d 	bl	8001ab8 <sendto>
}
 8000e3e:	b005      	add	sp, #20
 8000e40:	bd30      	pop	{r4, r5, pc}
 8000e42:	bf00      	nop
 8000e44:	20000434 	.word	0x20000434
 8000e48:	3d040135 	.word	0x3d040135
 8000e4c:	20000404 	.word	0x20000404
 8000e50:	20000420 	.word	0x20000420
 8000e54:	2000040e 	.word	0x2000040e
 8000e58:	0800428c 	.word	0x0800428c
 8000e5c:	20000412 	.word	0x20000412

08000e60 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8000e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8000e64:	4c87      	ldr	r4, [pc, #540]	; (8001084 <parseDHCPMSG+0x224>)
{
 8000e66:	b089      	sub	sp, #36	; 0x24
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8000e68:	7820      	ldrb	r0, [r4, #0]
 8000e6a:	f7ff fd98 	bl	800099e <getSn_RX_RSR>
 8000e6e:	2800      	cmp	r0, #0
 8000e70:	d03f      	beq.n	8000ef2 <parseDHCPMSG+0x92>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8000e72:	f10d 0316 	add.w	r3, sp, #22
 8000e76:	4d84      	ldr	r5, [pc, #528]	; (8001088 <parseDHCPMSG+0x228>)
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	6829      	ldr	r1, [r5, #0]
 8000e7e:	7820      	ldrb	r0, [r4, #0]
 8000e80:	ab06      	add	r3, sp, #24
 8000e82:	f000 fec9 	bl	8001c18 <recvfrom>
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
 8000e86:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8000e8a:	b284      	uxth	r4, r0
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8000e92:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8000e9c:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8000ea0:	487a      	ldr	r0, [pc, #488]	; (800108c <parseDHCPMSG+0x22c>)
 8000ea2:	9402      	str	r4, [sp, #8]
 8000ea4:	f001 ffa4 	bl	8002df0 <iprintf>
   #endif   
   }
   else{ return 0;}
	if (svr_port == DHCP_SERVER_PORT) {
 8000ea8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8000eac:	2b43      	cmp	r3, #67	; 0x43
 8000eae:	f040 80e6 	bne.w	800107e <parseDHCPMSG+0x21e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8000eb2:	682a      	ldr	r2, [r5, #0]
 8000eb4:	4b76      	ldr	r3, [pc, #472]	; (8001090 <parseDHCPMSG+0x230>)
 8000eb6:	7f10      	ldrb	r0, [r2, #28]
 8000eb8:	7819      	ldrb	r1, [r3, #0]
 8000eba:	4288      	cmp	r0, r1
 8000ebc:	d115      	bne.n	8000eea <parseDHCPMSG+0x8a>
 8000ebe:	7f50      	ldrb	r0, [r2, #29]
 8000ec0:	7859      	ldrb	r1, [r3, #1]
 8000ec2:	4288      	cmp	r0, r1
 8000ec4:	d111      	bne.n	8000eea <parseDHCPMSG+0x8a>
 8000ec6:	7f90      	ldrb	r0, [r2, #30]
 8000ec8:	7899      	ldrb	r1, [r3, #2]
 8000eca:	4288      	cmp	r0, r1
 8000ecc:	d10d      	bne.n	8000eea <parseDHCPMSG+0x8a>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8000ece:	7fd0      	ldrb	r0, [r2, #31]
 8000ed0:	78d9      	ldrb	r1, [r3, #3]
 8000ed2:	4288      	cmp	r0, r1
 8000ed4:	d109      	bne.n	8000eea <parseDHCPMSG+0x8a>
 8000ed6:	f892 0020 	ldrb.w	r0, [r2, #32]
 8000eda:	7919      	ldrb	r1, [r3, #4]
 8000edc:	4288      	cmp	r0, r1
 8000ede:	d104      	bne.n	8000eea <parseDHCPMSG+0x8a>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8000ee0:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 8000ee4:	795b      	ldrb	r3, [r3, #5]
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	d006      	beq.n	8000ef8 <parseDHCPMSG+0x98>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
 8000eea:	486a      	ldr	r0, [pc, #424]	; (8001094 <parseDHCPMSG+0x234>)
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
 8000eec:	f002 f806 	bl	8002efc <puts>
#endif
                return 0;
 8000ef0:	2000      	movs	r0, #0
   				break;
			} // switch
		} // while
	} // if
	return	type;
}
 8000ef2:	b009      	add	sp, #36	; 0x24
 8000ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8000ef8:	4967      	ldr	r1, [pc, #412]	; (8001098 <parseDHCPMSG+0x238>)
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8000efa:	f89d c018 	ldrb.w	ip, [sp, #24]
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8000efe:	780f      	ldrb	r7, [r1, #0]
 8000f00:	784e      	ldrb	r6, [r1, #1]
 8000f02:	788d      	ldrb	r5, [r1, #2]
 8000f04:	78c8      	ldrb	r0, [r1, #3]
 8000f06:	ea47 0306 	orr.w	r3, r7, r6
 8000f0a:	432b      	orrs	r3, r5
 8000f0c:	4303      	orrs	r3, r0
 8000f0e:	d022      	beq.n	8000f56 <parseDHCPMSG+0xf6>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8000f10:	45bc      	cmp	ip, r7
 8000f12:	d10b      	bne.n	8000f2c <parseDHCPMSG+0xcc>
 8000f14:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8000f18:	42b3      	cmp	r3, r6
 8000f1a:	d107      	bne.n	8000f2c <parseDHCPMSG+0xcc>
 8000f1c:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8000f20:	42ab      	cmp	r3, r5
 8000f22:	d103      	bne.n	8000f2c <parseDHCPMSG+0xcc>
 8000f24:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8000f28:	4283      	cmp	r3, r0
 8000f2a:	d014      	beq.n	8000f56 <parseDHCPMSG+0xf6>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8000f2c:	4b5b      	ldr	r3, [pc, #364]	; (800109c <parseDHCPMSG+0x23c>)
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8000f2e:	7818      	ldrb	r0, [r3, #0]
 8000f30:	4560      	cmp	r0, ip
 8000f32:	d10e      	bne.n	8000f52 <parseDHCPMSG+0xf2>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8000f34:	f89d 5019 	ldrb.w	r5, [sp, #25]
 8000f38:	7858      	ldrb	r0, [r3, #1]
 8000f3a:	4285      	cmp	r5, r0
 8000f3c:	d109      	bne.n	8000f52 <parseDHCPMSG+0xf2>
 8000f3e:	f89d 501a 	ldrb.w	r5, [sp, #26]
 8000f42:	7898      	ldrb	r0, [r3, #2]
 8000f44:	4285      	cmp	r5, r0
 8000f46:	d104      	bne.n	8000f52 <parseDHCPMSG+0xf2>
 8000f48:	f89d 001b 	ldrb.w	r0, [sp, #27]
 8000f4c:	78db      	ldrb	r3, [r3, #3]
 8000f4e:	4298      	cmp	r0, r3
 8000f50:	d001      	beq.n	8000f56 <parseDHCPMSG+0xf6>
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
 8000f52:	4853      	ldr	r0, [pc, #332]	; (80010a0 <parseDHCPMSG+0x240>)
 8000f54:	e7ca      	b.n	8000eec <parseDHCPMSG+0x8c>
	uint8_t type = 0;
 8000f56:	2000      	movs	r0, #0
		e = p + (len - 240);
 8000f58:	f102 03f0 	add.w	r3, r2, #240	; 0xf0
                DHCP_REAL_SIP[1]=svr_addr[1];
 8000f5c:	f89d 9019 	ldrb.w	r9, [sp, #25]
		e = p + (len - 240);
 8000f60:	4422      	add	r2, r4
                DHCP_REAL_SIP[2]=svr_addr[2];
 8000f62:	f89d a01a 	ldrb.w	sl, [sp, #26]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8000f66:	f89d 801b 	ldrb.w	r8, [sp, #27]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8000f6a:	4c4c      	ldr	r4, [pc, #304]	; (800109c <parseDHCPMSG+0x23c>)
   				DHCP_allocated_dns[0] = *p++;
 8000f6c:	4d4d      	ldr	r5, [pc, #308]	; (80010a4 <parseDHCPMSG+0x244>)
   				DHCP_allocated_gw[0] = *p++;
 8000f6e:	4e4e      	ldr	r6, [pc, #312]	; (80010a8 <parseDHCPMSG+0x248>)
   				DHCP_allocated_sn[0] = *p++;
 8000f70:	4f4e      	ldr	r7, [pc, #312]	; (80010ac <parseDHCPMSG+0x24c>)
		while ( p < e ) {
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d301      	bcc.n	8000f7a <parseDHCPMSG+0x11a>
	return	type;
 8000f76:	b240      	sxtb	r0, r0
 8000f78:	e7bb      	b.n	8000ef2 <parseDHCPMSG+0x92>
			switch ( *p ) {
 8000f7a:	f893 e000 	ldrb.w	lr, [r3]
 8000f7e:	f1be 0f33 	cmp.w	lr, #51	; 0x33
 8000f82:	d059      	beq.n	8001038 <parseDHCPMSG+0x1d8>
 8000f84:	d80b      	bhi.n	8000f9e <parseDHCPMSG+0x13e>
 8000f86:	f1be 0f06 	cmp.w	lr, #6
 8000f8a:	d811      	bhi.n	8000fb0 <parseDHCPMSG+0x150>
 8000f8c:	f1be 0f06 	cmp.w	lr, #6
 8000f90:	d80e      	bhi.n	8000fb0 <parseDHCPMSG+0x150>
 8000f92:	e8df f00e 	tbb	[pc, lr]
 8000f96:	1712      	.short	0x1712
 8000f98:	0d0d290d 	.word	0x0d0d290d
 8000f9c:	3e          	.byte	0x3e
 8000f9d:	00          	.byte	0x00
 8000f9e:	f1be 0f36 	cmp.w	lr, #54	; 0x36
 8000fa2:	d051      	beq.n	8001048 <parseDHCPMSG+0x1e8>
 8000fa4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8000fa8:	d067      	beq.n	800107a <parseDHCPMSG+0x21a>
 8000faa:	f1be 0f35 	cmp.w	lr, #53	; 0x35
 8000fae:	d006      	beq.n	8000fbe <parseDHCPMSG+0x15e>
   				opt_len = *p++;
 8000fb0:	f103 0e02 	add.w	lr, r3, #2
   				p += opt_len;
 8000fb4:	785b      	ldrb	r3, [r3, #1]
 8000fb6:	4473      	add	r3, lr
   				break;
 8000fb8:	e7db      	b.n	8000f72 <parseDHCPMSG+0x112>
   				p++;
 8000fba:	3301      	adds	r3, #1
   				break;
 8000fbc:	e7d9      	b.n	8000f72 <parseDHCPMSG+0x112>
   				type = *p++;
 8000fbe:	7898      	ldrb	r0, [r3, #2]
 8000fc0:	3303      	adds	r3, #3
   				break;
 8000fc2:	e7d6      	b.n	8000f72 <parseDHCPMSG+0x112>
   				DHCP_allocated_sn[0] = *p++;
 8000fc4:	f893 e002 	ldrb.w	lr, [r3, #2]
 8000fc8:	f887 e000 	strb.w	lr, [r7]
   				DHCP_allocated_sn[1] = *p++;
 8000fcc:	f893 e003 	ldrb.w	lr, [r3, #3]
 8000fd0:	f887 e001 	strb.w	lr, [r7, #1]
   				DHCP_allocated_sn[2] = *p++;
 8000fd4:	f893 e004 	ldrb.w	lr, [r3, #4]
 8000fd8:	f887 e002 	strb.w	lr, [r7, #2]
   				DHCP_allocated_sn[3] = *p++;
 8000fdc:	f893 e005 	ldrb.w	lr, [r3, #5]
 8000fe0:	f887 e003 	strb.w	lr, [r7, #3]
   				DHCP_SIP[3] = *p++;
 8000fe4:	3306      	adds	r3, #6
   				break;
 8000fe6:	e7c4      	b.n	8000f72 <parseDHCPMSG+0x112>
   				DHCP_allocated_gw[0] = *p++;
 8000fe8:	f893 b002 	ldrb.w	fp, [r3, #2]
   				opt_len = *p++;       
 8000fec:	f893 e001 	ldrb.w	lr, [r3, #1]
   				DHCP_allocated_gw[0] = *p++;
 8000ff0:	f886 b000 	strb.w	fp, [r6]
   				DHCP_allocated_gw[1] = *p++;
 8000ff4:	f893 b003 	ldrb.w	fp, [r3, #3]
 8000ff8:	f886 b001 	strb.w	fp, [r6, #1]
   				DHCP_allocated_gw[2] = *p++;
 8000ffc:	f893 b004 	ldrb.w	fp, [r3, #4]
 8001000:	f886 b002 	strb.w	fp, [r6, #2]
   				DHCP_allocated_gw[3] = *p++;
 8001004:	f893 b005 	ldrb.w	fp, [r3, #5]
 8001008:	f886 b003 	strb.w	fp, [r6, #3]
   				p = p + (opt_len - 4);
 800100c:	4473      	add	r3, lr
 800100e:	3302      	adds	r3, #2
   				break;
 8001010:	e7af      	b.n	8000f72 <parseDHCPMSG+0x112>
   				DHCP_allocated_dns[0] = *p++;
 8001012:	f893 b002 	ldrb.w	fp, [r3, #2]
   				opt_len = *p++;       
 8001016:	f893 e001 	ldrb.w	lr, [r3, #1]
   				DHCP_allocated_dns[0] = *p++;
 800101a:	f885 b000 	strb.w	fp, [r5]
   				DHCP_allocated_dns[1] = *p++;
 800101e:	f893 b003 	ldrb.w	fp, [r3, #3]
 8001022:	f885 b001 	strb.w	fp, [r5, #1]
   				DHCP_allocated_dns[2] = *p++;
 8001026:	f893 b004 	ldrb.w	fp, [r3, #4]
 800102a:	f885 b002 	strb.w	fp, [r5, #2]
   				DHCP_allocated_dns[3] = *p++;
 800102e:	f893 b005 	ldrb.w	fp, [r3, #5]
 8001032:	f885 b003 	strb.w	fp, [r5, #3]
 8001036:	e7e9      	b.n	800100c <parseDHCPMSG+0x1ac>
               dhcp_lease_time = 10;
 8001038:	f04f 0b0a 	mov.w	fp, #10
 800103c:	f8df e070 	ldr.w	lr, [pc, #112]	; 80010b0 <parseDHCPMSG+0x250>
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8001040:	3306      	adds	r3, #6
               dhcp_lease_time = 10;
 8001042:	f8ce b000 	str.w	fp, [lr]
   				break;
 8001046:	e794      	b.n	8000f72 <parseDHCPMSG+0x112>
   				DHCP_SIP[0] = *p++;
 8001048:	f893 e002 	ldrb.w	lr, [r3, #2]
                DHCP_REAL_SIP[0]=svr_addr[0];
 800104c:	f884 c000 	strb.w	ip, [r4]
   				DHCP_SIP[0] = *p++;
 8001050:	f881 e000 	strb.w	lr, [r1]
   				DHCP_SIP[1] = *p++;
 8001054:	f893 e003 	ldrb.w	lr, [r3, #3]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8001058:	f884 9001 	strb.w	r9, [r4, #1]
   				DHCP_SIP[1] = *p++;
 800105c:	f881 e001 	strb.w	lr, [r1, #1]
   				DHCP_SIP[2] = *p++;
 8001060:	f893 e004 	ldrb.w	lr, [r3, #4]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8001064:	f884 a002 	strb.w	sl, [r4, #2]
   				DHCP_SIP[2] = *p++;
 8001068:	f881 e002 	strb.w	lr, [r1, #2]
   				DHCP_SIP[3] = *p++;
 800106c:	f893 e005 	ldrb.w	lr, [r3, #5]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8001070:	f884 8003 	strb.w	r8, [r4, #3]
   				DHCP_SIP[3] = *p++;
 8001074:	f881 e003 	strb.w	lr, [r1, #3]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8001078:	e7b4      	b.n	8000fe4 <parseDHCPMSG+0x184>
			switch ( *p ) {
 800107a:	4613      	mov	r3, r2
 800107c:	e779      	b.n	8000f72 <parseDHCPMSG+0x112>
	uint8_t type = 0;
 800107e:	2000      	movs	r0, #0
 8001080:	e779      	b.n	8000f76 <parseDHCPMSG+0x116>
 8001082:	bf00      	nop
 8001084:	20000412 	.word	0x20000412
 8001088:	20000434 	.word	0x20000434
 800108c:	080042a3 	.word	0x080042a3
 8001090:	20000404 	.word	0x20000404
 8001094:	080042d2 	.word	0x080042d2
 8001098:	2000040e 	.word	0x2000040e
 800109c:	2000040a 	.word	0x2000040a
 80010a0:	08004300 	.word	0x08004300
 80010a4:	20000418 	.word	0x20000418
 80010a8:	2000041c 	.word	0x2000041c
 80010ac:	20000424 	.word	0x20000424
 80010b0:	20000030 	.word	0x20000030

080010b4 <DHCP_stop>:

	return ret;
}

void    DHCP_stop(void)
{
 80010b4:	b508      	push	{r3, lr}
   close(DHCP_SOCKET);
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <DHCP_stop+0x14>)
 80010b8:	7818      	ldrb	r0, [r3, #0]
 80010ba:	f000 fc2d 	bl	8001918 <close>
   dhcp_state = STATE_DHCP_STOP;
 80010be:	2206      	movs	r2, #6
 80010c0:	4b02      	ldr	r3, [pc, #8]	; (80010cc <DHCP_stop+0x18>)
 80010c2:	701a      	strb	r2, [r3, #0]
}
 80010c4:	bd08      	pop	{r3, pc}
 80010c6:	bf00      	nop
 80010c8:	20000412 	.word	0x20000412
 80010cc:	2000042d 	.word	0x2000042d

080010d0 <check_DHCP_leasedIP>:
	}
	return ret;
}

int8_t check_DHCP_leasedIP(void)
{
 80010d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 80010d2:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80010d6:	f7ff fb6d 	bl	80007b4 <WIZCHIP_READ>
	setRCR(0x03);
 80010da:	2103      	movs	r1, #3
	tmp = getRCR();
 80010dc:	4605      	mov	r5, r0
	setRCR(0x03);
 80010de:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80010e2:	f7ff fb95 	bl	8000810 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 80010e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80010ea:	4810      	ldr	r0, [pc, #64]	; (800112c <check_DHCP_leasedIP+0x5c>)
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2211      	movs	r2, #17
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <check_DHCP_leasedIP+0x60>)
 80010f2:	4910      	ldr	r1, [pc, #64]	; (8001134 <check_DHCP_leasedIP+0x64>)
 80010f4:	7800      	ldrb	r0, [r0, #0]
 80010f6:	f000 fcdf 	bl	8001ab8 <sendto>
 80010fa:	4604      	mov	r4, r0

	// RCR value restore
	setRCR(tmp);
 80010fc:	4629      	mov	r1, r5
 80010fe:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001102:	f7ff fb85 	bl	8000810 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8001106:	340d      	adds	r4, #13
 8001108:	d105      	bne.n	8001116 <check_DHCP_leasedIP+0x46>
		// UDP send Timeout occurred : allocated IP address is unique, DHCP Success

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
 800110a:	480b      	ldr	r0, [pc, #44]	; (8001138 <check_DHCP_leasedIP+0x68>)
 800110c:	f001 fef6 	bl	8002efc <puts>
#endif

		return 1;
 8001110:	2001      	movs	r0, #1
		ret = dhcp_tick_1s;
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;

		return 0;
	}
}	
 8001112:	b003      	add	sp, #12
 8001114:	bd30      	pop	{r4, r5, pc}
		send_DHCP_DECLINE();
 8001116:	f7ff fe2f 	bl	8000d78 <send_DHCP_DECLINE>
		ret = dhcp_tick_1s;
 800111a:	4a08      	ldr	r2, [pc, #32]	; (800113c <check_DHCP_leasedIP+0x6c>)
 800111c:	6811      	ldr	r1, [r2, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 800111e:	6813      	ldr	r3, [r2, #0]
 8001120:	1a5b      	subs	r3, r3, r1
 8001122:	2b01      	cmp	r3, #1
 8001124:	d9fb      	bls.n	800111e <check_DHCP_leasedIP+0x4e>
 8001126:	2000      	movs	r0, #0
 8001128:	e7f3      	b.n	8001112 <check_DHCP_leasedIP+0x42>
 800112a:	bf00      	nop
 800112c:	20000412 	.word	0x20000412
 8001130:	20000420 	.word	0x20000420
 8001134:	0800433e 	.word	0x0800433e
 8001138:	08004350 	.word	0x08004350
 800113c:	20000430 	.word	0x20000430

08001140 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
	dhcp_tick_1s = 0;
 8001140:	2300      	movs	r3, #0
	dhcp_tick_next = DHCP_WAIT_TIME;
 8001142:	210a      	movs	r1, #10
	dhcp_tick_1s = 0;
 8001144:	4a03      	ldr	r2, [pc, #12]	; (8001154 <reset_DHCP_timeout+0x14>)
 8001146:	6013      	str	r3, [r2, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 8001148:	4a03      	ldr	r2, [pc, #12]	; (8001158 <reset_DHCP_timeout+0x18>)
 800114a:	6011      	str	r1, [r2, #0]
	dhcp_retry_count = 0;
 800114c:	4a03      	ldr	r2, [pc, #12]	; (800115c <reset_DHCP_timeout+0x1c>)
 800114e:	7013      	strb	r3, [r2, #0]
}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000430 	.word	0x20000430
 8001158:	20000034 	.word	0x20000034
 800115c:	2000042c 	.word	0x2000042c

08001160 <DHCP_init>:
   uint8_t zeroip[4] = {0,0,0,0};
 8001160:	2300      	movs	r3, #0
{
 8001162:	b573      	push	{r0, r1, r4, r5, r6, lr}
   getSHAR(DHCP_CHADDR);
 8001164:	4c24      	ldr	r4, [pc, #144]	; (80011f8 <DHCP_init+0x98>)
 8001166:	2206      	movs	r2, #6
{
 8001168:	4606      	mov	r6, r0
 800116a:	460d      	mov	r5, r1
   getSHAR(DHCP_CHADDR);
 800116c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001170:	4621      	mov	r1, r4
   uint8_t zeroip[4] = {0,0,0,0};
 8001172:	9301      	str	r3, [sp, #4]
   getSHAR(DHCP_CHADDR);
 8001174:	f7ff fb7e 	bl	8000874 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8001178:	7862      	ldrb	r2, [r4, #1]
 800117a:	7823      	ldrb	r3, [r4, #0]
 800117c:	4313      	orrs	r3, r2
 800117e:	78a2      	ldrb	r2, [r4, #2]
 8001180:	4313      	orrs	r3, r2
 8001182:	78e2      	ldrb	r2, [r4, #3]
 8001184:	4313      	orrs	r3, r2
 8001186:	7922      	ldrb	r2, [r4, #4]
 8001188:	4313      	orrs	r3, r2
 800118a:	7962      	ldrb	r2, [r4, #5]
 800118c:	4313      	orrs	r3, r2
 800118e:	d10d      	bne.n	80011ac <DHCP_init+0x4c>
      DHCP_CHADDR[1] = 0x08;
 8001190:	2208      	movs	r2, #8
 8001192:	7062      	strb	r2, [r4, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8001194:	22dc      	movs	r2, #220	; 0xdc
      setSHAR(DHCP_CHADDR);     
 8001196:	4621      	mov	r1, r4
      DHCP_CHADDR[2] = 0xdc;      
 8001198:	70a2      	strb	r2, [r4, #2]
      setSHAR(DHCP_CHADDR);     
 800119a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800119e:	2206      	movs	r2, #6
      DHCP_CHADDR[0] = 0x00;
 80011a0:	7023      	strb	r3, [r4, #0]
      DHCP_CHADDR[3] = 0x00;
 80011a2:	70e3      	strb	r3, [r4, #3]
      DHCP_CHADDR[4] = 0x00;
 80011a4:	7123      	strb	r3, [r4, #4]
      DHCP_CHADDR[5] = 0x00; 
 80011a6:	7163      	strb	r3, [r4, #5]
      setSHAR(DHCP_CHADDR);     
 80011a8:	f7ff fb9e 	bl	80008e8 <WIZCHIP_WRITE_BUF>
	DHCP_SOCKET = s; // SOCK_DHCP
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <DHCP_init+0x9c>)
		DHCP_XID += DHCP_CHADDR[4];
 80011ae:	7920      	ldrb	r0, [r4, #4]
	DHCP_SOCKET = s; // SOCK_DHCP
 80011b0:	701e      	strb	r6, [r3, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 80011b2:	4b13      	ldr	r3, [pc, #76]	; (8001200 <DHCP_init+0xa0>)
		DHCP_XID += DHCP_CHADDR[3];
 80011b4:	78e1      	ldrb	r1, [r4, #3]
	pDHCPMSG = (RIP_MSG*)buf;
 80011b6:	601d      	str	r5, [r3, #0]
		DHCP_XID += DHCP_CHADDR[4];
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <DHCP_init+0xa4>)
		DHCP_XID += DHCP_CHADDR[5];
 80011ba:	7962      	ldrb	r2, [r4, #5]
		DHCP_XID += DHCP_CHADDR[4];
 80011bc:	180c      	adds	r4, r1, r0
 80011be:	4423      	add	r3, r4
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 80011c0:	4041      	eors	r1, r0
		DHCP_XID += DHCP_CHADDR[5];
 80011c2:	4413      	add	r3, r2
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 80011c4:	404a      	eors	r2, r1
 80011c6:	4413      	add	r3, r2
 80011c8:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <DHCP_init+0xa8>)
	setSIPR(zeroip);
 80011ca:	f44f 6070 	mov.w	r0, #3840	; 0xf00
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 80011ce:	6013      	str	r3, [r2, #0]
	setSIPR(zeroip);
 80011d0:	2204      	movs	r2, #4
 80011d2:	eb0d 0102 	add.w	r1, sp, r2
 80011d6:	f7ff fb87 	bl	80008e8 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 80011da:	2204      	movs	r2, #4
 80011dc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80011e0:	eb0d 0102 	add.w	r1, sp, r2
 80011e4:	f7ff fb80 	bl	80008e8 <WIZCHIP_WRITE_BUF>
	reset_DHCP_timeout();
 80011e8:	f7ff ffaa 	bl	8001140 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 80011ec:	2200      	movs	r2, #0
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <DHCP_init+0xac>)
 80011f0:	701a      	strb	r2, [r3, #0]
}
 80011f2:	b002      	add	sp, #8
 80011f4:	bd70      	pop	{r4, r5, r6, pc}
 80011f6:	bf00      	nop
 80011f8:	20000404 	.word	0x20000404
 80011fc:	20000412 	.word	0x20000412
 8001200:	20000434 	.word	0x20000434
 8001204:	12345678 	.word	0x12345678
 8001208:	20000414 	.word	0x20000414
 800120c:	2000042d 	.word	0x2000042d

08001210 <getIPfromDHCP>:
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
	ip[0] = DHCP_allocated_ip[0];
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <getIPfromDHCP+0x14>)
 8001212:	781a      	ldrb	r2, [r3, #0]
 8001214:	7002      	strb	r2, [r0, #0]
	ip[1] = DHCP_allocated_ip[1];
 8001216:	785a      	ldrb	r2, [r3, #1]
 8001218:	7042      	strb	r2, [r0, #1]
	ip[2] = DHCP_allocated_ip[2];	
 800121a:	789a      	ldrb	r2, [r3, #2]
 800121c:	7082      	strb	r2, [r0, #2]
	ip[3] = DHCP_allocated_ip[3];
 800121e:	78db      	ldrb	r3, [r3, #3]
 8001220:	70c3      	strb	r3, [r0, #3]
}
 8001222:	4770      	bx	lr
 8001224:	20000420 	.word	0x20000420

08001228 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
	ip[0] =DHCP_allocated_gw[0];
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <getGWfromDHCP+0x14>)
 800122a:	781a      	ldrb	r2, [r3, #0]
 800122c:	7002      	strb	r2, [r0, #0]
	ip[1] =DHCP_allocated_gw[1];
 800122e:	785a      	ldrb	r2, [r3, #1]
 8001230:	7042      	strb	r2, [r0, #1]
	ip[2] =DHCP_allocated_gw[2];
 8001232:	789a      	ldrb	r2, [r3, #2]
 8001234:	7082      	strb	r2, [r0, #2]
	ip[3] =DHCP_allocated_gw[3];			
 8001236:	78db      	ldrb	r3, [r3, #3]
 8001238:	70c3      	strb	r3, [r0, #3]
}
 800123a:	4770      	bx	lr
 800123c:	2000041c 	.word	0x2000041c

08001240 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
   ip[0] = DHCP_allocated_sn[0];
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <getSNfromDHCP+0x14>)
 8001242:	781a      	ldrb	r2, [r3, #0]
 8001244:	7002      	strb	r2, [r0, #0]
   ip[1] = DHCP_allocated_sn[1];
 8001246:	785a      	ldrb	r2, [r3, #1]
 8001248:	7042      	strb	r2, [r0, #1]
   ip[2] = DHCP_allocated_sn[2];
 800124a:	789a      	ldrb	r2, [r3, #2]
 800124c:	7082      	strb	r2, [r0, #2]
   ip[3] = DHCP_allocated_sn[3];         
 800124e:	78db      	ldrb	r3, [r3, #3]
 8001250:	70c3      	strb	r3, [r0, #3]
}
 8001252:	4770      	bx	lr
 8001254:	20000424 	.word	0x20000424

08001258 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
   ip[0] = DHCP_allocated_dns[0];
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <getDNSfromDHCP+0x14>)
 800125a:	781a      	ldrb	r2, [r3, #0]
 800125c:	7002      	strb	r2, [r0, #0]
   ip[1] = DHCP_allocated_dns[1];
 800125e:	785a      	ldrb	r2, [r3, #1]
 8001260:	7042      	strb	r2, [r0, #1]
   ip[2] = DHCP_allocated_dns[2];
 8001262:	789a      	ldrb	r2, [r3, #2]
 8001264:	7082      	strb	r2, [r0, #2]
   ip[3] = DHCP_allocated_dns[3];         
 8001266:	78db      	ldrb	r3, [r3, #3]
 8001268:	70c3      	strb	r3, [r0, #3]
}
 800126a:	4770      	bx	lr
 800126c:	20000418 	.word	0x20000418

08001270 <getDHCPLeasetime>:

uint32_t getDHCPLeasetime(void)
{
	return dhcp_lease_time;
}
 8001270:	4b01      	ldr	r3, [pc, #4]	; (8001278 <getDHCPLeasetime+0x8>)
 8001272:	6818      	ldr	r0, [r3, #0]
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000030 	.word	0x20000030

0800127c <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
  nibble &= 0x0F;
 800127c:	f000 000f 	and.w	r0, r0, #15
  if (nibble <= 9)
 8001280:	2809      	cmp	r0, #9
    return nibble + '0';
 8001282:	bf94      	ite	ls
 8001284:	3030      	addls	r0, #48	; 0x30
  else 
    return nibble + ('A'-0x0A);
 8001286:	3037      	addhi	r0, #55	; 0x37
}
 8001288:	4770      	bx	lr
	...

0800128c <send_DHCP_DISCOVER>:
{
 800128c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   makeDHCPMSG();
 8001290:	f7ff fd26 	bl	8000ce0 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8001294:	2300      	movs	r3, #0
 8001296:	4a6a      	ldr	r2, [pc, #424]	; (8001440 <send_DHCP_DISCOVER+0x1b4>)
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001298:	4d6a      	ldr	r5, [pc, #424]	; (8001444 <send_DHCP_DISCOVER+0x1b8>)
   DHCP_SIP[0]=0;
 800129a:	7013      	strb	r3, [r2, #0]
   DHCP_SIP[1]=0;
 800129c:	7053      	strb	r3, [r2, #1]
   DHCP_SIP[2]=0;
 800129e:	7093      	strb	r3, [r2, #2]
   DHCP_SIP[3]=0;
 80012a0:	70d3      	strb	r3, [r2, #3]
   DHCP_REAL_SIP[0]=0;
 80012a2:	4a69      	ldr	r2, [pc, #420]	; (8001448 <send_DHCP_DISCOVER+0x1bc>)
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80012a4:	4869      	ldr	r0, [pc, #420]	; (800144c <send_DHCP_DISCOVER+0x1c0>)
   DHCP_REAL_SIP[0]=0;
 80012a6:	7013      	strb	r3, [r2, #0]
   DHCP_REAL_SIP[1]=0;
 80012a8:	7053      	strb	r3, [r2, #1]
   DHCP_REAL_SIP[2]=0;
 80012aa:	7093      	strb	r3, [r2, #2]
   DHCP_REAL_SIP[3]=0;
 80012ac:	70d3      	strb	r3, [r2, #3]
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80012ae:	682b      	ldr	r3, [r5, #0]
 80012b0:	4a67      	ldr	r2, [pc, #412]	; (8001450 <send_DHCP_DISCOVER+0x1c4>)
 80012b2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	pDHCPMSG->OPT[k++] = 0x07;
 80012b6:	f240 1207 	movw	r2, #263	; 0x107
 80012ba:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80012be:	4a65      	ldr	r2, [pc, #404]	; (8001454 <send_DHCP_DISCOVER+0x1c8>)
 80012c0:	7811      	ldrb	r1, [r2, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80012c2:	f892 9003 	ldrb.w	r9, [r2, #3]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80012c6:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80012ca:	7851      	ldrb	r1, [r2, #1]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80012cc:	f892 8004 	ldrb.w	r8, [r2, #4]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80012d0:	7957      	ldrb	r7, [r2, #5]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80012d2:	f883 10f7 	strb.w	r1, [r3, #247]	; 0xf7
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80012d6:	7891      	ldrb	r1, [r2, #2]
	pDHCPMSG->OPT[k++] = hostName;
 80012d8:	220c      	movs	r2, #12
 80012da:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 80012de:	2212      	movs	r2, #18
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80012e0:	f883 10f8 	strb.w	r1, [r3, #248]	; 0xf8
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80012e4:	f883 90f9 	strb.w	r9, [r3, #249]	; 0xf9
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80012e8:	f883 80fa 	strb.w	r8, [r3, #250]	; 0xfa
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80012ec:	f883 70fb 	strb.w	r7, [r3, #251]	; 0xfb
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80012f0:	f1a2 0412 	sub.w	r4, r2, #18
 80012f4:	b2a4      	uxth	r4, r4
 80012f6:	5d01      	ldrb	r1, [r0, r4]
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80012f8:	1c56      	adds	r6, r2, #1
 80012fa:	b2b6      	uxth	r6, r6
 80012fc:	eb03 0a02 	add.w	sl, r3, r2
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001300:	2900      	cmp	r1, #0
 8001302:	f040 8098 	bne.w	8001436 <send_DHCP_DISCOVER+0x1aa>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8001306:	ea4f 1019 	mov.w	r0, r9, lsr #4
 800130a:	f7ff ffb7 	bl	800127c <NibbleToHex>
 800130e:	f88a 00ec 	strb.w	r0, [sl, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8001312:	4648      	mov	r0, r9
 8001314:	f7ff ffb2 	bl	800127c <NibbleToHex>
 8001318:	441e      	add	r6, r3
 800131a:	f886 00ec 	strb.w	r0, [r6, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 800131e:	ea4f 1018 	mov.w	r0, r8, lsr #4
 8001322:	f7ff ffab 	bl	800127c <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8001326:	1c96      	adds	r6, r2, #2
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8001328:	b2b6      	uxth	r6, r6
 800132a:	441e      	add	r6, r3
 800132c:	f886 00ec 	strb.w	r0, [r6, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8001330:	4640      	mov	r0, r8
 8001332:	f7ff ffa3 	bl	800127c <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8001336:	1cd6      	adds	r6, r2, #3
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8001338:	b2b6      	uxth	r6, r6
 800133a:	441e      	add	r6, r3
 800133c:	f886 00ec 	strb.w	r0, [r6, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8001340:	0938      	lsrs	r0, r7, #4
 8001342:	f7ff ff9b 	bl	800127c <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8001346:	1d16      	adds	r6, r2, #4
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8001348:	b2b6      	uxth	r6, r6
 800134a:	441e      	add	r6, r3
 800134c:	f886 00ec 	strb.w	r0, [r6, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8001350:	4638      	mov	r0, r7
 8001352:	f7ff ff93 	bl	800127c <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8001356:	1d56      	adds	r6, r2, #5
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8001358:	b2b6      	uxth	r6, r6
 800135a:	441e      	add	r6, r3
 800135c:	f886 00ec 	strb.w	r0, [r6, #236]	; 0xec
 8001360:	1d90      	adds	r0, r2, #6
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8001362:	b280      	uxth	r0, r0
 8001364:	1de6      	adds	r6, r4, #7
 8001366:	1b86      	subs	r6, r0, r6
 8001368:	441e      	add	r6, r3
 800136a:	3406      	adds	r4, #6
 800136c:	f886 40ec 	strb.w	r4, [r6, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001370:	2437      	movs	r4, #55	; 0x37
 8001372:	4418      	add	r0, r3
 8001374:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8001378:	2406      	movs	r4, #6
	pDHCPMSG->OPT[k++] = subnetMask;
 800137a:	2601      	movs	r6, #1
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800137c:	1dd0      	adds	r0, r2, #7
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 800137e:	b280      	uxth	r0, r0
 8001380:	4418      	add	r0, r3
 8001382:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
 8001386:	f102 0008 	add.w	r0, r2, #8
	pDHCPMSG->OPT[k++] = subnetMask;
 800138a:	b280      	uxth	r0, r0
 800138c:	4418      	add	r0, r3
 800138e:	f880 60ec 	strb.w	r6, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001392:	2603      	movs	r6, #3
	pDHCPMSG->OPT[k++] = subnetMask;
 8001394:	f102 0009 	add.w	r0, r2, #9
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001398:	b280      	uxth	r0, r0
 800139a:	4418      	add	r0, r3
 800139c:	f880 60ec 	strb.w	r6, [r0, #236]	; 0xec
 80013a0:	f102 000a 	add.w	r0, r2, #10
	pDHCPMSG->OPT[k++] = dns;
 80013a4:	b280      	uxth	r0, r0
 80013a6:	4418      	add	r0, r3
 80013a8:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 80013ac:	240f      	movs	r4, #15
	pDHCPMSG->OPT[k++] = dns;
 80013ae:	f102 000b 	add.w	r0, r2, #11
	pDHCPMSG->OPT[k++] = domainName;
 80013b2:	b280      	uxth	r0, r0
 80013b4:	4418      	add	r0, r3
 80013b6:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80013ba:	243a      	movs	r4, #58	; 0x3a
	pDHCPMSG->OPT[k++] = domainName;
 80013bc:	f102 000c 	add.w	r0, r2, #12
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80013c0:	b280      	uxth	r0, r0
 80013c2:	4418      	add	r0, r3
 80013c4:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 80013c8:	243b      	movs	r4, #59	; 0x3b
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80013ca:	f102 000d 	add.w	r0, r2, #13
	pDHCPMSG->OPT[k++] = dhcpT2value;
 80013ce:	b280      	uxth	r0, r0
 80013d0:	4418      	add	r0, r3
 80013d2:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80013d6:	24ff      	movs	r4, #255	; 0xff
 80013d8:	f102 000f 	add.w	r0, r2, #15
	pDHCPMSG->OPT[k++] = dhcpT2value;
 80013dc:	f102 060e 	add.w	r6, r2, #14
	pDHCPMSG->OPT[k++] = endOption;
 80013e0:	b280      	uxth	r0, r0
 80013e2:	b2b6      	uxth	r6, r6
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80013e4:	f5c2 7294 	rsb	r2, r2, #296	; 0x128
 80013e8:	f5b0 7f9c 	cmp.w	r0, #312	; 0x138
	pDHCPMSG->OPT[k++] = endOption;
 80013ec:	441e      	add	r6, r3
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80013ee:	f102 0201 	add.w	r2, r2, #1
 80013f2:	f100 00ec 	add.w	r0, r0, #236	; 0xec
 80013f6:	b292      	uxth	r2, r2
 80013f8:	4418      	add	r0, r3
 80013fa:	bf88      	it	hi
 80013fc:	2200      	movhi	r2, #0
	pDHCPMSG->OPT[k++] = endOption;
 80013fe:	f886 40ec 	strb.w	r4, [r6, #236]	; 0xec
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001402:	f001 fced 	bl	8002de0 <memset>
	printf("> Send DHCP_DISCOVER\r\n");
 8001406:	4814      	ldr	r0, [pc, #80]	; (8001458 <send_DHCP_DISCOVER+0x1cc>)
	ip[0] = 255;
 8001408:	f88d 400c 	strb.w	r4, [sp, #12]
	ip[1] = 255;
 800140c:	f88d 400d 	strb.w	r4, [sp, #13]
	ip[2] = 255;
 8001410:	f88d 400e 	strb.w	r4, [sp, #14]
	ip[3] = 255;
 8001414:	f88d 400f 	strb.w	r4, [sp, #15]
	printf("> Send DHCP_DISCOVER\r\n");
 8001418:	f001 fd70 	bl	8002efc <puts>
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800141c:	2343      	movs	r3, #67	; 0x43
 800141e:	480f      	ldr	r0, [pc, #60]	; (800145c <send_DHCP_DISCOVER+0x1d0>)
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	f44f 7209 	mov.w	r2, #548	; 0x224
 8001426:	6829      	ldr	r1, [r5, #0]
 8001428:	ab03      	add	r3, sp, #12
 800142a:	7800      	ldrb	r0, [r0, #0]
 800142c:	f000 fb44 	bl	8001ab8 <sendto>
}
 8001430:	b004      	add	sp, #16
 8001432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001436:	4632      	mov	r2, r6
 8001438:	f88a 10ec 	strb.w	r1, [sl, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800143c:	e758      	b.n	80012f0 <send_DHCP_DISCOVER+0x64>
 800143e:	bf00      	nop
 8001440:	2000040e 	.word	0x2000040e
 8001444:	20000434 	.word	0x20000434
 8001448:	2000040a 	.word	0x2000040a
 800144c:	2000001c 	.word	0x2000001c
 8001450:	3d010135 	.word	0x3d010135
 8001454:	20000404 	.word	0x20000404
 8001458:	0800436a 	.word	0x0800436a
 800145c:	20000412 	.word	0x20000412

08001460 <send_DHCP_REQUEST>:
{
 8001460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   makeDHCPMSG();
 8001464:	f7ff fc3c 	bl	8000ce0 <makeDHCPMSG>
   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8001468:	4b92      	ldr	r3, [pc, #584]	; (80016b4 <send_DHCP_REQUEST+0x254>)
 800146a:	4d93      	ldr	r5, [pc, #588]	; (80016b8 <send_DHCP_REQUEST+0x258>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	3b03      	subs	r3, #3
 8001470:	2b01      	cmp	r3, #1
 8001472:	f200 810f 	bhi.w	8001694 <send_DHCP_REQUEST+0x234>
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001476:	2200      	movs	r2, #0
 8001478:	682b      	ldr	r3, [r5, #0]
 800147a:	729a      	strb	r2, [r3, #10]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 800147c:	72da      	strb	r2, [r3, #11]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 800147e:	4a8f      	ldr	r2, [pc, #572]	; (80016bc <send_DHCP_REQUEST+0x25c>)
 8001480:	7811      	ldrb	r1, [r2, #0]
 8001482:	7319      	strb	r1, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8001484:	7851      	ldrb	r1, [r2, #1]
 8001486:	7359      	strb	r1, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8001488:	7891      	ldrb	r1, [r2, #2]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 800148a:	78d2      	ldrb	r2, [r2, #3]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 800148c:	7399      	strb	r1, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 800148e:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8001490:	4b8b      	ldr	r3, [pc, #556]	; (80016c0 <send_DHCP_REQUEST+0x260>)
 8001492:	781a      	ldrb	r2, [r3, #0]
 8001494:	f88d 200c 	strb.w	r2, [sp, #12]
   	ip[1] = DHCP_SIP[1];
 8001498:	785a      	ldrb	r2, [r3, #1]
 800149a:	f88d 200d 	strb.w	r2, [sp, #13]
   	ip[2] = DHCP_SIP[2];
 800149e:	789a      	ldrb	r2, [r3, #2]
   	ip[3] = DHCP_SIP[3];   	   	   	
 80014a0:	78db      	ldrb	r3, [r3, #3]
   	ip[2] = DHCP_SIP[2];
 80014a2:	f88d 200e 	strb.w	r2, [sp, #14]
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80014a6:	4a87      	ldr	r2, [pc, #540]	; (80016c4 <send_DHCP_REQUEST+0x264>)
   	ip[3] = 255;   	   	   	
 80014a8:	f88d 300f 	strb.w	r3, [sp, #15]
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80014ac:	682b      	ldr	r3, [r5, #0]
 80014ae:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	pDHCPMSG->OPT[k++] = 0x07;
 80014b2:	f240 1207 	movw	r2, #263	; 0x107
 80014b6:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80014ba:	4a83      	ldr	r2, [pc, #524]	; (80016c8 <send_DHCP_REQUEST+0x268>)
 80014bc:	7811      	ldrb	r1, [r2, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80014be:	f892 8003 	ldrb.w	r8, [r2, #3]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80014c2:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80014c6:	7851      	ldrb	r1, [r2, #1]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80014c8:	7917      	ldrb	r7, [r2, #4]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80014ca:	7956      	ldrb	r6, [r2, #5]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80014cc:	f883 10f7 	strb.w	r1, [r3, #247]	; 0xf7
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80014d0:	7891      	ldrb	r1, [r2, #2]
   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 80014d2:	f89d 200f 	ldrb.w	r2, [sp, #15]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80014d6:	f883 10f8 	strb.w	r1, [r3, #248]	; 0xf8
   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 80014da:	2aff      	cmp	r2, #255	; 0xff
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80014dc:	f883 80f9 	strb.w	r8, [r3, #249]	; 0xf9
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80014e0:	f883 70fa 	strb.w	r7, [r3, #250]	; 0xfa
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80014e4:	f883 60fb 	strb.w	r6, [r3, #251]	; 0xfb
   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 80014e8:	f040 80dc 	bne.w	80016a4 <send_DHCP_REQUEST+0x244>
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80014ec:	f240 4232 	movw	r2, #1074	; 0x432
 80014f0:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80014f4:	4a71      	ldr	r2, [pc, #452]	; (80016bc <send_DHCP_REQUEST+0x25c>)
 80014f6:	7811      	ldrb	r1, [r2, #0]
 80014f8:	f883 10fe 	strb.w	r1, [r3, #254]	; 0xfe
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80014fc:	7851      	ldrb	r1, [r2, #1]
 80014fe:	f883 10ff 	strb.w	r1, [r3, #255]	; 0xff
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001502:	7891      	ldrb	r1, [r2, #2]
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001504:	78d2      	ldrb	r2, [r2, #3]
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001506:	f883 1100 	strb.w	r1, [r3, #256]	; 0x100
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 800150a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 800150e:	f240 4236 	movw	r2, #1078	; 0x436
 8001512:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001516:	4a6a      	ldr	r2, [pc, #424]	; (80016c0 <send_DHCP_REQUEST+0x260>)
 8001518:	7811      	ldrb	r1, [r2, #0]
 800151a:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 800151e:	7851      	ldrb	r1, [r2, #1]
 8001520:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001524:	7891      	ldrb	r1, [r2, #2]
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001526:	78d2      	ldrb	r2, [r2, #3]
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001528:	f883 1106 	strb.w	r1, [r3, #262]	; 0x106
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 800152c:	211c      	movs	r1, #28
 800152e:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	pDHCPMSG->OPT[k++] = hostName;
 8001532:	200c      	movs	r0, #12
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8001534:	2400      	movs	r4, #0
	pDHCPMSG->OPT[k++] = hostName;
 8001536:	185a      	adds	r2, r3, r1
 8001538:	f882 00ec 	strb.w	r0, [r2, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 800153c:	1c8a      	adds	r2, r1, #2
 800153e:	3101      	adds	r1, #1
 8001540:	4419      	add	r1, r3
 8001542:	4862      	ldr	r0, [pc, #392]	; (80016cc <send_DHCP_REQUEST+0x26c>)
 8001544:	f881 40ec 	strb.w	r4, [r1, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001548:	f810 1b01 	ldrb.w	r1, [r0], #1
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 800154c:	f102 0901 	add.w	r9, r2, #1
 8001550:	fa1f f989 	uxth.w	r9, r9
 8001554:	eb03 0a02 	add.w	sl, r3, r2
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001558:	2900      	cmp	r1, #0
 800155a:	f040 80a5 	bne.w	80016a8 <send_DHCP_REQUEST+0x248>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 800155e:	ea4f 1018 	mov.w	r0, r8, lsr #4
 8001562:	f7ff fe8b 	bl	800127c <NibbleToHex>
 8001566:	f88a 00ec 	strb.w	r0, [sl, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800156a:	4640      	mov	r0, r8
 800156c:	f7ff fe86 	bl	800127c <NibbleToHex>
 8001570:	4499      	add	r9, r3
 8001572:	f889 00ec 	strb.w	r0, [r9, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8001576:	0938      	lsrs	r0, r7, #4
 8001578:	f7ff fe80 	bl	800127c <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800157c:	f102 0c02 	add.w	ip, r2, #2
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8001580:	fa1f fc8c 	uxth.w	ip, ip
 8001584:	449c      	add	ip, r3
 8001586:	f88c 00ec 	strb.w	r0, [ip, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800158a:	4638      	mov	r0, r7
 800158c:	f7ff fe76 	bl	800127c <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8001590:	1cd7      	adds	r7, r2, #3
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8001592:	b2bf      	uxth	r7, r7
 8001594:	441f      	add	r7, r3
 8001596:	f887 00ec 	strb.w	r0, [r7, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 800159a:	0930      	lsrs	r0, r6, #4
 800159c:	f7ff fe6e 	bl	800127c <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80015a0:	1d17      	adds	r7, r2, #4
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80015a2:	b2bf      	uxth	r7, r7
 80015a4:	441f      	add	r7, r3
 80015a6:	f887 00ec 	strb.w	r0, [r7, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80015aa:	4630      	mov	r0, r6
 80015ac:	f7ff fe66 	bl	800127c <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80015b0:	1d56      	adds	r6, r2, #5
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80015b2:	b2b6      	uxth	r6, r6
 80015b4:	441e      	add	r6, r3
 80015b6:	f886 00ec 	strb.w	r0, [r6, #236]	; 0xec
 80015ba:	1d90      	adds	r0, r2, #6
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80015bc:	b280      	uxth	r0, r0
 80015be:	1de6      	adds	r6, r4, #7
 80015c0:	1b86      	subs	r6, r0, r6
 80015c2:	441e      	add	r6, r3
 80015c4:	3406      	adds	r4, #6
 80015c6:	f886 40ec 	strb.w	r4, [r6, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80015ca:	2437      	movs	r4, #55	; 0x37
 80015cc:	4418      	add	r0, r3
 80015ce:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 80015d2:	2408      	movs	r4, #8
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80015d4:	1dd0      	adds	r0, r2, #7
	pDHCPMSG->OPT[k++] = 0x08;
 80015d6:	b280      	uxth	r0, r0
 80015d8:	4418      	add	r0, r3
 80015da:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
 80015de:	1910      	adds	r0, r2, r4
	pDHCPMSG->OPT[k++] = subnetMask;
 80015e0:	2401      	movs	r4, #1
 80015e2:	b280      	uxth	r0, r0
 80015e4:	4418      	add	r0, r3
 80015e6:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80015ea:	2403      	movs	r4, #3
	pDHCPMSG->OPT[k++] = subnetMask;
 80015ec:	f102 0009 	add.w	r0, r2, #9
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80015f0:	b280      	uxth	r0, r0
 80015f2:	4418      	add	r0, r3
 80015f4:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 80015f8:	2406      	movs	r4, #6
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80015fa:	f102 000a 	add.w	r0, r2, #10
	pDHCPMSG->OPT[k++] = dns;
 80015fe:	b280      	uxth	r0, r0
 8001600:	4418      	add	r0, r3
 8001602:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001606:	240f      	movs	r4, #15
	pDHCPMSG->OPT[k++] = dns;
 8001608:	f102 000b 	add.w	r0, r2, #11
	pDHCPMSG->OPT[k++] = domainName;
 800160c:	b280      	uxth	r0, r0
 800160e:	4418      	add	r0, r3
 8001610:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001614:	243a      	movs	r4, #58	; 0x3a
	pDHCPMSG->OPT[k++] = domainName;
 8001616:	f102 000c 	add.w	r0, r2, #12
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800161a:	b280      	uxth	r0, r0
 800161c:	4418      	add	r0, r3
 800161e:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001622:	243b      	movs	r4, #59	; 0x3b
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001624:	f102 000d 	add.w	r0, r2, #13
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001628:	b280      	uxth	r0, r0
 800162a:	4418      	add	r0, r3
 800162c:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8001630:	241f      	movs	r4, #31
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001632:	f102 000e 	add.w	r0, r2, #14
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8001636:	b280      	uxth	r0, r0
 8001638:	4418      	add	r0, r3
 800163a:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 800163e:	2421      	movs	r4, #33	; 0x21
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8001640:	f102 000f 	add.w	r0, r2, #15
	pDHCPMSG->OPT[k++] = staticRoute;
 8001644:	b280      	uxth	r0, r0
 8001646:	4418      	add	r0, r3
 8001648:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800164c:	24ff      	movs	r4, #255	; 0xff
 800164e:	f102 0011 	add.w	r0, r2, #17
	pDHCPMSG->OPT[k++] = staticRoute;
 8001652:	3210      	adds	r2, #16
	pDHCPMSG->OPT[k++] = endOption;
 8001654:	b292      	uxth	r2, r2
 8001656:	441a      	add	r2, r3
 8001658:	b280      	uxth	r0, r0
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800165a:	f5b0 7f9c 	cmp.w	r0, #312	; 0x138
	pDHCPMSG->OPT[k++] = endOption;
 800165e:	f882 40ec 	strb.w	r4, [r2, #236]	; 0xec
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001662:	f5c0 729c 	rsb	r2, r0, #312	; 0x138
 8001666:	f100 00ec 	add.w	r0, r0, #236	; 0xec
 800166a:	bf88      	it	hi
 800166c:	2200      	movhi	r2, #0
 800166e:	4418      	add	r0, r3
 8001670:	f001 fbb6 	bl	8002de0 <memset>
	printf("> Send DHCP_REQUEST\r\n");
 8001674:	4816      	ldr	r0, [pc, #88]	; (80016d0 <send_DHCP_REQUEST+0x270>)
 8001676:	f001 fc41 	bl	8002efc <puts>
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800167a:	2343      	movs	r3, #67	; 0x43
 800167c:	4815      	ldr	r0, [pc, #84]	; (80016d4 <send_DHCP_REQUEST+0x274>)
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	f44f 7209 	mov.w	r2, #548	; 0x224
 8001684:	6829      	ldr	r1, [r5, #0]
 8001686:	ab03      	add	r3, sp, #12
 8001688:	7800      	ldrb	r0, [r0, #0]
 800168a:	f000 fa15 	bl	8001ab8 <sendto>
}
 800168e:	b004      	add	sp, #16
 8001690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   	ip[0] = 255;
 8001694:	23ff      	movs	r3, #255	; 0xff
 8001696:	f88d 300c 	strb.w	r3, [sp, #12]
   	ip[1] = 255;
 800169a:	f88d 300d 	strb.w	r3, [sp, #13]
   	ip[2] = 255;
 800169e:	f88d 300e 	strb.w	r3, [sp, #14]
 80016a2:	e700      	b.n	80014a6 <send_DHCP_REQUEST+0x46>
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80016a4:	2110      	movs	r1, #16
 80016a6:	e744      	b.n	8001532 <send_DHCP_REQUEST+0xd2>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80016a8:	464a      	mov	r2, r9
 80016aa:	f88a 10ec 	strb.w	r1, [sl, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80016ae:	3401      	adds	r4, #1
 80016b0:	e74a      	b.n	8001548 <send_DHCP_REQUEST+0xe8>
 80016b2:	bf00      	nop
 80016b4:	2000042d 	.word	0x2000042d
 80016b8:	20000434 	.word	0x20000434
 80016bc:	20000420 	.word	0x20000420
 80016c0:	2000040e 	.word	0x2000040e
 80016c4:	3d030135 	.word	0x3d030135
 80016c8:	20000404 	.word	0x20000404
 80016cc:	2000001c 	.word	0x2000001c
 80016d0:	08004380 	.word	0x08004380
 80016d4:	20000412 	.word	0x20000412

080016d8 <check_DHCP_timeout>:
{
 80016d8:	b570      	push	{r4, r5, r6, lr}
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 80016da:	4c1b      	ldr	r4, [pc, #108]	; (8001748 <check_DHCP_timeout+0x70>)
 80016dc:	f994 3000 	ldrsb.w	r3, [r4]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	dc1d      	bgt.n	8001720 <check_DHCP_timeout+0x48>
		if (dhcp_tick_next < dhcp_tick_1s) {
 80016e4:	4d19      	ldr	r5, [pc, #100]	; (800174c <check_DHCP_timeout+0x74>)
 80016e6:	4e1a      	ldr	r6, [pc, #104]	; (8001750 <check_DHCP_timeout+0x78>)
 80016e8:	682b      	ldr	r3, [r5, #0]
 80016ea:	6832      	ldr	r2, [r6, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d212      	bcs.n	8001716 <check_DHCP_timeout+0x3e>
			switch ( dhcp_state ) {
 80016f0:	4b18      	ldr	r3, [pc, #96]	; (8001754 <check_DHCP_timeout+0x7c>)
 80016f2:	f993 3000 	ldrsb.w	r3, [r3]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d00f      	beq.n	800171a <check_DHCP_timeout+0x42>
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	d00d      	beq.n	800171a <check_DHCP_timeout+0x42>
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d101      	bne.n	8001706 <check_DHCP_timeout+0x2e>
					send_DHCP_DISCOVER();
 8001702:	f7ff fdc3 	bl	800128c <send_DHCP_DISCOVER>
			dhcp_tick_1s = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	602b      	str	r3, [r5, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 800170a:	682b      	ldr	r3, [r5, #0]
 800170c:	330a      	adds	r3, #10
 800170e:	6033      	str	r3, [r6, #0]
			dhcp_retry_count++;
 8001710:	7823      	ldrb	r3, [r4, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	7023      	strb	r3, [r4, #0]
	uint8_t ret = DHCP_RUNNING;
 8001716:	2001      	movs	r0, #1
 8001718:	e00f      	b.n	800173a <check_DHCP_timeout+0x62>
					send_DHCP_REQUEST();
 800171a:	f7ff fea1 	bl	8001460 <send_DHCP_REQUEST>
				break;
 800171e:	e7f2      	b.n	8001706 <check_DHCP_timeout+0x2e>
		switch(dhcp_state) {
 8001720:	4c0c      	ldr	r4, [pc, #48]	; (8001754 <check_DHCP_timeout+0x7c>)
 8001722:	f994 3000 	ldrsb.w	r3, [r4]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d008      	beq.n	800173c <check_DHCP_timeout+0x64>
 800172a:	2b04      	cmp	r3, #4
 800172c:	d006      	beq.n	800173c <check_DHCP_timeout+0x64>
 800172e:	2b01      	cmp	r3, #1
 8001730:	d108      	bne.n	8001744 <check_DHCP_timeout+0x6c>
				dhcp_state = STATE_DHCP_INIT;
 8001732:	2000      	movs	r0, #0
				dhcp_state = STATE_DHCP_DISCOVER;
 8001734:	7020      	strb	r0, [r4, #0]
		reset_DHCP_timeout();
 8001736:	f7ff fd03 	bl	8001140 <reset_DHCP_timeout>
}
 800173a:	bd70      	pop	{r4, r5, r6, pc}
				send_DHCP_DISCOVER();
 800173c:	f7ff fda6 	bl	800128c <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8001740:	2001      	movs	r0, #1
 8001742:	e7f7      	b.n	8001734 <check_DHCP_timeout+0x5c>
		switch(dhcp_state) {
 8001744:	2001      	movs	r0, #1
 8001746:	e7f6      	b.n	8001736 <check_DHCP_timeout+0x5e>
 8001748:	2000042c 	.word	0x2000042c
 800174c:	20000430 	.word	0x20000430
 8001750:	20000034 	.word	0x20000034
 8001754:	2000042d 	.word	0x2000042d

08001758 <DHCP_run>:
{
 8001758:	b538      	push	{r3, r4, r5, lr}
	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 800175a:	4c5c      	ldr	r4, [pc, #368]	; (80018cc <DHCP_run+0x174>)
 800175c:	f994 3000 	ldrsb.w	r3, [r4]
 8001760:	2b06      	cmp	r3, #6
 8001762:	f000 80b1 	beq.w	80018c8 <DHCP_run+0x170>
	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8001766:	4d5a      	ldr	r5, [pc, #360]	; (80018d0 <DHCP_run+0x178>)
 8001768:	7828      	ldrb	r0, [r5, #0]
 800176a:	0140      	lsls	r0, r0, #5
 800176c:	f500 7042 	add.w	r0, r0, #776	; 0x308
 8001770:	f7ff f820 	bl	80007b4 <WIZCHIP_READ>
 8001774:	2822      	cmp	r0, #34	; 0x22
 8001776:	d005      	beq.n	8001784 <DHCP_run+0x2c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8001778:	2300      	movs	r3, #0
 800177a:	2244      	movs	r2, #68	; 0x44
 800177c:	2102      	movs	r1, #2
 800177e:	7828      	ldrb	r0, [r5, #0]
 8001780:	f000 f908 	bl	8001994 <socket>
	type = parseDHCPMSG();
 8001784:	f7ff fb6c 	bl	8000e60 <parseDHCPMSG>
	switch ( dhcp_state ) {
 8001788:	f994 3000 	ldrsb.w	r3, [r4]
	type = parseDHCPMSG();
 800178c:	b2c5      	uxtb	r5, r0
	switch ( dhcp_state ) {
 800178e:	2b04      	cmp	r3, #4
 8001790:	d837      	bhi.n	8001802 <DHCP_run+0xaa>
 8001792:	e8df f003 	tbb	[pc, r3]
 8001796:	0e03      	.short	0x0e03
 8001798:	4626      	.short	0x4626
 800179a:	66          	.byte	0x66
 800179b:	00          	.byte	0x00
         DHCP_allocated_ip[0] = 0;
 800179c:	2200      	movs	r2, #0
 800179e:	4b4d      	ldr	r3, [pc, #308]	; (80018d4 <DHCP_run+0x17c>)
 80017a0:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 80017a2:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 80017a4:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 80017a6:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 80017a8:	f7ff fd70 	bl	800128c <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 80017ac:	2001      	movs	r0, #1
				dhcp_state = STATE_DHCP_REREQUEST;
 80017ae:	7020      	strb	r0, [r4, #0]
}
 80017b0:	bd38      	pop	{r3, r4, r5, pc}
			if (type == DHCP_OFFER){
 80017b2:	2d02      	cmp	r5, #2
 80017b4:	d111      	bne.n	80017da <DHCP_run+0x82>
				printf("> Receive DHCP_OFFER\r\n");
 80017b6:	4848      	ldr	r0, [pc, #288]	; (80018d8 <DHCP_run+0x180>)
 80017b8:	f001 fba0 	bl	8002efc <puts>
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 80017bc:	4b47      	ldr	r3, [pc, #284]	; (80018dc <DHCP_run+0x184>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b44      	ldr	r3, [pc, #272]	; (80018d4 <DHCP_run+0x17c>)
 80017c2:	7c11      	ldrb	r1, [r2, #16]
 80017c4:	7019      	strb	r1, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 80017c6:	7c51      	ldrb	r1, [r2, #17]
 80017c8:	7059      	strb	r1, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 80017ca:	7c91      	ldrb	r1, [r2, #18]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 80017cc:	7cd2      	ldrb	r2, [r2, #19]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 80017ce:	7099      	strb	r1, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 80017d0:	70da      	strb	r2, [r3, #3]
				send_DHCP_REQUEST();
 80017d2:	f7ff fe45 	bl	8001460 <send_DHCP_REQUEST>
				    dhcp_state = STATE_DHCP_INIT;
 80017d6:	7025      	strb	r5, [r4, #0]
 80017d8:	e013      	b.n	8001802 <DHCP_run+0xaa>
}
 80017da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			} else ret = check_DHCP_timeout();
 80017de:	f7ff bf7b 	b.w	80016d8 <check_DHCP_timeout>
			if (type == DHCP_ACK) {
 80017e2:	2d05      	cmp	r5, #5
 80017e4:	d115      	bne.n	8001812 <DHCP_run+0xba>
				printf("> Receive DHCP_ACK\r\n");
 80017e6:	483e      	ldr	r0, [pc, #248]	; (80018e0 <DHCP_run+0x188>)
 80017e8:	f001 fb88 	bl	8002efc <puts>
				if (check_DHCP_leasedIP()) {
 80017ec:	f7ff fc70 	bl	80010d0 <check_DHCP_leasedIP>
 80017f0:	4605      	mov	r5, r0
 80017f2:	b140      	cbz	r0, 8001806 <DHCP_run+0xae>
					dhcp_ip_assign();
 80017f4:	4b3b      	ldr	r3, [pc, #236]	; (80018e4 <DHCP_run+0x18c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4798      	blx	r3
					reset_DHCP_timeout();
 80017fa:	f7ff fca1 	bl	8001140 <reset_DHCP_timeout>
					dhcp_state = STATE_DHCP_LEASED;
 80017fe:	2303      	movs	r3, #3
 8001800:	7023      	strb	r3, [r4, #0]
	switch ( dhcp_state ) {
 8001802:	2001      	movs	r0, #1
 8001804:	e7d4      	b.n	80017b0 <DHCP_run+0x58>
					reset_DHCP_timeout();
 8001806:	f7ff fc9b 	bl	8001140 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 800180a:	4b37      	ldr	r3, [pc, #220]	; (80018e8 <DHCP_run+0x190>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4798      	blx	r3
 8001810:	e7e1      	b.n	80017d6 <DHCP_run+0x7e>
			} else if (type == DHCP_NAK) {
 8001812:	2d06      	cmp	r5, #6
 8001814:	d1e1      	bne.n	80017da <DHCP_run+0x82>
				printf("> Receive DHCP_NACK\r\n");
 8001816:	4835      	ldr	r0, [pc, #212]	; (80018ec <DHCP_run+0x194>)
 8001818:	f001 fb70 	bl	8002efc <puts>
				reset_DHCP_timeout();
 800181c:	f7ff fc90 	bl	8001140 <reset_DHCP_timeout>
 8001820:	e7c4      	b.n	80017ac <DHCP_run+0x54>
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8001822:	4b33      	ldr	r3, [pc, #204]	; (80018f0 <DHCP_run+0x198>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	d04c      	beq.n	80018c4 <DHCP_run+0x16c>
 800182a:	4a32      	ldr	r2, [pc, #200]	; (80018f4 <DHCP_run+0x19c>)
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
 8001832:	d947      	bls.n	80018c4 <DHCP_run+0x16c>
 				printf("> Maintains the IP address \r\n");
 8001834:	4830      	ldr	r0, [pc, #192]	; (80018f8 <DHCP_run+0x1a0>)
 8001836:	f001 fb61 	bl	8002efc <puts>
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 800183a:	4a26      	ldr	r2, [pc, #152]	; (80018d4 <DHCP_run+0x17c>)
 800183c:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <DHCP_run+0x1a4>)
 800183e:	7811      	ldrb	r1, [r2, #0]
 8001840:	7019      	strb	r1, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8001842:	7851      	ldrb	r1, [r2, #1]
 8001844:	7059      	strb	r1, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8001846:	7891      	ldrb	r1, [r2, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8001848:	78d2      	ldrb	r2, [r2, #3]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 800184a:	7099      	strb	r1, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 800184c:	70da      	strb	r2, [r3, #3]
				DHCP_XID++;
 800184e:	4a2c      	ldr	r2, [pc, #176]	; (8001900 <DHCP_run+0x1a8>)
 8001850:	6813      	ldr	r3, [r2, #0]
 8001852:	3301      	adds	r3, #1
 8001854:	6013      	str	r3, [r2, #0]
				send_DHCP_REQUEST();
 8001856:	f7ff fe03 	bl	8001460 <send_DHCP_REQUEST>
				reset_DHCP_timeout();
 800185a:	f7ff fc71 	bl	8001140 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_REREQUEST;
 800185e:	2004      	movs	r0, #4
 8001860:	e7a5      	b.n	80017ae <DHCP_run+0x56>
			if (type == DHCP_ACK) {
 8001862:	2d05      	cmp	r5, #5
 8001864:	d125      	bne.n	80018b2 <DHCP_run+0x15a>
				dhcp_retry_count = 0;
 8001866:	2200      	movs	r2, #0
 8001868:	4b26      	ldr	r3, [pc, #152]	; (8001904 <DHCP_run+0x1ac>)
 800186a:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 800186c:	4a23      	ldr	r2, [pc, #140]	; (80018fc <DHCP_run+0x1a4>)
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <DHCP_run+0x17c>)
 8001870:	7810      	ldrb	r0, [r2, #0]
 8001872:	7819      	ldrb	r1, [r3, #0]
 8001874:	4288      	cmp	r0, r1
 8001876:	d10b      	bne.n	8001890 <DHCP_run+0x138>
 8001878:	7850      	ldrb	r0, [r2, #1]
 800187a:	7859      	ldrb	r1, [r3, #1]
 800187c:	4288      	cmp	r0, r1
 800187e:	d107      	bne.n	8001890 <DHCP_run+0x138>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8001880:	7890      	ldrb	r0, [r2, #2]
 8001882:	7899      	ldrb	r1, [r3, #2]
 8001884:	4288      	cmp	r0, r1
 8001886:	d103      	bne.n	8001890 <DHCP_run+0x138>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8001888:	78d2      	ldrb	r2, [r2, #3]
 800188a:	78db      	ldrb	r3, [r3, #3]
 800188c:	429a      	cmp	r2, r3
 800188e:	d00b      	beq.n	80018a8 <DHCP_run+0x150>
					dhcp_ip_update();
 8001890:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <DHCP_run+0x1b0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4798      	blx	r3
                  printf(">IP changed.\r\n");
 8001896:	481d      	ldr	r0, [pc, #116]	; (800190c <DHCP_run+0x1b4>)
 8001898:	f001 fb30 	bl	8002efc <puts>
					ret = DHCP_IP_CHANGED;
 800189c:	2003      	movs	r0, #3
				reset_DHCP_timeout();
 800189e:	f7ff fc4f 	bl	8001140 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 80018a2:	2303      	movs	r3, #3
 80018a4:	7023      	strb	r3, [r4, #0]
 80018a6:	e783      	b.n	80017b0 <DHCP_run+0x58>
            else printf(">IP is continued.\r\n");
 80018a8:	4819      	ldr	r0, [pc, #100]	; (8001910 <DHCP_run+0x1b8>)
 80018aa:	f001 fb27 	bl	8002efc <puts>
		   ret = DHCP_IP_LEASED;
 80018ae:	2004      	movs	r0, #4
 80018b0:	e7f5      	b.n	800189e <DHCP_run+0x146>
			} else if (type == DHCP_NAK) {
 80018b2:	2d06      	cmp	r5, #6
 80018b4:	d191      	bne.n	80017da <DHCP_run+0x82>
				printf("> Receive DHCP_NACK, Failed to maintain ip\r\n");
 80018b6:	4817      	ldr	r0, [pc, #92]	; (8001914 <DHCP_run+0x1bc>)
 80018b8:	f001 fb20 	bl	8002efc <puts>
				reset_DHCP_timeout();
 80018bc:	f7ff fc40 	bl	8001140 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80018c0:	2301      	movs	r3, #1
 80018c2:	7023      	strb	r3, [r4, #0]
		   ret = DHCP_IP_LEASED;
 80018c4:	2004      	movs	r0, #4
 80018c6:	e773      	b.n	80017b0 <DHCP_run+0x58>
	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 80018c8:	2005      	movs	r0, #5
 80018ca:	e771      	b.n	80017b0 <DHCP_run+0x58>
 80018cc:	2000042d 	.word	0x2000042d
 80018d0:	20000412 	.word	0x20000412
 80018d4:	20000420 	.word	0x20000420
 80018d8:	08004395 	.word	0x08004395
 80018dc:	20000434 	.word	0x20000434
 80018e0:	080043ab 	.word	0x080043ab
 80018e4:	20000024 	.word	0x20000024
 80018e8:	20000028 	.word	0x20000028
 80018ec:	080043bf 	.word	0x080043bf
 80018f0:	20000030 	.word	0x20000030
 80018f4:	20000430 	.word	0x20000430
 80018f8:	080043d4 	.word	0x080043d4
 80018fc:	20000428 	.word	0x20000428
 8001900:	20000414 	.word	0x20000414
 8001904:	2000042c 	.word	0x2000042c
 8001908:	2000002c 	.word	0x2000002c
 800190c:	080043f1 	.word	0x080043f1
 8001910:	080043ff 	.word	0x080043ff
 8001914:	08004412 	.word	0x08004412

08001918 <close>:
   return (int8_t)sn;
}	   

int8_t close(uint8_t sn)
{
	CHECK_SOCKNUM();
 8001918:	2808      	cmp	r0, #8
{
 800191a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800191c:	4604      	mov	r4, r0
	CHECK_SOCKNUM();
 800191e:	d82d      	bhi.n	800197c <close+0x64>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8001920:	0147      	lsls	r7, r0, #5
 8001922:	f107 0608 	add.w	r6, r7, #8
 8001926:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800192a:	2110      	movs	r1, #16
 800192c:	4638      	mov	r0, r7
 800192e:	f7fe ff6f 	bl	8000810 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8001932:	4638      	mov	r0, r7
 8001934:	f7fe ff3e 	bl	80007b4 <WIZCHIP_READ>
 8001938:	4605      	mov	r5, r0
 800193a:	2800      	cmp	r0, #0
 800193c:	d1f9      	bne.n	8001932 <close+0x1a>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800193e:	211f      	movs	r1, #31
 8001940:	f506 7000 	add.w	r0, r6, #512	; 0x200
 8001944:	f7fe ff64 	bl	8000810 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8001948:	2301      	movs	r3, #1
 800194a:	40a3      	lsls	r3, r4
 800194c:	43db      	mvns	r3, r3
 800194e:	490d      	ldr	r1, [pc, #52]	; (8001984 <close+0x6c>)
 8001950:	b21b      	sxth	r3, r3
 8001952:	880a      	ldrh	r2, [r1, #0]
	//
	sock_is_sending &= ~(1<<sn);
	sock_remained_size[sn] = 0;
	sock_pack_info[sn] = 0;
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001954:	f506 7640 	add.w	r6, r6, #768	; 0x300
	sock_io_mode &= ~(1<<sn);
 8001958:	401a      	ands	r2, r3
 800195a:	800a      	strh	r2, [r1, #0]
	sock_is_sending &= ~(1<<sn);
 800195c:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <close+0x70>)
 800195e:	8811      	ldrh	r1, [r2, #0]
 8001960:	400b      	ands	r3, r1
 8001962:	8013      	strh	r3, [r2, #0]
	sock_remained_size[sn] = 0;
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <close+0x74>)
 8001966:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
	sock_pack_info[sn] = 0;
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <close+0x78>)
 800196c:	551d      	strb	r5, [r3, r4]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800196e:	4630      	mov	r0, r6
 8001970:	f7fe ff20 	bl	80007b4 <WIZCHIP_READ>
 8001974:	2800      	cmp	r0, #0
 8001976:	d1fa      	bne.n	800196e <close+0x56>
 8001978:	2001      	movs	r0, #1
	return SOCK_OK;
}
 800197a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECK_SOCKNUM();
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	e7fb      	b.n	800197a <close+0x62>
 8001982:	bf00      	nop
 8001984:	20000438 	.word	0x20000438
 8001988:	2000043a 	.word	0x2000043a
 800198c:	20000444 	.word	0x20000444
 8001990:	2000043c 	.word	0x2000043c

08001994 <socket>:
	CHECK_SOCKNUM();
 8001994:	2808      	cmp	r0, #8
{
 8001996:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800199a:	4604      	mov	r4, r0
 800199c:	4688      	mov	r8, r1
 800199e:	4617      	mov	r7, r2
 80019a0:	461d      	mov	r5, r3
	CHECK_SOCKNUM();
 80019a2:	d87c      	bhi.n	8001a9e <socket+0x10a>
	switch(protocol)
 80019a4:	2901      	cmp	r1, #1
 80019a6:	d005      	beq.n	80019b4 <socket+0x20>
 80019a8:	1e8b      	subs	r3, r1, #2
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d910      	bls.n	80019d0 <socket+0x3c>
 80019ae:	f06f 0004 	mvn.w	r0, #4
 80019b2:	e00a      	b.n	80019ca <socket+0x36>
            getSIPR((uint8_t*)&taddr);
 80019b4:	2204      	movs	r2, #4
 80019b6:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80019ba:	eb0d 0102 	add.w	r1, sp, r2
 80019be:	f7fe ff59 	bl	8000874 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80019c2:	9b01      	ldr	r3, [sp, #4]
 80019c4:	b923      	cbnz	r3, 80019d0 <socket+0x3c>
 80019c6:	f06f 0002 	mvn.w	r0, #2
}	   
 80019ca:	b002      	add	sp, #8
 80019cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80019d0:	0768      	lsls	r0, r5, #29
 80019d2:	d457      	bmi.n	8001a84 <socket+0xf0>
	if(flag != 0)
 80019d4:	b12d      	cbz	r5, 80019e2 <socket+0x4e>
   	switch(protocol)
 80019d6:	f1b8 0f01 	cmp.w	r8, #1
 80019da:	d050      	beq.n	8001a7e <socket+0xea>
 80019dc:	f1b8 0f02 	cmp.w	r8, #2
 80019e0:	d053      	beq.n	8001a8a <socket+0xf6>
	close(sn);
 80019e2:	4620      	mov	r0, r4
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80019e4:	0166      	lsls	r6, r4, #5
	close(sn);
 80019e6:	f7ff ff97 	bl	8001918 <close>
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80019ea:	3608      	adds	r6, #8
 80019ec:	f025 010f 	bic.w	r1, r5, #15
 80019f0:	4630      	mov	r0, r6
 80019f2:	ea41 0108 	orr.w	r1, r1, r8
 80019f6:	f7fe ff0b 	bl	8000810 <WIZCHIP_WRITE>
	if(!port)
 80019fa:	b96f      	cbnz	r7, 8001a18 <socket+0x84>
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80019fc:	f64f 71f0 	movw	r1, #65520	; 0xfff0
	   port = sock_any_port++;
 8001a00:	4a28      	ldr	r2, [pc, #160]	; (8001aa4 <socket+0x110>)
 8001a02:	8817      	ldrh	r7, [r2, #0]
 8001a04:	1c7b      	adds	r3, r7, #1
 8001a06:	b29b      	uxth	r3, r3
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001a08:	428b      	cmp	r3, r1
 8001a0a:	bf05      	ittet	eq
 8001a0c:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
	   port = sock_any_port++;
 8001a10:	f64f 77ef 	movweq	r7, #65519	; 0xffef
 8001a14:	8013      	strhne	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001a16:	8013      	strheq	r3, [r2, #0]
   setSn_PORT(sn,port);	
 8001a18:	0a39      	lsrs	r1, r7, #8
 8001a1a:	f506 6080 	add.w	r0, r6, #1024	; 0x400
 8001a1e:	f7fe fef7 	bl	8000810 <WIZCHIP_WRITE>
 8001a22:	b2f9      	uxtb	r1, r7
 8001a24:	f506 60a0 	add.w	r0, r6, #1280	; 0x500
   setSn_CR(sn,Sn_CR_OPEN);
 8001a28:	f506 7780 	add.w	r7, r6, #256	; 0x100
   setSn_PORT(sn,port);	
 8001a2c:	f7fe fef0 	bl	8000810 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001a30:	2101      	movs	r1, #1
 8001a32:	4638      	mov	r0, r7
 8001a34:	f7fe feec 	bl	8000810 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001a38:	4638      	mov	r0, r7
 8001a3a:	f7fe febb 	bl	80007b4 <WIZCHIP_READ>
 8001a3e:	2800      	cmp	r0, #0
 8001a40:	d1fa      	bne.n	8001a38 <socket+0xa4>
   sock_io_mode &= ~(1 <<sn);
 8001a42:	2301      	movs	r3, #1
 8001a44:	40a3      	lsls	r3, r4
 8001a46:	43db      	mvns	r3, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001a48:	4917      	ldr	r1, [pc, #92]	; (8001aa8 <socket+0x114>)
   sock_io_mode &= ~(1 <<sn);
 8001a4a:	b21b      	sxth	r3, r3
 8001a4c:	880a      	ldrh	r2, [r1, #0]
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001a4e:	f005 0501 	and.w	r5, r5, #1
   sock_io_mode &= ~(1 <<sn);
 8001a52:	401a      	ands	r2, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001a54:	40a5      	lsls	r5, r4
 8001a56:	4315      	orrs	r5, r2
   sock_is_sending &= ~(1<<sn);
 8001a58:	4a14      	ldr	r2, [pc, #80]	; (8001aac <socket+0x118>)
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001a5a:	800d      	strh	r5, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 8001a5c:	8811      	ldrh	r1, [r2, #0]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001a5e:	f506 7640 	add.w	r6, r6, #768	; 0x300
   sock_is_sending &= ~(1<<sn);
 8001a62:	400b      	ands	r3, r1
 8001a64:	8013      	strh	r3, [r2, #0]
   sock_remained_size[sn] = 0;
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <socket+0x11c>)
 8001a68:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
   sock_pack_info[sn] = PACK_COMPLETED;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <socket+0x120>)
 8001a6e:	5518      	strb	r0, [r3, r4]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001a70:	4630      	mov	r0, r6
 8001a72:	f7fe fe9f 	bl	80007b4 <WIZCHIP_READ>
 8001a76:	2800      	cmp	r0, #0
 8001a78:	d0fa      	beq.n	8001a70 <socket+0xdc>
   return (int8_t)sn;
 8001a7a:	b260      	sxtb	r0, r4
 8001a7c:	e7a5      	b.n	80019ca <socket+0x36>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001a7e:	f015 0f21 	tst.w	r5, #33	; 0x21
 8001a82:	d1ae      	bne.n	80019e2 <socket+0x4e>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001a84:	f06f 0005 	mvn.w	r0, #5
 8001a88:	e79f      	b.n	80019ca <socket+0x36>
   	      if(flag & SF_IGMP_VER2)
 8001a8a:	06a9      	lsls	r1, r5, #26
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001a8c:	b26b      	sxtb	r3, r5
   	      if(flag & SF_IGMP_VER2)
 8001a8e:	d501      	bpl.n	8001a94 <socket+0x100>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	daf7      	bge.n	8001a84 <socket+0xf0>
      	      if(flag & SF_UNI_BLOCK)
 8001a94:	06ea      	lsls	r2, r5, #27
 8001a96:	d5a4      	bpl.n	80019e2 <socket+0x4e>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	dba2      	blt.n	80019e2 <socket+0x4e>
 8001a9c:	e7f2      	b.n	8001a84 <socket+0xf0>
	CHECK_SOCKNUM();
 8001a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa2:	e792      	b.n	80019ca <socket+0x36>
 8001aa4:	20000038 	.word	0x20000038
 8001aa8:	20000438 	.word	0x20000438
 8001aac:	2000043a 	.word	0x2000043a
 8001ab0:	20000444 	.word	0x20000444
 8001ab4:	2000043c 	.word	0x2000043c

08001ab8 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8001ab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
 8001abc:	2808      	cmp	r0, #8
{
 8001abe:	4606      	mov	r6, r0
 8001ac0:	4688      	mov	r8, r1
 8001ac2:	4614      	mov	r4, r2
 8001ac4:	461f      	mov	r7, r3
 8001ac6:	f8bd a028 	ldrh.w	sl, [sp, #40]	; 0x28
   CHECK_SOCKNUM();
 8001aca:	f200 8097 	bhi.w	8001bfc <sendto+0x144>
   switch(getSn_MR(sn) & 0x0F)
 8001ace:	0145      	lsls	r5, r0, #5
 8001ad0:	3508      	adds	r5, #8
 8001ad2:	4628      	mov	r0, r5
 8001ad4:	f7fe fe6e 	bl	80007b4 <WIZCHIP_READ>
 8001ad8:	f000 000f 	and.w	r0, r0, #15
 8001adc:	3802      	subs	r0, #2
 8001ade:	2802      	cmp	r0, #2
 8001ae0:	f200 808f 	bhi.w	8001c02 <sendto+0x14a>
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
 8001ae4:	2c00      	cmp	r4, #0
 8001ae6:	f000 808f 	beq.w	8001c08 <sendto+0x150>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8001aea:	783b      	ldrb	r3, [r7, #0]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8001aec:	787a      	ldrb	r2, [r7, #1]
 8001aee:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8001af2:	78bb      	ldrb	r3, [r7, #2]
 8001af4:	eb03 2202 	add.w	r2, r3, r2, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d03c      	beq.n	8001b7c <sendto+0xc4>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8001b02:	f1ba 0f00 	cmp.w	sl, #0
 8001b06:	d041      	beq.n	8001b8c <sendto+0xd4>
   tmp = getSn_SR(sn);
 8001b08:	f505 7940 	add.w	r9, r5, #768	; 0x300
 8001b0c:	4648      	mov	r0, r9
 8001b0e:	f7fe fe51 	bl	80007b4 <WIZCHIP_READ>
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8001b12:	2842      	cmp	r0, #66	; 0x42
 8001b14:	d142      	bne.n	8001b9c <sendto+0xe4>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8001b16:	2204      	movs	r2, #4
 8001b18:	4639      	mov	r1, r7
 8001b1a:	f505 6040 	add.w	r0, r5, #3072	; 0xc00
 8001b1e:	f7fe fee3 	bl	80008e8 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8001b22:	ea4f 211a 	mov.w	r1, sl, lsr #8
 8001b26:	f505 5080 	add.w	r0, r5, #4096	; 0x1000
 8001b2a:	f7fe fe71 	bl	8000810 <WIZCHIP_WRITE>
 8001b2e:	fa5f f18a 	uxtb.w	r1, sl
 8001b32:	f505 5088 	add.w	r0, r5, #4352	; 0x1100
 8001b36:	f7fe fe6b 	bl	8000810 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8001b3a:	f505 50f8 	add.w	r0, r5, #7936	; 0x1f00
 8001b3e:	f7fe fe39 	bl	80007b4 <WIZCHIP_READ>
 8001b42:	0280      	lsls	r0, r0, #10
 8001b44:	b280      	uxth	r0, r0
 8001b46:	f04f 0a01 	mov.w	sl, #1
 8001b4a:	4284      	cmp	r4, r0
 8001b4c:	bf28      	it	cs
 8001b4e:	4604      	movcs	r4, r0
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001b50:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 8001c14 <sendto+0x15c>
 8001b54:	fa0a fa06 	lsl.w	sl, sl, r6
      freesize = getSn_TX_FSR(sn);
 8001b58:	4630      	mov	r0, r6
 8001b5a:	f7fe feff 	bl	800095c <getSn_TX_FSR>
 8001b5e:	4607      	mov	r7, r0
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8001b60:	4648      	mov	r0, r9
 8001b62:	f7fe fe27 	bl	80007b4 <WIZCHIP_READ>
 8001b66:	2800      	cmp	r0, #0
 8001b68:	d051      	beq.n	8001c0e <sendto+0x156>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001b6a:	f8bb 3000 	ldrh.w	r3, [fp]
 8001b6e:	ea13 0f0a 	tst.w	r3, sl
 8001b72:	d01a      	beq.n	8001baa <sendto+0xf2>
 8001b74:	42bc      	cmp	r4, r7
 8001b76:	d91a      	bls.n	8001bae <sendto+0xf6>
 8001b78:	2000      	movs	r0, #0
 8001b7a:	e034      	b.n	8001be6 <sendto+0x12e>
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8001b7c:	4628      	mov	r0, r5
 8001b7e:	f7fe fe19 	bl	80007b4 <WIZCHIP_READ>
 8001b82:	0740      	lsls	r0, r0, #29
 8001b84:	d4bd      	bmi.n	8001b02 <sendto+0x4a>
 8001b86:	f06f 000b 	mvn.w	r0, #11
 8001b8a:	e02c      	b.n	8001be6 <sendto+0x12e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8001b8c:	4628      	mov	r0, r5
 8001b8e:	f7fe fe11 	bl	80007b4 <WIZCHIP_READ>
 8001b92:	0741      	lsls	r1, r0, #29
 8001b94:	d4b8      	bmi.n	8001b08 <sendto+0x50>
 8001b96:	f06f 000a 	mvn.w	r0, #10
 8001b9a:	e024      	b.n	8001be6 <sendto+0x12e>
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8001b9c:	f000 00ef 	and.w	r0, r0, #239	; 0xef
 8001ba0:	2822      	cmp	r0, #34	; 0x22
 8001ba2:	d0b8      	beq.n	8001b16 <sendto+0x5e>
 8001ba4:	f06f 0006 	mvn.w	r0, #6
 8001ba8:	e01d      	b.n	8001be6 <sendto+0x12e>
      if(len <= freesize) break;
 8001baa:	42bc      	cmp	r4, r7
 8001bac:	d8d4      	bhi.n	8001b58 <sendto+0xa0>
   };
	wiz_send_data(sn, buf, len);
 8001bae:	4630      	mov	r0, r6
 8001bb0:	4641      	mov	r1, r8
 8001bb2:	4622      	mov	r2, r4
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8001bb4:	f505 7680 	add.w	r6, r5, #256	; 0x100
	wiz_send_data(sn, buf, len);
 8001bb8:	f7fe ff12 	bl	80009e0 <wiz_send_data>
	setSn_CR(sn,Sn_CR_SEND);
 8001bbc:	2120      	movs	r1, #32
 8001bbe:	4630      	mov	r0, r6
 8001bc0:	f7fe fe26 	bl	8000810 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8001bc4:	4630      	mov	r0, r6
 8001bc6:	f7fe fdf5 	bl	80007b4 <WIZCHIP_READ>
 8001bca:	2800      	cmp	r0, #0
 8001bcc:	d1fa      	bne.n	8001bc4 <sendto+0x10c>
   while(1)
   {
      tmp = getSn_IR(sn);
 8001bce:	f505 7500 	add.w	r5, r5, #512	; 0x200
 8001bd2:	4628      	mov	r0, r5
 8001bd4:	f7fe fdee 	bl	80007b4 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 8001bd8:	06c2      	lsls	r2, r0, #27
 8001bda:	d506      	bpl.n	8001bea <sendto+0x132>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001bdc:	4628      	mov	r0, r5
 8001bde:	2110      	movs	r1, #16
 8001be0:	f7fe fe16 	bl	8000810 <WIZCHIP_WRITE>
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001be4:	4620      	mov	r0, r4
}
 8001be6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if(tmp & Sn_IR_TIMEOUT)
 8001bea:	0703      	lsls	r3, r0, #28
 8001bec:	d5f1      	bpl.n	8001bd2 <sendto+0x11a>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8001bee:	4628      	mov	r0, r5
 8001bf0:	2108      	movs	r1, #8
 8001bf2:	f7fe fe0d 	bl	8000810 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8001bf6:	f06f 000c 	mvn.w	r0, #12
 8001bfa:	e7f4      	b.n	8001be6 <sendto+0x12e>
   CHECK_SOCKNUM();
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001c00:	e7f1      	b.n	8001be6 <sendto+0x12e>
         return SOCKERR_SOCKMODE;
 8001c02:	f06f 0004 	mvn.w	r0, #4
 8001c06:	e7ee      	b.n	8001be6 <sendto+0x12e>
   CHECK_SOCKDATA();
 8001c08:	f06f 000d 	mvn.w	r0, #13
 8001c0c:	e7eb      	b.n	8001be6 <sendto+0x12e>
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8001c0e:	f06f 0003 	mvn.w	r0, #3
 8001c12:	e7e8      	b.n	8001be6 <sendto+0x12e>
 8001c14:	20000438 	.word	0x20000438

08001c18 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8001c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
 8001c1c:	2808      	cmp	r0, #8
{
 8001c1e:	4604      	mov	r4, r0
 8001c20:	468a      	mov	sl, r1
 8001c22:	4691      	mov	r9, r2
 8001c24:	4698      	mov	r8, r3
 8001c26:	b085      	sub	sp, #20
   CHECK_SOCKNUM();
 8001c28:	f200 80e8 	bhi.w	8001dfc <recvfrom+0x1e4>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8001c2c:	0146      	lsls	r6, r0, #5
 8001c2e:	3608      	adds	r6, #8
 8001c30:	4630      	mov	r0, r6
 8001c32:	f7fe fdbf 	bl	80007b4 <WIZCHIP_READ>
 8001c36:	f000 020f 	and.w	r2, r0, #15
 8001c3a:	3a02      	subs	r2, #2
 8001c3c:	2a02      	cmp	r2, #2
 8001c3e:	4683      	mov	fp, r0
 8001c40:	f200 80df 	bhi.w	8001e02 <recvfrom+0x1ea>
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
 8001c44:	f1b9 0f00 	cmp.w	r9, #0
 8001c48:	f000 80de 	beq.w	8001e08 <recvfrom+0x1f0>
   if(sock_remained_size[sn] == 0)
 8001c4c:	4f71      	ldr	r7, [pc, #452]	; (8001e14 <recvfrom+0x1fc>)
 8001c4e:	f837 2014 	ldrh.w	r2, [r7, r4, lsl #1]
 8001c52:	2a00      	cmp	r2, #0
 8001c54:	d17a      	bne.n	8001d4c <recvfrom+0x134>
 8001c56:	2201      	movs	r2, #1
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8001c58:	f506 7340 	add.w	r3, r6, #768	; 0x300
 8001c5c:	40a2      	lsls	r2, r4
 8001c5e:	9300      	str	r3, [sp, #0]
         pack_len = getSn_RX_RSR(sn);
 8001c60:	4620      	mov	r0, r4
 8001c62:	9201      	str	r2, [sp, #4]
 8001c64:	f7fe fe9b 	bl	800099e <getSn_RX_RSR>
 8001c68:	4605      	mov	r5, r0
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8001c6a:	9800      	ldr	r0, [sp, #0]
 8001c6c:	f7fe fda2 	bl	80007b4 <WIZCHIP_READ>
 8001c70:	2800      	cmp	r0, #0
 8001c72:	f000 80cc 	beq.w	8001e0e <recvfrom+0x1f6>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8001c76:	4968      	ldr	r1, [pc, #416]	; (8001e18 <recvfrom+0x200>)
 8001c78:	9a01      	ldr	r2, [sp, #4]
 8001c7a:	8808      	ldrh	r0, [r1, #0]
 8001c7c:	4210      	tst	r0, r2
 8001c7e:	d002      	beq.n	8001c86 <recvfrom+0x6e>
 8001c80:	b91d      	cbnz	r5, 8001c8a <recvfrom+0x72>
 8001c82:	4628      	mov	r0, r5
 8001c84:	e089      	b.n	8001d9a <recvfrom+0x182>
         if(pack_len != 0) break;
 8001c86:	2d00      	cmp	r5, #0
 8001c88:	d0ea      	beq.n	8001c60 <recvfrom+0x48>
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8001c8a:	f00b 0007 	and.w	r0, fp, #7
 8001c8e:	2803      	cmp	r0, #3
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
	      {
   			wiz_recv_data(sn, head, 8);
   			setSn_CR(sn,Sn_CR_RECV);
 8001c90:	f506 7680 	add.w	r6, r6, #256	; 0x100
	switch (mr & 0x07)
 8001c94:	f000 8084 	beq.w	8001da0 <recvfrom+0x188>
 8001c98:	2804      	cmp	r0, #4
 8001c9a:	d059      	beq.n	8001d50 <recvfrom+0x138>
 8001c9c:	2802      	cmp	r0, #2
 8001c9e:	f040 80a6 	bne.w	8001dee <recvfrom+0x1d6>
	      if(sock_remained_size[sn] == 0)
 8001ca2:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 8001ca6:	bb8b      	cbnz	r3, 8001d0c <recvfrom+0xf4>
   			wiz_recv_data(sn, head, 8);
 8001ca8:	2208      	movs	r2, #8
 8001caa:	4620      	mov	r0, r4
 8001cac:	eb0d 0102 	add.w	r1, sp, r2
 8001cb0:	f7fe fec3 	bl	8000a3a <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8001cb4:	2140      	movs	r1, #64	; 0x40
 8001cb6:	4630      	mov	r0, r6
 8001cb8:	f7fe fdaa 	bl	8000810 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8001cbc:	4630      	mov	r0, r6
 8001cbe:	f7fe fd79 	bl	80007b4 <WIZCHIP_READ>
 8001cc2:	2800      	cmp	r0, #0
 8001cc4:	d1fa      	bne.n	8001cbc <recvfrom+0xa4>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8001cc6:	f89d 3008 	ldrb.w	r3, [sp, #8]
      			addr[1] = head[1];
      			addr[2] = head[2];
      			addr[3] = head[3];
      			*port = head[4];
 8001cca:	f89d 200c 	ldrb.w	r2, [sp, #12]
               addr[0] = head[0];
 8001cce:	f888 3000 	strb.w	r3, [r8]
      			addr[1] = head[1];
 8001cd2:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001cd6:	f888 3001 	strb.w	r3, [r8, #1]
      			addr[2] = head[2];
 8001cda:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001cde:	f888 3002 	strb.w	r3, [r8, #2]
      			addr[3] = head[3];
 8001ce2:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001ce6:	f888 3003 	strb.w	r3, [r8, #3]
      			*port = (*port << 8) + head[5];
 8001cea:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001cee:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001cf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001cf4:	8013      	strh	r3, [r2, #0]
      			sock_remained_size[sn] = head[6];
 8001cf6:	f89d 200e 	ldrb.w	r2, [sp, #14]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8001cfa:	f89d 300f 	ldrb.w	r3, [sp, #15]
   			addr[2] = head[2];
   			addr[3] = head[3];
   			sock_remained_size[sn] = head[4];
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8001cfe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001d02:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8001d06:	2280      	movs	r2, #128	; 0x80
 8001d08:	4b44      	ldr	r3, [pc, #272]	; (8001e1c <recvfrom+0x204>)
 8001d0a:	551a      	strb	r2, [r3, r4]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8001d0c:	f837 5014 	ldrh.w	r5, [r7, r4, lsl #1]
			else pack_len = sock_remained_size[sn];
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8001d10:	4651      	mov	r1, sl
 8001d12:	454d      	cmp	r5, r9
 8001d14:	bf28      	it	cs
 8001d16:	464d      	movcs	r5, r9
 8001d18:	4620      	mov	r0, r4
 8001d1a:	462a      	mov	r2, r5
 8001d1c:	f7fe fe8d 	bl	8000a3a <wiz_recv_data>
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
         sock_remained_size[sn] = pack_len;
         break;
   }
	setSn_CR(sn,Sn_CR_RECV);
 8001d20:	2140      	movs	r1, #64	; 0x40
 8001d22:	4630      	mov	r0, r6
 8001d24:	f7fe fd74 	bl	8000810 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8001d28:	4630      	mov	r0, r6
 8001d2a:	f7fe fd43 	bl	80007b4 <WIZCHIP_READ>
 8001d2e:	2800      	cmp	r0, #0
 8001d30:	d1fa      	bne.n	8001d28 <recvfrom+0x110>
	sock_remained_size[sn] -= pack_len;
 8001d32:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 8001d36:	4a39      	ldr	r2, [pc, #228]	; (8001e1c <recvfrom+0x204>)
 8001d38:	1b5b      	subs	r3, r3, r5
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8001d40:	b113      	cbz	r3, 8001d48 <recvfrom+0x130>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8001d42:	5d10      	ldrb	r0, [r2, r4]
 8001d44:	f040 0001 	orr.w	r0, r0, #1
 8001d48:	5510      	strb	r0, [r2, r4]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8001d4a:	e79a      	b.n	8001c82 <recvfrom+0x6a>
	uint16_t pack_len=0;
 8001d4c:	2500      	movs	r5, #0
 8001d4e:	e79c      	b.n	8001c8a <recvfrom+0x72>
	      if(sock_remained_size[sn] == 0)
 8001d50:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1d9      	bne.n	8001d0c <recvfrom+0xf4>
   			wiz_recv_data(sn, head, 2);
 8001d58:	4620      	mov	r0, r4
 8001d5a:	a902      	add	r1, sp, #8
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	f7fe fe6c 	bl	8000a3a <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8001d62:	2140      	movs	r1, #64	; 0x40
 8001d64:	4630      	mov	r0, r6
 8001d66:	f7fe fd53 	bl	8000810 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8001d6a:	4630      	mov	r0, r6
 8001d6c:	f7fe fd22 	bl	80007b4 <WIZCHIP_READ>
 8001d70:	2800      	cmp	r0, #0
 8001d72:	d1fa      	bne.n	8001d6a <recvfrom+0x152>
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8001d74:	f89d 3009 	ldrb.w	r3, [sp, #9]
    			sock_remained_size[sn] = head[0];
 8001d78:	f89d 2008 	ldrb.w	r2, [sp, #8]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8001d7c:	3b02      	subs	r3, #2
 8001d7e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   			if(sock_remained_size[sn] > 1514) 
 8001d82:	f240 52ea 	movw	r2, #1514	; 0x5ea
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8001d86:	b29b      	uxth	r3, r3
   			if(sock_remained_size[sn] > 1514) 
 8001d88:	4293      	cmp	r3, r2
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8001d8a:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]
   			if(sock_remained_size[sn] > 1514) 
 8001d8e:	d9ba      	bls.n	8001d06 <recvfrom+0xee>
   			   close(sn);
 8001d90:	4620      	mov	r0, r4
 8001d92:	f7ff fdc1 	bl	8001918 <close>
   			   return SOCKFATAL_PACKLEN;
 8001d96:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 8001d9a:	b005      	add	sp, #20
 8001d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		   if(sock_remained_size[sn] == 0)
 8001da0:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1b1      	bne.n	8001d0c <recvfrom+0xf4>
   			wiz_recv_data(sn, head, 6);
 8001da8:	4620      	mov	r0, r4
 8001daa:	a902      	add	r1, sp, #8
 8001dac:	2206      	movs	r2, #6
 8001dae:	f7fe fe44 	bl	8000a3a <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8001db2:	2140      	movs	r1, #64	; 0x40
 8001db4:	4630      	mov	r0, r6
 8001db6:	f7fe fd2b 	bl	8000810 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8001dba:	4630      	mov	r0, r6
 8001dbc:	f7fe fcfa 	bl	80007b4 <WIZCHIP_READ>
 8001dc0:	2800      	cmp	r0, #0
 8001dc2:	d1fa      	bne.n	8001dba <recvfrom+0x1a2>
   			addr[0] = head[0];
 8001dc4:	f89d 3008 	ldrb.w	r3, [sp, #8]
   			sock_remained_size[sn] = head[4];
 8001dc8:	f89d 200c 	ldrb.w	r2, [sp, #12]
   			addr[0] = head[0];
 8001dcc:	f888 3000 	strb.w	r3, [r8]
   			addr[1] = head[1];
 8001dd0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001dd4:	f888 3001 	strb.w	r3, [r8, #1]
   			addr[2] = head[2];
 8001dd8:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001ddc:	f888 3002 	strb.w	r3, [r8, #2]
   			addr[3] = head[3];
 8001de0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001de4:	f888 3003 	strb.w	r3, [r8, #3]
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8001de8:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001dec:	e787      	b.n	8001cfe <recvfrom+0xe6>
         wiz_recv_ignore(sn, pack_len); // data copy.
 8001dee:	4629      	mov	r1, r5
 8001df0:	4620      	mov	r0, r4
 8001df2:	f7fe fe4f 	bl	8000a94 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8001df6:	f827 5014 	strh.w	r5, [r7, r4, lsl #1]
         break;
 8001dfa:	e791      	b.n	8001d20 <recvfrom+0x108>
   CHECK_SOCKNUM();
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	e7cb      	b.n	8001d9a <recvfrom+0x182>
         return SOCKERR_SOCKMODE;
 8001e02:	f06f 0004 	mvn.w	r0, #4
 8001e06:	e7c8      	b.n	8001d9a <recvfrom+0x182>
   CHECK_SOCKDATA();
 8001e08:	f06f 000d 	mvn.w	r0, #13
 8001e0c:	e7c5      	b.n	8001d9a <recvfrom+0x182>
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8001e0e:	f06f 0003 	mvn.w	r0, #3
 8001e12:	e7c2      	b.n	8001d9a <recvfrom+0x182>
 8001e14:	20000444 	.word	0x20000444
 8001e18:	20000438 	.word	0x20000438
 8001e1c:	2000043c 	.word	0x2000043c

08001e20 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001e20:	4770      	bx	lr

08001e22 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001e22:	7800      	ldrb	r0, [r0, #0]
 8001e24:	4770      	bx	lr

08001e26 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001e26:	7001      	strb	r1, [r0, #0]
 8001e28:	4770      	bx	lr

08001e2a <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	4770      	bx	lr

08001e2e <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8001e2e:	4770      	bx	lr

08001e30 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8001e30:	4770      	bx	lr

08001e32 <wizchip_spi_writeburst>:
 8001e32:	4770      	bx	lr

08001e34 <wizchip_cris_exit>:
 8001e34:	4770      	bx	lr

08001e36 <wizchip_cs_select>:
 8001e36:	4770      	bx	lr

08001e38 <wizchip_cs_deselect>:
 8001e38:	4770      	bx	lr
	...

08001e3c <reg_wizchip_cs_cbfunc>:
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
   if(!cs_sel || !cs_desel)
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <reg_wizchip_cs_cbfunc+0x18>)
 8001e3e:	b100      	cbz	r0, 8001e42 <reg_wizchip_cs_cbfunc+0x6>
 8001e40:	b921      	cbnz	r1, 8001e4c <reg_wizchip_cs_cbfunc+0x10>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001e42:	4a05      	ldr	r2, [pc, #20]	; (8001e58 <reg_wizchip_cs_cbfunc+0x1c>)
 8001e44:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001e46:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <reg_wizchip_cs_cbfunc+0x20>)
 8001e48:	619a      	str	r2, [r3, #24]
 8001e4a:	4770      	bx	lr
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
      WIZCHIP.CS._deselect = cs_desel;
 8001e4c:	e9c3 0105 	strd	r0, r1, [r3, #20]
   }
}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	2000003c 	.word	0x2000003c
 8001e58:	08001e37 	.word	0x08001e37
 8001e5c:	08001e39 	.word	0x08001e39

08001e60 <reg_wizchip_spi_cbfunc>:
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <reg_wizchip_spi_cbfunc+0x20>)
 8001e62:	881a      	ldrh	r2, [r3, #0]
 8001e64:	0592      	lsls	r2, r2, #22
 8001e66:	d400      	bmi.n	8001e6a <reg_wizchip_spi_cbfunc+0xa>
 8001e68:	e7fe      	b.n	8001e68 <reg_wizchip_spi_cbfunc+0x8>
   
   if(!spi_rb || !spi_wb)
 8001e6a:	b100      	cbz	r0, 8001e6e <reg_wizchip_spi_cbfunc+0xe>
 8001e6c:	b921      	cbnz	r1, 8001e78 <reg_wizchip_spi_cbfunc+0x18>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001e6e:	4a05      	ldr	r2, [pc, #20]	; (8001e84 <reg_wizchip_spi_cbfunc+0x24>)
 8001e70:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001e72:	4a05      	ldr	r2, [pc, #20]	; (8001e88 <reg_wizchip_spi_cbfunc+0x28>)
 8001e74:	621a      	str	r2, [r3, #32]
 8001e76:	4770      	bx	lr
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001e78:	e9c3 0107 	strd	r0, r1, [r3, #28]
   }
}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	2000003c 	.word	0x2000003c
 8001e84:	08001e2b 	.word	0x08001e2b
 8001e88:	08001e2f 	.word	0x08001e2f

08001e8c <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001e8c:	4b07      	ldr	r3, [pc, #28]	; (8001eac <reg_wizchip_spiburst_cbfunc+0x20>)
 8001e8e:	881a      	ldrh	r2, [r3, #0]
 8001e90:	0592      	lsls	r2, r2, #22
 8001e92:	d400      	bmi.n	8001e96 <reg_wizchip_spiburst_cbfunc+0xa>
 8001e94:	e7fe      	b.n	8001e94 <reg_wizchip_spiburst_cbfunc+0x8>

   if(!spi_rb || !spi_wb)
 8001e96:	b100      	cbz	r0, 8001e9a <reg_wizchip_spiburst_cbfunc+0xe>
 8001e98:	b921      	cbnz	r1, 8001ea4 <reg_wizchip_spiburst_cbfunc+0x18>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8001e9a:	4a05      	ldr	r2, [pc, #20]	; (8001eb0 <reg_wizchip_spiburst_cbfunc+0x24>)
 8001e9c:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8001e9e:	4a05      	ldr	r2, [pc, #20]	; (8001eb4 <reg_wizchip_spiburst_cbfunc+0x28>)
 8001ea0:	629a      	str	r2, [r3, #40]	; 0x28
 8001ea2:	4770      	bx	lr
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8001ea4:	e9c3 0109 	strd	r0, r1, [r3, #36]	; 0x24
   }
}
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	2000003c 	.word	0x2000003c
 8001eb0:	08001e31 	.word	0x08001e31
 8001eb4:	08001e33 	.word	0x08001e33

08001eb8 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8001eb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8001eba:	2206      	movs	r2, #6
 8001ebc:	a904      	add	r1, sp, #16
 8001ebe:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001ec2:	f7fe fcd7 	bl	8000874 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001ec6:	2204      	movs	r2, #4
 8001ec8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ecc:	eb0d 0102 	add.w	r1, sp, r2
 8001ed0:	f7fe fcd0 	bl	8000874 <WIZCHIP_READ_BUF>
 8001ed4:	a902      	add	r1, sp, #8
 8001ed6:	2204      	movs	r2, #4
 8001ed8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001edc:	f7fe fcca 	bl	8000874 <WIZCHIP_READ_BUF>
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	a903      	add	r1, sp, #12
 8001ee4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001ee8:	f7fe fcc4 	bl	8000874 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001eec:	2180      	movs	r1, #128	; 0x80
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f7fe fc8e 	bl	8000810 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7fe fc5d 	bl	80007b4 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001efa:	a904      	add	r1, sp, #16
 8001efc:	2206      	movs	r2, #6
 8001efe:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001f02:	f7fe fcf1 	bl	80008e8 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001f06:	2204      	movs	r2, #4
 8001f08:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f0c:	eb0d 0102 	add.w	r1, sp, r2
 8001f10:	f7fe fcea 	bl	80008e8 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001f14:	a902      	add	r1, sp, #8
 8001f16:	2204      	movs	r2, #4
 8001f18:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001f1c:	f7fe fce4 	bl	80008e8 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001f20:	2204      	movs	r2, #4
 8001f22:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001f26:	a903      	add	r1, sp, #12
 8001f28:	f7fe fcde 	bl	80008e8 <WIZCHIP_WRITE_BUF>
}
 8001f2c:	b007      	add	sp, #28
 8001f2e:	f85d fb04 	ldr.w	pc, [sp], #4

08001f32 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f34:	4605      	mov	r5, r0
 8001f36:	460c      	mov	r4, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 8001f38:	f7ff ffbe 	bl	8001eb8 <wizchip_sw_reset>
   if(txsize)
 8001f3c:	b1bd      	cbz	r5, 8001f6e <wizchip_init+0x3c>
 8001f3e:	1e6e      	subs	r6, r5, #1
 8001f40:	4632      	mov	r2, r6
   {
      tmp = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	3507      	adds	r5, #7
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			tmp += txsize[i];
 8001f46:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8001f4a:	440b      	add	r3, r1
 8001f4c:	b25b      	sxtb	r3, r3

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8001f4e:	2b10      	cmp	r3, #16
 8001f50:	dc29      	bgt.n	8001fa6 <wizchip_init+0x74>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f52:	42aa      	cmp	r2, r5
 8001f54:	d1f7      	bne.n	8001f46 <wizchip_init+0x14>
 8001f56:	f641 7508 	movw	r5, #7944	; 0x1f08
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f5a:	f242 0708 	movw	r7, #8200	; 0x2008
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001f5e:	4628      	mov	r0, r5
 8001f60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f64:	3520      	adds	r5, #32
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001f66:	f7fe fc53 	bl	8000810 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f6a:	42bd      	cmp	r5, r7
 8001f6c:	d1f7      	bne.n	8001f5e <wizchip_init+0x2c>
#endif
		}	
   }

   if(rxsize)
 8001f6e:	b90c      	cbnz	r4, 8001f74 <wizchip_init+0x42>
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
#endif
		}
   }
   return 0;
 8001f70:	2000      	movs	r0, #0
}
 8001f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f74:	1e65      	subs	r5, r4, #1
   if(rxsize)
 8001f76:	462a      	mov	r2, r5
      tmp = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	3407      	adds	r4, #7
			tmp += rxsize[i];
 8001f7c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8001f80:	440b      	add	r3, r1
 8001f82:	b25b      	sxtb	r3, r3
			if(tmp > 16) return -1;
 8001f84:	2b10      	cmp	r3, #16
 8001f86:	dc0e      	bgt.n	8001fa6 <wizchip_init+0x74>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f88:	4294      	cmp	r4, r2
 8001f8a:	d1f7      	bne.n	8001f7c <wizchip_init+0x4a>
 8001f8c:	f641 6408 	movw	r4, #7688	; 0x1e08
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f90:	f641 7608 	movw	r6, #7944	; 0x1f08
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8001f94:	4620      	mov	r0, r4
 8001f96:	f815 1f01 	ldrb.w	r1, [r5, #1]!
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f9a:	3420      	adds	r4, #32
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8001f9c:	f7fe fc38 	bl	8000810 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001fa0:	42b4      	cmp	r4, r6
 8001fa2:	d1f7      	bne.n	8001f94 <wizchip_init+0x62>
 8001fa4:	e7e4      	b.n	8001f70 <wizchip_init+0x3e>
			if(tmp > 16) return -1;
 8001fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8001faa:	e7e2      	b.n	8001f72 <wizchip_init+0x40>

08001fac <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8001fac:	b538      	push	{r3, r4, r5, lr}
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8001fae:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8001fb2:	0a05      	lsrs	r5, r0, #8
   setIR(ir);
 8001fb4:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8001fb8:	f7fe fc2a 	bl	8000810 <WIZCHIP_WRITE>
 8001fbc:	2400      	movs	r4, #0
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8001fbe:	fa45 f304 	asr.w	r3, r5, r4
 8001fc2:	07db      	lsls	r3, r3, #31
 8001fc4:	d505      	bpl.n	8001fd2 <wizchip_clrinterrupt+0x26>
 8001fc6:	0160      	lsls	r0, r4, #5
 8001fc8:	211f      	movs	r1, #31
 8001fca:	f500 7002 	add.w	r0, r0, #520	; 0x208
 8001fce:	f7fe fc1f 	bl	8000810 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8001fd2:	3401      	adds	r4, #1
 8001fd4:	2c08      	cmp	r4, #8
 8001fd6:	d1f2      	bne.n	8001fbe <wizchip_clrinterrupt+0x12>
   }

#endif   
}
 8001fd8:	bd38      	pop	{r3, r4, r5, pc}

08001fda <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8001fda:	b510      	push	{r4, lr}
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8001fdc:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8001fe0:	f7fe fbe8 	bl	80007b4 <WIZCHIP_READ>
 8001fe4:	4604      	mov	r4, r0
   sir = getSIR();
 8001fe6:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8001fea:	f7fe fbe3 	bl	80007b4 <WIZCHIP_READ>
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
  ret = (ret << 8) + ir;
 8001fee:	0203      	lsls	r3, r0, #8
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
 8001ff6:	4418      	add	r0, r3
  return (intr_kind)ret;
 8001ff8:	b280      	uxth	r0, r0
}
 8001ffa:	bd10      	pop	{r4, pc}

08001ffc <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8001ffc:	b510      	push	{r4, lr}
 8001ffe:	4604      	mov	r4, r0
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8002000:	b2c1      	uxtb	r1, r0
 8002002:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002006:	f7fe fc03 	bl	8000810 <WIZCHIP_WRITE>
   setSIMR(simr);
 800200a:	0a21      	lsrs	r1, r4, #8
 800200c:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
#endif   
}
 8002010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   setSIMR(simr);
 8002014:	f7fe bbfc 	b.w	8000810 <WIZCHIP_WRITE>

08002018 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8002018:	b510      	push	{r4, lr}
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 800201a:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800201e:	f7fe fbc9 	bl	80007b4 <WIZCHIP_READ>
 8002022:	4604      	mov	r4, r0
   simr = getSIMR();
 8002024:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002028:	f7fe fbc4 	bl	80007b4 <WIZCHIP_READ>
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
  ret = (ret << 8) + imr;
 800202c:	eb04 2000 	add.w	r0, r4, r0, lsl #8
  return (intr_kind)ret;
}
 8002030:	b280      	uxth	r0, r0
 8002032:	bd10      	pop	{r4, pc}

08002034 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8002034:	b508      	push	{r3, lr}
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8002036:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800203a:	f7fe fbbb 	bl	80007b4 <WIZCHIP_READ>

#else
   tmp = -1;
#endif
   return tmp;
}
 800203e:	f000 0001 	and.w	r0, r0, #1
 8002042:	bd08      	pop	{r3, pc}

08002044 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8002044:	b508      	push	{r3, lr}
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8002046:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800204a:	f7fe fbb3 	bl	80007b4 <WIZCHIP_READ>
 800204e:	f000 0038 	and.w	r0, r0, #56	; 0x38
         tmp = PHY_POWER_NORM;
   #else
      tmp = -1;
   #endif
   return tmp;
}
 8002052:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8002056:	4258      	negs	r0, r3
 8002058:	4158      	adcs	r0, r3
 800205a:	bd08      	pop	{r3, pc}

0800205c <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 800205c:	b508      	push	{r3, lr}
   uint8_t tmp = getPHYCFGR();
 800205e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002062:	f7fe fba7 	bl	80007b4 <WIZCHIP_READ>
   tmp &= PHYCFGR_RST;
   setPHYCFGR(tmp);
 8002066:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 800206a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800206e:	f7fe fbcf 	bl	8000810 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8002072:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002076:	f7fe fb9d 	bl	80007b4 <WIZCHIP_READ>
   tmp |= ~PHYCFGR_RST;
   setPHYCFGR(tmp);
}
 800207a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   tmp |= ~PHYCFGR_RST;
 800207e:	f060 017f 	orn	r1, r0, #127	; 0x7f
   setPHYCFGR(tmp);
 8002082:	b2c9      	uxtb	r1, r1
 8002084:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002088:	f7fe bbc2 	b.w	8000810 <WIZCHIP_WRITE>

0800208c <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800208c:	b508      	push	{r3, lr}
   uint8_t tmp = 0;
   if(phyconf->by == PHY_CONFBY_SW)
 800208e:	7803      	ldrb	r3, [r0, #0]
      tmp |= PHYCFGR_OPMD;
   else
      tmp &= ~PHYCFGR_OPMD;
 8002090:	2b01      	cmp	r3, #1
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8002092:	7843      	ldrb	r3, [r0, #1]
      tmp &= ~PHYCFGR_OPMD;
 8002094:	bf0c      	ite	eq
 8002096:	2140      	moveq	r1, #64	; 0x40
 8002098:	2100      	movne	r1, #0
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 800209a:	2b01      	cmp	r3, #1
 800209c:	d109      	bne.n	80020b2 <wizphy_setphyconf+0x26>
      tmp |= PHYCFGR_OPMDC_ALLA;
 800209e:	f041 0138 	orr.w	r1, r1, #56	; 0x38
            tmp |= PHYCFGR_OPMDC_100H;
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80020a2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80020a6:	f7fe fbb3 	bl	8000810 <WIZCHIP_WRITE>
   wizphy_reset();
}
 80020aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   wizphy_reset();
 80020ae:	f7ff bfd5 	b.w	800205c <wizphy_reset>
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80020b2:	78c2      	ldrb	r2, [r0, #3]
         if(phyconf->speed == PHY_SPEED_100)
 80020b4:	7883      	ldrb	r3, [r0, #2]
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80020b6:	2a01      	cmp	r2, #1
 80020b8:	d106      	bne.n	80020c8 <wizphy_setphyconf+0x3c>
         if(phyconf->speed == PHY_SPEED_100)
 80020ba:	2b01      	cmp	r3, #1
            tmp |= PHYCFGR_OPMDC_100F;
 80020bc:	bf0c      	ite	eq
 80020be:	f041 0118 	orreq.w	r1, r1, #24
            tmp |= PHYCFGR_OPMDC_10F;
 80020c2:	f041 0108 	orrne.w	r1, r1, #8
 80020c6:	e7ec      	b.n	80020a2 <wizphy_setphyconf+0x16>
         if(phyconf->speed == PHY_SPEED_100)
 80020c8:	2b01      	cmp	r3, #1
            tmp |= PHYCFGR_OPMDC_100H;
 80020ca:	bf08      	it	eq
 80020cc:	f041 0110 	orreq.w	r1, r1, #16
 80020d0:	e7e7      	b.n	80020a2 <wizphy_setphyconf+0x16>

080020d2 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80020d2:	b510      	push	{r4, lr}
 80020d4:	4604      	mov	r4, r0
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
 80020d6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80020da:	f7fe fb6b 	bl	80007b4 <WIZCHIP_READ>
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80020de:	f3c0 1380 	ubfx	r3, r0, #6, #1
 80020e2:	7023      	strb	r3, [r4, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80020e4:	f000 0338 	and.w	r3, r0, #56	; 0x38
 80020e8:	2b20      	cmp	r3, #32
 80020ea:	d001      	beq.n	80020f0 <wizphy_getphyconf+0x1e>
 80020ec:	2b38      	cmp	r3, #56	; 0x38
 80020ee:	d11d      	bne.n	800212c <wizphy_getphyconf+0x5a>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80020f0:	2201      	movs	r2, #1
         break;
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80020f2:	7062      	strb	r2, [r4, #1]
         break;
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80020f4:	f1a3 0210 	sub.w	r2, r3, #16
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	2a10      	cmp	r2, #16
 80020fc:	d818      	bhi.n	8002130 <wizphy_getphyconf+0x5e>
 80020fe:	2101      	movs	r1, #1
 8002100:	fa01 f202 	lsl.w	r2, r1, r2
 8002104:	f002 3201 	and.w	r2, r2, #16843009	; 0x1010101
 8002108:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800210c:	b182      	cbz	r2, 8002130 <wizphy_getphyconf+0x5e>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 800210e:	70a1      	strb	r1, [r4, #2]
         break;
      default:
         phyconf->speed = PHY_SPEED_10;
         break;
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002110:	3b08      	subs	r3, #8
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b18      	cmp	r3, #24
 8002116:	d80e      	bhi.n	8002136 <wizphy_getphyconf+0x64>
 8002118:	2201      	movs	r2, #1
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8002122:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002126:	b133      	cbz	r3, 8002136 <wizphy_getphyconf+0x64>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8002128:	70e2      	strb	r2, [r4, #3]
         break;
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
         break;
   }
}
 800212a:	bd10      	pop	{r4, pc}
         phyconf->mode = PHY_MODE_MANUAL;
 800212c:	2200      	movs	r2, #0
 800212e:	e7e0      	b.n	80020f2 <wizphy_getphyconf+0x20>
         phyconf->speed = PHY_SPEED_10;
 8002130:	2200      	movs	r2, #0
 8002132:	70a2      	strb	r2, [r4, #2]
         break;
 8002134:	e7ec      	b.n	8002110 <wizphy_getphyconf+0x3e>
         phyconf->duplex = PHY_DUPLEX_HALF;
 8002136:	2300      	movs	r3, #0
 8002138:	70e3      	strb	r3, [r4, #3]
}
 800213a:	e7f6      	b.n	800212a <wizphy_getphyconf+0x58>

0800213c <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 800213c:	b510      	push	{r4, lr}
 800213e:	4604      	mov	r4, r0
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
 8002140:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002144:	f7fe fb36 	bl	80007b4 <WIZCHIP_READ>
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8002148:	0643      	lsls	r3, r0, #25
 800214a:	d51d      	bpl.n	8002188 <wizphy_setphypmode+0x4c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 800214c:	f000 01c7 	and.w	r1, r0, #199	; 0xc7
   if( pmode == PHY_POWER_DOWN)
 8002150:	2c01      	cmp	r4, #1
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8002152:	bf0c      	ite	eq
 8002154:	f041 0130 	orreq.w	r1, r1, #48	; 0x30
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002158:	f041 0138 	orrne.w	r1, r1, #56	; 0x38
   setPHYCFGR(tmp);
 800215c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002160:	f7fe fb56 	bl	8000810 <WIZCHIP_WRITE>
   wizphy_reset();
 8002164:	f7ff ff7a 	bl	800205c <wizphy_reset>
   tmp = getPHYCFGR();
 8002168:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800216c:	f7fe fb22 	bl	80007b4 <WIZCHIP_READ>
   if( pmode == PHY_POWER_DOWN)
 8002170:	2c01      	cmp	r4, #1
 8002172:	d106      	bne.n	8002182 <wizphy_setphypmode+0x46>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8002174:	f010 0f30 	tst.w	r0, #48	; 0x30
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8002178:	bf0c      	ite	eq
 800217a:	f04f 30ff 	moveq.w	r0, #4294967295
 800217e:	2000      	movne	r0, #0
   }
   return -1;
}
 8002180:	bd10      	pop	{r4, pc}
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8002182:	f010 0f38 	tst.w	r0, #56	; 0x38
 8002186:	e7f7      	b.n	8002178 <wizphy_setphypmode+0x3c>
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8002188:	f04f 30ff 	mov.w	r0, #4294967295
 800218c:	e7f8      	b.n	8002180 <wizphy_setphypmode+0x44>
	...

08002190 <ctlwizchip>:
{
 8002190:	b538      	push	{r3, r4, r5, lr}
 8002192:	460c      	mov	r4, r1
   switch(cwtype)
 8002194:	280f      	cmp	r0, #15
 8002196:	d865      	bhi.n	8002264 <ctlwizchip+0xd4>
 8002198:	e8df f000 	tbb	[pc, r0]
 800219c:	13170c08 	.word	0x13170c08
 80021a0:	2e221f1b 	.word	0x2e221f1b
 80021a4:	514d4a3a 	.word	0x514d4a3a
 80021a8:	615a550a 	.word	0x615a550a
         wizchip_sw_reset();
 80021ac:	f7ff fe84 	bl	8001eb8 <wizchip_sw_reset>
   return 0;
 80021b0:	2000      	movs	r0, #0
         break;
 80021b2:	e03c      	b.n	800222e <ctlwizchip+0x9e>
         if(arg != 0) 
 80021b4:	b101      	cbz	r1, 80021b8 <ctlwizchip+0x28>
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80021b6:	3108      	adds	r1, #8
         return wizchip_init(ptmp[0], ptmp[1]);
 80021b8:	4620      	mov	r0, r4
}
 80021ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
         return wizchip_init(ptmp[0], ptmp[1]);
 80021be:	f7ff beb8 	b.w	8001f32 <wizchip_init>
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80021c2:	8808      	ldrh	r0, [r1, #0]
 80021c4:	f7ff fef2 	bl	8001fac <wizchip_clrinterrupt>
         break;
 80021c8:	e7f2      	b.n	80021b0 <ctlwizchip+0x20>
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80021ca:	f7ff ff06 	bl	8001fda <wizchip_getinterrupt>
         *(uint16_t*)arg = getINTLEVEL();
 80021ce:	8020      	strh	r0, [r4, #0]
         break;
 80021d0:	e7ee      	b.n	80021b0 <ctlwizchip+0x20>
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80021d2:	8808      	ldrh	r0, [r1, #0]
 80021d4:	f7ff ff12 	bl	8001ffc <wizchip_setinterruptmask>
         break;         
 80021d8:	e7ea      	b.n	80021b0 <ctlwizchip+0x20>
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80021da:	f7ff ff1d 	bl	8002018 <wizchip_getinterruptmask>
 80021de:	e7f6      	b.n	80021ce <ctlwizchip+0x3e>
         setINTLEVEL(*(uint16_t*)arg);
 80021e0:	8809      	ldrh	r1, [r1, #0]
 80021e2:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80021e6:	0a09      	lsrs	r1, r1, #8
 80021e8:	f7fe fb12 	bl	8000810 <WIZCHIP_WRITE>
 80021ec:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80021f0:	7821      	ldrb	r1, [r4, #0]
 80021f2:	f7fe fb0d 	bl	8000810 <WIZCHIP_WRITE>
         break;
 80021f6:	e7db      	b.n	80021b0 <ctlwizchip+0x20>
         *(uint16_t*)arg = getINTLEVEL();
 80021f8:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80021fc:	f7fe fada 	bl	80007b4 <WIZCHIP_READ>
 8002200:	4605      	mov	r5, r0
 8002202:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8002206:	f7fe fad5 	bl	80007b4 <WIZCHIP_READ>
 800220a:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 800220e:	e7de      	b.n	80021ce <ctlwizchip+0x3e>
         ((uint8_t*)arg)[6] = 0;
 8002210:	2000      	movs	r0, #0
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8002212:	4b16      	ldr	r3, [pc, #88]	; (800226c <ctlwizchip+0xdc>)
 8002214:	789a      	ldrb	r2, [r3, #2]
 8002216:	700a      	strb	r2, [r1, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8002218:	78da      	ldrb	r2, [r3, #3]
 800221a:	704a      	strb	r2, [r1, #1]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 800221c:	791a      	ldrb	r2, [r3, #4]
 800221e:	708a      	strb	r2, [r1, #2]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8002220:	795a      	ldrb	r2, [r3, #5]
 8002222:	70ca      	strb	r2, [r1, #3]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8002224:	799a      	ldrb	r2, [r3, #6]
 8002226:	710a      	strb	r2, [r1, #4]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8002228:	79db      	ldrb	r3, [r3, #7]
         ((uint8_t*)arg)[6] = 0;
 800222a:	7188      	strb	r0, [r1, #6]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 800222c:	714b      	strb	r3, [r1, #5]
}
 800222e:	bd38      	pop	{r3, r4, r5, pc}
         wizphy_reset();
 8002230:	f7ff ff14 	bl	800205c <wizphy_reset>
         break;
 8002234:	e7bc      	b.n	80021b0 <ctlwizchip+0x20>
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8002236:	4608      	mov	r0, r1
 8002238:	f7ff ff28 	bl	800208c <wizphy_setphyconf>
         break;
 800223c:	e7b8      	b.n	80021b0 <ctlwizchip+0x20>
         wizphy_getphyconf((wiz_PhyConf*)arg);
 800223e:	4608      	mov	r0, r1
 8002240:	f7ff ff47 	bl	80020d2 <wizphy_getphyconf>
         break;
 8002244:	e7b4      	b.n	80021b0 <ctlwizchip+0x20>
         return wizphy_setphypmode(*(uint8_t*)arg);
 8002246:	7808      	ldrb	r0, [r1, #0]
}
 8002248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
         return wizphy_setphypmode(*(uint8_t*)arg);
 800224c:	f7ff bf76 	b.w	800213c <wizphy_setphypmode>
         tmp = wizphy_getphypmode();
 8002250:	f7ff fef8 	bl	8002044 <wizphy_getphypmode>
         tmp = wizphy_getphylink();
 8002254:	b2c0      	uxtb	r0, r0
         if((int8_t)tmp == -1) return -1;
 8002256:	28ff      	cmp	r0, #255	; 0xff
 8002258:	d004      	beq.n	8002264 <ctlwizchip+0xd4>
         *(uint8_t*)arg = tmp;
 800225a:	7020      	strb	r0, [r4, #0]
 800225c:	e7a8      	b.n	80021b0 <ctlwizchip+0x20>
         tmp = wizphy_getphylink();
 800225e:	f7ff fee9 	bl	8002034 <wizphy_getphylink>
 8002262:	e7f7      	b.n	8002254 <ctlwizchip+0xc4>
         return -1;
 8002264:	f04f 30ff 	mov.w	r0, #4294967295
 8002268:	e7e1      	b.n	800222e <ctlwizchip+0x9e>
 800226a:	bf00      	nop
 800226c:	2000003c 	.word	0x2000003c

08002270 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8002270:	b510      	push	{r4, lr}
 8002272:	4604      	mov	r4, r0
   setSHAR(pnetinfo->mac);
 8002274:	4601      	mov	r1, r0
 8002276:	2206      	movs	r2, #6
 8002278:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800227c:	f7fe fb34 	bl	80008e8 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8002280:	2204      	movs	r2, #4
 8002282:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002286:	f104 010e 	add.w	r1, r4, #14
 800228a:	f7fe fb2d 	bl	80008e8 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800228e:	2204      	movs	r2, #4
 8002290:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002294:	f104 010a 	add.w	r1, r4, #10
 8002298:	f7fe fb26 	bl	80008e8 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800229c:	2204      	movs	r2, #4
 800229e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80022a2:	1da1      	adds	r1, r4, #6
 80022a4:	f7fe fb20 	bl	80008e8 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <wizchip_setnetinfo+0x54>)
 80022aa:	7ca2      	ldrb	r2, [r4, #18]
 80022ac:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80022ae:	7ce2      	ldrb	r2, [r4, #19]
 80022b0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80022b2:	7d22      	ldrb	r2, [r4, #20]
 80022b4:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80022b6:	7d62      	ldrb	r2, [r4, #21]
 80022b8:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80022ba:	7da2      	ldrb	r2, [r4, #22]
 80022bc:	4b02      	ldr	r3, [pc, #8]	; (80022c8 <wizchip_setnetinfo+0x58>)
 80022be:	701a      	strb	r2, [r3, #0]
}
 80022c0:	bd10      	pop	{r4, pc}
 80022c2:	bf00      	nop
 80022c4:	20000455 	.word	0x20000455
 80022c8:	20000454 	.word	0x20000454

080022cc <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80022cc:	b510      	push	{r4, lr}
 80022ce:	4604      	mov	r4, r0
   getSHAR(pnetinfo->mac);
 80022d0:	4601      	mov	r1, r0
 80022d2:	2206      	movs	r2, #6
 80022d4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80022d8:	f7fe facc 	bl	8000874 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80022dc:	2204      	movs	r2, #4
 80022de:	f44f 7080 	mov.w	r0, #256	; 0x100
 80022e2:	f104 010e 	add.w	r1, r4, #14
 80022e6:	f7fe fac5 	bl	8000874 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80022ea:	2204      	movs	r2, #4
 80022ec:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80022f0:	f104 010a 	add.w	r1, r4, #10
 80022f4:	f7fe fabe 	bl	8000874 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80022f8:	2204      	movs	r2, #4
 80022fa:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80022fe:	1da1      	adds	r1, r4, #6
 8002300:	f7fe fab8 	bl	8000874 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <wizchip_getnetinfo+0x54>)
 8002306:	781a      	ldrb	r2, [r3, #0]
 8002308:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800230a:	785a      	ldrb	r2, [r3, #1]
 800230c:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800230e:	789a      	ldrb	r2, [r3, #2]
   pnetinfo->dns[3]= _DNS_[3];
 8002310:	78db      	ldrb	r3, [r3, #3]
   pnetinfo->dns[2]= _DNS_[2];
 8002312:	7522      	strb	r2, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8002314:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
 8002316:	4b03      	ldr	r3, [pc, #12]	; (8002324 <wizchip_getnetinfo+0x58>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	75a3      	strb	r3, [r4, #22]
}
 800231c:	bd10      	pop	{r4, pc}
 800231e:	bf00      	nop
 8002320:	20000455 	.word	0x20000455
 8002324:	20000454 	.word	0x20000454

08002328 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8002328:	b538      	push	{r3, r4, r5, lr}
   uint8_t tmp = 0;
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 800232a:	f030 053a 	bics.w	r5, r0, #58	; 0x3a
{
 800232e:	4604      	mov	r4, r0
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8002330:	d10a      	bne.n	8002348 <wizchip_setnetmode+0x20>
#endif      
   tmp = getMR();
 8002332:	4628      	mov	r0, r5
 8002334:	f7fe fa3e 	bl	80007b4 <WIZCHIP_READ>
   tmp |= (uint8_t)netmode;
 8002338:	ea44 0100 	orr.w	r1, r4, r0
   setMR(tmp);
 800233c:	b2c9      	uxtb	r1, r1
 800233e:	4628      	mov	r0, r5
 8002340:	f7fe fa66 	bl	8000810 <WIZCHIP_WRITE>
   return 0;
 8002344:	4628      	mov	r0, r5
}
 8002346:	bd38      	pop	{r3, r4, r5, pc}
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	e7fb      	b.n	8002346 <wizchip_setnetmode+0x1e>

0800234e <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
   return (netmode_type) getMR();
 800234e:	2000      	movs	r0, #0
 8002350:	f7fe ba30 	b.w	80007b4 <WIZCHIP_READ>

08002354 <wizchip_settimeout>:
}

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8002354:	b510      	push	{r4, lr}
 8002356:	4604      	mov	r4, r0
   setRCR(nettime->retry_cnt);
 8002358:	7801      	ldrb	r1, [r0, #0]
 800235a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800235e:	f7fe fa57 	bl	8000810 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8002362:	8861      	ldrh	r1, [r4, #2]
 8002364:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8002368:	0a09      	lsrs	r1, r1, #8
 800236a:	f7fe fa51 	bl	8000810 <WIZCHIP_WRITE>
 800236e:	78a1      	ldrb	r1, [r4, #2]
 8002370:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
}
 8002374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   setRTR(nettime->time_100us);
 8002378:	f7fe ba4a 	b.w	8000810 <WIZCHIP_WRITE>

0800237c <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800237c:	b538      	push	{r3, r4, r5, lr}
 800237e:	4604      	mov	r4, r0
   nettime->retry_cnt = getRCR();
 8002380:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8002384:	f7fe fa16 	bl	80007b4 <WIZCHIP_READ>
 8002388:	7020      	strb	r0, [r4, #0]
   nettime->time_100us = getRTR();
 800238a:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800238e:	f7fe fa11 	bl	80007b4 <WIZCHIP_READ>
 8002392:	4605      	mov	r5, r0
 8002394:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8002398:	f7fe fa0c 	bl	80007b4 <WIZCHIP_READ>
 800239c:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 80023a0:	8060      	strh	r0, [r4, #2]
}
 80023a2:	bd38      	pop	{r3, r4, r5, pc}

080023a4 <ctlnetwork>:
{
 80023a4:	b510      	push	{r4, lr}
 80023a6:	460c      	mov	r4, r1
   switch(cntype)
 80023a8:	2805      	cmp	r0, #5
 80023aa:	d81e      	bhi.n	80023ea <ctlnetwork+0x46>
 80023ac:	e8df f000 	tbb	[pc, r0]
 80023b0:	110c0803 	.word	0x110c0803
 80023b4:	1915      	.short	0x1915
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 80023b6:	4608      	mov	r0, r1
 80023b8:	f7ff ff5a 	bl	8002270 <wizchip_setnetinfo>
   return 0;
 80023bc:	2000      	movs	r0, #0
}
 80023be:	bd10      	pop	{r4, pc}
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 80023c0:	4608      	mov	r0, r1
 80023c2:	f7ff ff83 	bl	80022cc <wizchip_getnetinfo>
         break;
 80023c6:	e7f9      	b.n	80023bc <ctlnetwork+0x18>
         return wizchip_setnetmode(*(netmode_type*)arg);
 80023c8:	7808      	ldrb	r0, [r1, #0]
}
 80023ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
         return wizchip_setnetmode(*(netmode_type*)arg);
 80023ce:	f7ff bfab 	b.w	8002328 <wizchip_setnetmode>
         *(netmode_type*)arg = wizchip_getnetmode();
 80023d2:	f7ff ffbc 	bl	800234e <wizchip_getnetmode>
 80023d6:	7020      	strb	r0, [r4, #0]
         break;
 80023d8:	e7f0      	b.n	80023bc <ctlnetwork+0x18>
         wizchip_settimeout((wiz_NetTimeout*)arg);
 80023da:	4608      	mov	r0, r1
 80023dc:	f7ff ffba 	bl	8002354 <wizchip_settimeout>
 80023e0:	e7ec      	b.n	80023bc <ctlnetwork+0x18>
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 80023e2:	4608      	mov	r0, r1
 80023e4:	f7ff ffca 	bl	800237c <wizchip_gettimeout>
         break;
 80023e8:	e7e8      	b.n	80023bc <ctlnetwork+0x18>
   switch(cntype)
 80023ea:	f04f 30ff 	mov.w	r0, #4294967295
 80023ee:	e7e6      	b.n	80023be <ctlnetwork+0x1a>

080023f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <HAL_InitTick+0x3c>)
{
 80023f4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023f6:	7818      	ldrb	r0, [r3, #0]
 80023f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023fc:	fbb3 f3f0 	udiv	r3, r3, r0
 8002400:	4a0b      	ldr	r2, [pc, #44]	; (8002430 <HAL_InitTick+0x40>)
 8002402:	6810      	ldr	r0, [r2, #0]
 8002404:	fbb0 f0f3 	udiv	r0, r0, r3
 8002408:	f000 f890 	bl	800252c <HAL_SYSTICK_Config>
 800240c:	4604      	mov	r4, r0
 800240e:	b958      	cbnz	r0, 8002428 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002410:	2d0f      	cmp	r5, #15
 8002412:	d809      	bhi.n	8002428 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002414:	4602      	mov	r2, r0
 8002416:	4629      	mov	r1, r5
 8002418:	f04f 30ff 	mov.w	r0, #4294967295
 800241c:	f000 f854 	bl	80024c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002420:	4620      	mov	r0, r4
 8002422:	4b04      	ldr	r3, [pc, #16]	; (8002434 <HAL_InitTick+0x44>)
 8002424:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002426:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002428:	2001      	movs	r0, #1
 800242a:	e7fc      	b.n	8002426 <HAL_InitTick+0x36>
 800242c:	20000068 	.word	0x20000068
 8002430:	20000018 	.word	0x20000018
 8002434:	2000006c 	.word	0x2000006c

08002438 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002438:	4a07      	ldr	r2, [pc, #28]	; (8002458 <HAL_Init+0x20>)
{
 800243a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800243c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800243e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002440:	f043 0310 	orr.w	r3, r3, #16
 8002444:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002446:	f000 f82d 	bl	80024a4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800244a:	200f      	movs	r0, #15
 800244c:	f7ff ffd0 	bl	80023f0 <HAL_InitTick>
  HAL_MspInit();
 8002450:	f7fe f878 	bl	8000544 <HAL_MspInit>
}
 8002454:	2000      	movs	r0, #0
 8002456:	bd08      	pop	{r3, pc}
 8002458:	40022000 	.word	0x40022000

0800245c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800245c:	4a03      	ldr	r2, [pc, #12]	; (800246c <HAL_IncTick+0x10>)
 800245e:	4b04      	ldr	r3, [pc, #16]	; (8002470 <HAL_IncTick+0x14>)
 8002460:	6811      	ldr	r1, [r2, #0]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	440b      	add	r3, r1
 8002466:	6013      	str	r3, [r2, #0]
}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	2000045c 	.word	0x2000045c
 8002470:	20000068 	.word	0x20000068

08002474 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002474:	4b01      	ldr	r3, [pc, #4]	; (800247c <HAL_GetTick+0x8>)
 8002476:	6818      	ldr	r0, [r3, #0]
}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	2000045c 	.word	0x2000045c

08002480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002480:	b538      	push	{r3, r4, r5, lr}
 8002482:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002484:	f7ff fff6 	bl	8002474 <HAL_GetTick>
 8002488:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800248a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800248c:	bf1e      	ittt	ne
 800248e:	4b04      	ldrne	r3, [pc, #16]	; (80024a0 <HAL_Delay+0x20>)
 8002490:	781b      	ldrbne	r3, [r3, #0]
 8002492:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002494:	f7ff ffee 	bl	8002474 <HAL_GetTick>
 8002498:	1b43      	subs	r3, r0, r5
 800249a:	42a3      	cmp	r3, r4
 800249c:	d3fa      	bcc.n	8002494 <HAL_Delay+0x14>
  {
  }
}
 800249e:	bd38      	pop	{r3, r4, r5, pc}
 80024a0:	20000068 	.word	0x20000068

080024a4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a4:	4907      	ldr	r1, [pc, #28]	; (80024c4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024a6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024b2:	0412      	lsls	r2, r2, #16
 80024b4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80024c0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80024c2:	4770      	bx	lr
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c8:	4b16      	ldr	r3, [pc, #88]	; (8002524 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ca:	b530      	push	{r4, r5, lr}
 80024cc:	68dc      	ldr	r4, [r3, #12]
 80024ce:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024d2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024d8:	2b04      	cmp	r3, #4
 80024da:	bf28      	it	cs
 80024dc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024de:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024e4:	bf98      	it	ls
 80024e6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e8:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ec:	bf88      	it	hi
 80024ee:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f0:	ea21 0303 	bic.w	r3, r1, r3
 80024f4:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f6:	fa05 f404 	lsl.w	r4, r5, r4
 80024fa:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80024fe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002500:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002504:	bfac      	ite	ge
 8002506:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250a:	4a07      	ldrlt	r2, [pc, #28]	; (8002528 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002510:	b2db      	uxtb	r3, r3
 8002512:	bfab      	itete	ge
 8002514:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002518:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002520:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002522:	bd30      	pop	{r4, r5, pc}
 8002524:	e000ed00 	.word	0xe000ed00
 8002528:	e000ed14 	.word	0xe000ed14

0800252c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800252c:	3801      	subs	r0, #1
 800252e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002532:	d20b      	bcs.n	800254c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002534:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002538:	21f0      	movs	r1, #240	; 0xf0
 800253a:	4a05      	ldr	r2, [pc, #20]	; (8002550 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800253c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002542:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002544:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002546:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002548:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800254a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800254c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800254e:	4770      	bx	lr
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002558:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 800255a:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800255c:	4f61      	ldr	r7, [pc, #388]	; (80026e4 <HAL_GPIO_Init+0x190>)
 800255e:	4b62      	ldr	r3, [pc, #392]	; (80026e8 <HAL_GPIO_Init+0x194>)
      switch (GPIO_Init->Mode)
 8002560:	f8df c188 	ldr.w	ip, [pc, #392]	; 80026ec <HAL_GPIO_Init+0x198>
 8002564:	f8df e188 	ldr.w	lr, [pc, #392]	; 80026f0 <HAL_GPIO_Init+0x19c>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002568:	680d      	ldr	r5, [r1, #0]
 800256a:	fa35 f406 	lsrs.w	r4, r5, r6
 800256e:	d102      	bne.n	8002576 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8002570:	b003      	add	sp, #12
 8002572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002576:	f04f 0801 	mov.w	r8, #1
 800257a:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800257e:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8002582:	ea38 0505 	bics.w	r5, r8, r5
 8002586:	d177      	bne.n	8002678 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8002588:	684d      	ldr	r5, [r1, #4]
 800258a:	2d03      	cmp	r5, #3
 800258c:	d807      	bhi.n	800259e <HAL_GPIO_Init+0x4a>
 800258e:	3d01      	subs	r5, #1
 8002590:	2d02      	cmp	r5, #2
 8002592:	f200 8082 	bhi.w	800269a <HAL_GPIO_Init+0x146>
 8002596:	e8df f005 	tbb	[pc, r5]
 800259a:	9792      	.short	0x9792
 800259c:	9d          	.byte	0x9d
 800259d:	00          	.byte	0x00
 800259e:	2d12      	cmp	r5, #18
 80025a0:	f000 8095 	beq.w	80026ce <HAL_GPIO_Init+0x17a>
 80025a4:	d86a      	bhi.n	800267c <HAL_GPIO_Init+0x128>
 80025a6:	2d11      	cmp	r5, #17
 80025a8:	f000 808b 	beq.w	80026c2 <HAL_GPIO_Init+0x16e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025ac:	2cff      	cmp	r4, #255	; 0xff
 80025ae:	bf98      	it	ls
 80025b0:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025b2:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025b6:	bf88      	it	hi
 80025b8:	f100 0a04 	addhi.w	sl, r0, #4
 80025bc:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025c0:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025c4:	bf88      	it	hi
 80025c6:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025c8:	fa09 fb05 	lsl.w	fp, r9, r5
 80025cc:	ea28 080b 	bic.w	r8, r8, fp
 80025d0:	fa02 f505 	lsl.w	r5, r2, r5
 80025d4:	ea48 0505 	orr.w	r5, r8, r5
 80025d8:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025dc:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80025e0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80025e4:	d048      	beq.n	8002678 <HAL_GPIO_Init+0x124>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025e6:	69bd      	ldr	r5, [r7, #24]
 80025e8:	f026 0803 	bic.w	r8, r6, #3
 80025ec:	f045 0501 	orr.w	r5, r5, #1
 80025f0:	61bd      	str	r5, [r7, #24]
 80025f2:	69bd      	ldr	r5, [r7, #24]
 80025f4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80025f8:	f005 0501 	and.w	r5, r5, #1
 80025fc:	9501      	str	r5, [sp, #4]
 80025fe:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002602:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002606:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002608:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800260c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002610:	fa09 f90b 	lsl.w	r9, r9, fp
 8002614:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002618:	4d36      	ldr	r5, [pc, #216]	; (80026f4 <HAL_GPIO_Init+0x1a0>)
 800261a:	42a8      	cmp	r0, r5
 800261c:	d05e      	beq.n	80026dc <HAL_GPIO_Init+0x188>
 800261e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002622:	42a8      	cmp	r0, r5
 8002624:	d05c      	beq.n	80026e0 <HAL_GPIO_Init+0x18c>
 8002626:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800262a:	42a8      	cmp	r0, r5
 800262c:	bf0c      	ite	eq
 800262e:	2502      	moveq	r5, #2
 8002630:	2503      	movne	r5, #3
 8002632:	fa05 f50b 	lsl.w	r5, r5, fp
 8002636:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800263a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 800263e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002640:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002644:	bf14      	ite	ne
 8002646:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002648:	43a5      	biceq	r5, r4
 800264a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800264c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800264e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002652:	bf14      	ite	ne
 8002654:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002656:	43a5      	biceq	r5, r4
 8002658:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 800265a:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800265c:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002660:	bf14      	ite	ne
 8002662:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002664:	43a5      	biceq	r5, r4
 8002666:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8002668:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800266a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800266e:	bf14      	ite	ne
 8002670:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002672:	ea25 0404 	biceq.w	r4, r5, r4
 8002676:	601c      	str	r4, [r3, #0]
	position++;
 8002678:	3601      	adds	r6, #1
 800267a:	e775      	b.n	8002568 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 800267c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80026f8 <HAL_GPIO_Init+0x1a4>
 8002680:	454d      	cmp	r5, r9
 8002682:	d00a      	beq.n	800269a <HAL_GPIO_Init+0x146>
 8002684:	d815      	bhi.n	80026b2 <HAL_GPIO_Init+0x15e>
 8002686:	4575      	cmp	r5, lr
 8002688:	d007      	beq.n	800269a <HAL_GPIO_Init+0x146>
 800268a:	f5a9 3980 	sub.w	r9, r9, #65536	; 0x10000
 800268e:	454d      	cmp	r5, r9
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x146>
 8002692:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002696:	454d      	cmp	r5, r9
 8002698:	d188      	bne.n	80025ac <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800269a:	688a      	ldr	r2, [r1, #8]
 800269c:	b1e2      	cbz	r2, 80026d8 <HAL_GPIO_Init+0x184>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800269e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80026a0:	bf08      	it	eq
 80026a2:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026a6:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 80026aa:	bf18      	it	ne
 80026ac:	f8c0 8014 	strne.w	r8, [r0, #20]
 80026b0:	e77c      	b.n	80025ac <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80026b2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80026fc <HAL_GPIO_Init+0x1a8>
 80026b6:	454d      	cmp	r5, r9
 80026b8:	d0ef      	beq.n	800269a <HAL_GPIO_Init+0x146>
 80026ba:	4565      	cmp	r5, ip
 80026bc:	e7ec      	b.n	8002698 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026be:	68ca      	ldr	r2, [r1, #12]
          break;
 80026c0:	e774      	b.n	80025ac <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026c2:	68ca      	ldr	r2, [r1, #12]
 80026c4:	3204      	adds	r2, #4
          break;
 80026c6:	e771      	b.n	80025ac <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026c8:	68ca      	ldr	r2, [r1, #12]
 80026ca:	3208      	adds	r2, #8
          break;
 80026cc:	e76e      	b.n	80025ac <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026ce:	68ca      	ldr	r2, [r1, #12]
 80026d0:	320c      	adds	r2, #12
          break;
 80026d2:	e76b      	b.n	80025ac <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80026d4:	2200      	movs	r2, #0
 80026d6:	e769      	b.n	80025ac <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026d8:	2204      	movs	r2, #4
 80026da:	e767      	b.n	80025ac <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026dc:	2500      	movs	r5, #0
 80026de:	e7a8      	b.n	8002632 <HAL_GPIO_Init+0xde>
 80026e0:	2501      	movs	r5, #1
 80026e2:	e7a6      	b.n	8002632 <HAL_GPIO_Init+0xde>
 80026e4:	40021000 	.word	0x40021000
 80026e8:	40010400 	.word	0x40010400
 80026ec:	10320000 	.word	0x10320000
 80026f0:	10120000 	.word	0x10120000
 80026f4:	40010800 	.word	0x40010800
 80026f8:	10220000 	.word	0x10220000
 80026fc:	10310000 	.word	0x10310000

08002700 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002700:	b10a      	cbz	r2, 8002706 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002702:	6101      	str	r1, [r0, #16]
  }
}
 8002704:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002706:	0409      	lsls	r1, r1, #16
 8002708:	e7fb      	b.n	8002702 <HAL_GPIO_WritePin+0x2>
	...

0800270c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800270c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002710:	4605      	mov	r5, r0
 8002712:	b338      	cbz	r0, 8002764 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002714:	6803      	ldr	r3, [r0, #0]
 8002716:	07db      	lsls	r3, r3, #31
 8002718:	d410      	bmi.n	800273c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800271a:	682b      	ldr	r3, [r5, #0]
 800271c:	079f      	lsls	r7, r3, #30
 800271e:	d45e      	bmi.n	80027de <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002720:	682b      	ldr	r3, [r5, #0]
 8002722:	0719      	lsls	r1, r3, #28
 8002724:	f100 8095 	bmi.w	8002852 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002728:	682b      	ldr	r3, [r5, #0]
 800272a:	075a      	lsls	r2, r3, #29
 800272c:	f100 80c1 	bmi.w	80028b2 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002730:	69e8      	ldr	r0, [r5, #28]
 8002732:	2800      	cmp	r0, #0
 8002734:	f040 812c 	bne.w	8002990 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8002738:	2000      	movs	r0, #0
 800273a:	e029      	b.n	8002790 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800273c:	4c90      	ldr	r4, [pc, #576]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 800273e:	6863      	ldr	r3, [r4, #4]
 8002740:	f003 030c 	and.w	r3, r3, #12
 8002744:	2b04      	cmp	r3, #4
 8002746:	d007      	beq.n	8002758 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002748:	6863      	ldr	r3, [r4, #4]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b08      	cmp	r3, #8
 8002750:	d10a      	bne.n	8002768 <HAL_RCC_OscConfig+0x5c>
 8002752:	6863      	ldr	r3, [r4, #4]
 8002754:	03de      	lsls	r6, r3, #15
 8002756:	d507      	bpl.n	8002768 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002758:	6823      	ldr	r3, [r4, #0]
 800275a:	039c      	lsls	r4, r3, #14
 800275c:	d5dd      	bpl.n	800271a <HAL_RCC_OscConfig+0xe>
 800275e:	686b      	ldr	r3, [r5, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1da      	bne.n	800271a <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8002764:	2001      	movs	r0, #1
 8002766:	e013      	b.n	8002790 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002768:	686b      	ldr	r3, [r5, #4]
 800276a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800276e:	d112      	bne.n	8002796 <HAL_RCC_OscConfig+0x8a>
 8002770:	6823      	ldr	r3, [r4, #0]
 8002772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002776:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002778:	f7ff fe7c 	bl	8002474 <HAL_GetTick>
 800277c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277e:	6823      	ldr	r3, [r4, #0]
 8002780:	0398      	lsls	r0, r3, #14
 8002782:	d4ca      	bmi.n	800271a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002784:	f7ff fe76 	bl	8002474 <HAL_GetTick>
 8002788:	1b80      	subs	r0, r0, r6
 800278a:	2864      	cmp	r0, #100	; 0x64
 800278c:	d9f7      	bls.n	800277e <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800278e:	2003      	movs	r0, #3
}
 8002790:	b002      	add	sp, #8
 8002792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002796:	b99b      	cbnz	r3, 80027c0 <HAL_RCC_OscConfig+0xb4>
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800279e:	6023      	str	r3, [r4, #0]
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80027a8:	f7ff fe64 	bl	8002474 <HAL_GetTick>
 80027ac:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ae:	6823      	ldr	r3, [r4, #0]
 80027b0:	0399      	lsls	r1, r3, #14
 80027b2:	d5b2      	bpl.n	800271a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b4:	f7ff fe5e 	bl	8002474 <HAL_GetTick>
 80027b8:	1b80      	subs	r0, r0, r6
 80027ba:	2864      	cmp	r0, #100	; 0x64
 80027bc:	d9f7      	bls.n	80027ae <HAL_RCC_OscConfig+0xa2>
 80027be:	e7e6      	b.n	800278e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	d103      	bne.n	80027d0 <HAL_RCC_OscConfig+0xc4>
 80027c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027cc:	6023      	str	r3, [r4, #0]
 80027ce:	e7cf      	b.n	8002770 <HAL_RCC_OscConfig+0x64>
 80027d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d4:	6023      	str	r3, [r4, #0]
 80027d6:	6823      	ldr	r3, [r4, #0]
 80027d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027dc:	e7cb      	b.n	8002776 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027de:	4c68      	ldr	r4, [pc, #416]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 80027e0:	6863      	ldr	r3, [r4, #4]
 80027e2:	f013 0f0c 	tst.w	r3, #12
 80027e6:	d007      	beq.n	80027f8 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027e8:	6863      	ldr	r3, [r4, #4]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d110      	bne.n	8002814 <HAL_RCC_OscConfig+0x108>
 80027f2:	6863      	ldr	r3, [r4, #4]
 80027f4:	03da      	lsls	r2, r3, #15
 80027f6:	d40d      	bmi.n	8002814 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f8:	6823      	ldr	r3, [r4, #0]
 80027fa:	079b      	lsls	r3, r3, #30
 80027fc:	d502      	bpl.n	8002804 <HAL_RCC_OscConfig+0xf8>
 80027fe:	692b      	ldr	r3, [r5, #16]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d1af      	bne.n	8002764 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002804:	6823      	ldr	r3, [r4, #0]
 8002806:	696a      	ldr	r2, [r5, #20]
 8002808:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800280c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002810:	6023      	str	r3, [r4, #0]
 8002812:	e785      	b.n	8002720 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002814:	692a      	ldr	r2, [r5, #16]
 8002816:	4b5b      	ldr	r3, [pc, #364]	; (8002984 <HAL_RCC_OscConfig+0x278>)
 8002818:	b16a      	cbz	r2, 8002836 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800281a:	2201      	movs	r2, #1
 800281c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800281e:	f7ff fe29 	bl	8002474 <HAL_GetTick>
 8002822:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002824:	6823      	ldr	r3, [r4, #0]
 8002826:	079f      	lsls	r7, r3, #30
 8002828:	d4ec      	bmi.n	8002804 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800282a:	f7ff fe23 	bl	8002474 <HAL_GetTick>
 800282e:	1b80      	subs	r0, r0, r6
 8002830:	2802      	cmp	r0, #2
 8002832:	d9f7      	bls.n	8002824 <HAL_RCC_OscConfig+0x118>
 8002834:	e7ab      	b.n	800278e <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8002836:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002838:	f7ff fe1c 	bl	8002474 <HAL_GetTick>
 800283c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283e:	6823      	ldr	r3, [r4, #0]
 8002840:	0798      	lsls	r0, r3, #30
 8002842:	f57f af6d 	bpl.w	8002720 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002846:	f7ff fe15 	bl	8002474 <HAL_GetTick>
 800284a:	1b80      	subs	r0, r0, r6
 800284c:	2802      	cmp	r0, #2
 800284e:	d9f6      	bls.n	800283e <HAL_RCC_OscConfig+0x132>
 8002850:	e79d      	b.n	800278e <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002852:	69aa      	ldr	r2, [r5, #24]
 8002854:	4e4a      	ldr	r6, [pc, #296]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 8002856:	4b4b      	ldr	r3, [pc, #300]	; (8002984 <HAL_RCC_OscConfig+0x278>)
 8002858:	b1e2      	cbz	r2, 8002894 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800285a:	2201      	movs	r2, #1
 800285c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002860:	f7ff fe08 	bl	8002474 <HAL_GetTick>
 8002864:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002866:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002868:	079b      	lsls	r3, r3, #30
 800286a:	d50d      	bpl.n	8002888 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800286c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002870:	4b45      	ldr	r3, [pc, #276]	; (8002988 <HAL_RCC_OscConfig+0x27c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	fbb3 f3f2 	udiv	r3, r3, r2
 8002878:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800287a:	bf00      	nop
  }
  while (Delay --);
 800287c:	9b01      	ldr	r3, [sp, #4]
 800287e:	1e5a      	subs	r2, r3, #1
 8002880:	9201      	str	r2, [sp, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f9      	bne.n	800287a <HAL_RCC_OscConfig+0x16e>
 8002886:	e74f      	b.n	8002728 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002888:	f7ff fdf4 	bl	8002474 <HAL_GetTick>
 800288c:	1b00      	subs	r0, r0, r4
 800288e:	2802      	cmp	r0, #2
 8002890:	d9e9      	bls.n	8002866 <HAL_RCC_OscConfig+0x15a>
 8002892:	e77c      	b.n	800278e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8002894:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002898:	f7ff fdec 	bl	8002474 <HAL_GetTick>
 800289c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800289e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80028a0:	079f      	lsls	r7, r3, #30
 80028a2:	f57f af41 	bpl.w	8002728 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a6:	f7ff fde5 	bl	8002474 <HAL_GetTick>
 80028aa:	1b00      	subs	r0, r0, r4
 80028ac:	2802      	cmp	r0, #2
 80028ae:	d9f6      	bls.n	800289e <HAL_RCC_OscConfig+0x192>
 80028b0:	e76d      	b.n	800278e <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b2:	4c33      	ldr	r4, [pc, #204]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 80028b4:	69e3      	ldr	r3, [r4, #28]
 80028b6:	00d8      	lsls	r0, r3, #3
 80028b8:	d424      	bmi.n	8002904 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80028ba:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80028bc:	69e3      	ldr	r3, [r4, #28]
 80028be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c2:	61e3      	str	r3, [r4, #28]
 80028c4:	69e3      	ldr	r3, [r4, #28]
 80028c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ce:	4e2f      	ldr	r6, [pc, #188]	; (800298c <HAL_RCC_OscConfig+0x280>)
 80028d0:	6833      	ldr	r3, [r6, #0]
 80028d2:	05d9      	lsls	r1, r3, #23
 80028d4:	d518      	bpl.n	8002908 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d6:	68eb      	ldr	r3, [r5, #12]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d126      	bne.n	800292a <HAL_RCC_OscConfig+0x21e>
 80028dc:	6a23      	ldr	r3, [r4, #32]
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80028e4:	f7ff fdc6 	bl	8002474 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80028ec:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ee:	6a23      	ldr	r3, [r4, #32]
 80028f0:	079b      	lsls	r3, r3, #30
 80028f2:	d53f      	bpl.n	8002974 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80028f4:	2f00      	cmp	r7, #0
 80028f6:	f43f af1b 	beq.w	8002730 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fa:	69e3      	ldr	r3, [r4, #28]
 80028fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002900:	61e3      	str	r3, [r4, #28]
 8002902:	e715      	b.n	8002730 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002904:	2700      	movs	r7, #0
 8002906:	e7e2      	b.n	80028ce <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002908:	6833      	ldr	r3, [r6, #0]
 800290a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800290e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002910:	f7ff fdb0 	bl	8002474 <HAL_GetTick>
 8002914:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002916:	6833      	ldr	r3, [r6, #0]
 8002918:	05da      	lsls	r2, r3, #23
 800291a:	d4dc      	bmi.n	80028d6 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291c:	f7ff fdaa 	bl	8002474 <HAL_GetTick>
 8002920:	eba0 0008 	sub.w	r0, r0, r8
 8002924:	2864      	cmp	r0, #100	; 0x64
 8002926:	d9f6      	bls.n	8002916 <HAL_RCC_OscConfig+0x20a>
 8002928:	e731      	b.n	800278e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800292a:	b9ab      	cbnz	r3, 8002958 <HAL_RCC_OscConfig+0x24c>
 800292c:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002932:	f023 0301 	bic.w	r3, r3, #1
 8002936:	6223      	str	r3, [r4, #32]
 8002938:	6a23      	ldr	r3, [r4, #32]
 800293a:	f023 0304 	bic.w	r3, r3, #4
 800293e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002940:	f7ff fd98 	bl	8002474 <HAL_GetTick>
 8002944:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002946:	6a23      	ldr	r3, [r4, #32]
 8002948:	0798      	lsls	r0, r3, #30
 800294a:	d5d3      	bpl.n	80028f4 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294c:	f7ff fd92 	bl	8002474 <HAL_GetTick>
 8002950:	1b80      	subs	r0, r0, r6
 8002952:	4540      	cmp	r0, r8
 8002954:	d9f7      	bls.n	8002946 <HAL_RCC_OscConfig+0x23a>
 8002956:	e71a      	b.n	800278e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002958:	2b05      	cmp	r3, #5
 800295a:	6a23      	ldr	r3, [r4, #32]
 800295c:	d103      	bne.n	8002966 <HAL_RCC_OscConfig+0x25a>
 800295e:	f043 0304 	orr.w	r3, r3, #4
 8002962:	6223      	str	r3, [r4, #32]
 8002964:	e7ba      	b.n	80028dc <HAL_RCC_OscConfig+0x1d0>
 8002966:	f023 0301 	bic.w	r3, r3, #1
 800296a:	6223      	str	r3, [r4, #32]
 800296c:	6a23      	ldr	r3, [r4, #32]
 800296e:	f023 0304 	bic.w	r3, r3, #4
 8002972:	e7b6      	b.n	80028e2 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002974:	f7ff fd7e 	bl	8002474 <HAL_GetTick>
 8002978:	1b80      	subs	r0, r0, r6
 800297a:	4540      	cmp	r0, r8
 800297c:	d9b7      	bls.n	80028ee <HAL_RCC_OscConfig+0x1e2>
 800297e:	e706      	b.n	800278e <HAL_RCC_OscConfig+0x82>
 8002980:	40021000 	.word	0x40021000
 8002984:	42420000 	.word	0x42420000
 8002988:	20000018 	.word	0x20000018
 800298c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002990:	4c2a      	ldr	r4, [pc, #168]	; (8002a3c <HAL_RCC_OscConfig+0x330>)
 8002992:	6863      	ldr	r3, [r4, #4]
 8002994:	f003 030c 	and.w	r3, r3, #12
 8002998:	2b08      	cmp	r3, #8
 800299a:	d03e      	beq.n	8002a1a <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800299c:	2200      	movs	r2, #0
 800299e:	4b28      	ldr	r3, [pc, #160]	; (8002a40 <HAL_RCC_OscConfig+0x334>)
 80029a0:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80029a2:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a4:	d12c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80029a6:	f7ff fd65 	bl	8002474 <HAL_GetTick>
 80029aa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	0199      	lsls	r1, r3, #6
 80029b0:	d420      	bmi.n	80029f4 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029b2:	6a2b      	ldr	r3, [r5, #32]
 80029b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b8:	d105      	bne.n	80029c6 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029ba:	6862      	ldr	r2, [r4, #4]
 80029bc:	68a9      	ldr	r1, [r5, #8]
 80029be:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80029c2:	430a      	orrs	r2, r1
 80029c4:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029c6:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80029c8:	6862      	ldr	r2, [r4, #4]
 80029ca:	430b      	orrs	r3, r1
 80029cc:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80029d0:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80029d2:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029d4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80029d6:	4b1a      	ldr	r3, [pc, #104]	; (8002a40 <HAL_RCC_OscConfig+0x334>)
 80029d8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80029da:	f7ff fd4b 	bl	8002474 <HAL_GetTick>
 80029de:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029e0:	6823      	ldr	r3, [r4, #0]
 80029e2:	019a      	lsls	r2, r3, #6
 80029e4:	f53f aea8 	bmi.w	8002738 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e8:	f7ff fd44 	bl	8002474 <HAL_GetTick>
 80029ec:	1b40      	subs	r0, r0, r5
 80029ee:	2802      	cmp	r0, #2
 80029f0:	d9f6      	bls.n	80029e0 <HAL_RCC_OscConfig+0x2d4>
 80029f2:	e6cc      	b.n	800278e <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f4:	f7ff fd3e 	bl	8002474 <HAL_GetTick>
 80029f8:	1b80      	subs	r0, r0, r6
 80029fa:	2802      	cmp	r0, #2
 80029fc:	d9d6      	bls.n	80029ac <HAL_RCC_OscConfig+0x2a0>
 80029fe:	e6c6      	b.n	800278e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8002a00:	f7ff fd38 	bl	8002474 <HAL_GetTick>
 8002a04:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a06:	6823      	ldr	r3, [r4, #0]
 8002a08:	019b      	lsls	r3, r3, #6
 8002a0a:	f57f ae95 	bpl.w	8002738 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7ff fd31 	bl	8002474 <HAL_GetTick>
 8002a12:	1b40      	subs	r0, r0, r5
 8002a14:	2802      	cmp	r0, #2
 8002a16:	d9f6      	bls.n	8002a06 <HAL_RCC_OscConfig+0x2fa>
 8002a18:	e6b9      	b.n	800278e <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a1a:	2801      	cmp	r0, #1
 8002a1c:	f43f aeb8 	beq.w	8002790 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8002a20:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a22:	6a2a      	ldr	r2, [r5, #32]
 8002a24:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002a28:	4291      	cmp	r1, r2
 8002a2a:	f47f ae9b 	bne.w	8002764 <HAL_RCC_OscConfig+0x58>
 8002a2e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a30:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a34:	4293      	cmp	r3, r2
 8002a36:	f43f ae7f 	beq.w	8002738 <HAL_RCC_OscConfig+0x2c>
 8002a3a:	e693      	b.n	8002764 <HAL_RCC_OscConfig+0x58>
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	42420000 	.word	0x42420000

08002a44 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002a44:	4a0d      	ldr	r2, [pc, #52]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x38>)
 8002a46:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002a48:	f003 010c 	and.w	r1, r3, #12
 8002a4c:	2908      	cmp	r1, #8
 8002a4e:	d112      	bne.n	8002a76 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a50:	480b      	ldr	r0, [pc, #44]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a52:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a56:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a58:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a5a:	d509      	bpl.n	8002a70 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a5c:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a5e:	4a09      	ldr	r2, [pc, #36]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a60:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a64:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a66:	4a08      	ldr	r2, [pc, #32]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x44>)
 8002a68:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a6e:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x48>)
 8002a72:	4358      	muls	r0, r3
 8002a74:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8002a76:	4803      	ldr	r0, [pc, #12]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	0800443e 	.word	0x0800443e
 8002a84:	007a1200 	.word	0x007a1200
 8002a88:	0800444e 	.word	0x0800444e
 8002a8c:	003d0900 	.word	0x003d0900

08002a90 <HAL_RCC_ClockConfig>:
{
 8002a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a94:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002a96:	4604      	mov	r4, r0
 8002a98:	b910      	cbnz	r0, 8002aa0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002a9a:	2001      	movs	r0, #1
}
 8002a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa0:	4a44      	ldr	r2, [pc, #272]	; (8002bb4 <HAL_RCC_ClockConfig+0x124>)
 8002aa2:	6813      	ldr	r3, [r2, #0]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	428b      	cmp	r3, r1
 8002aaa:	d328      	bcc.n	8002afe <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aac:	6821      	ldr	r1, [r4, #0]
 8002aae:	078e      	lsls	r6, r1, #30
 8002ab0:	d430      	bmi.n	8002b14 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ab2:	07ca      	lsls	r2, r1, #31
 8002ab4:	d443      	bmi.n	8002b3e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab6:	4a3f      	ldr	r2, [pc, #252]	; (8002bb4 <HAL_RCC_ClockConfig+0x124>)
 8002ab8:	6813      	ldr	r3, [r2, #0]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	42ab      	cmp	r3, r5
 8002ac0:	d865      	bhi.n	8002b8e <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac2:	6822      	ldr	r2, [r4, #0]
 8002ac4:	4d3c      	ldr	r5, [pc, #240]	; (8002bb8 <HAL_RCC_ClockConfig+0x128>)
 8002ac6:	f012 0f04 	tst.w	r2, #4
 8002aca:	d16c      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002acc:	0713      	lsls	r3, r2, #28
 8002ace:	d506      	bpl.n	8002ade <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ad0:	686b      	ldr	r3, [r5, #4]
 8002ad2:	6922      	ldr	r2, [r4, #16]
 8002ad4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002ad8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002adc:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ade:	f7ff ffb1 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 8002ae2:	686b      	ldr	r3, [r5, #4]
 8002ae4:	4a35      	ldr	r2, [pc, #212]	; (8002bbc <HAL_RCC_ClockConfig+0x12c>)
 8002ae6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	40d8      	lsrs	r0, r3
 8002aee:	4b34      	ldr	r3, [pc, #208]	; (8002bc0 <HAL_RCC_ClockConfig+0x130>)
 8002af0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002af2:	4b34      	ldr	r3, [pc, #208]	; (8002bc4 <HAL_RCC_ClockConfig+0x134>)
 8002af4:	6818      	ldr	r0, [r3, #0]
 8002af6:	f7ff fc7b 	bl	80023f0 <HAL_InitTick>
  return HAL_OK;
 8002afa:	2000      	movs	r0, #0
 8002afc:	e7ce      	b.n	8002a9c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afe:	6813      	ldr	r3, [r2, #0]
 8002b00:	f023 0307 	bic.w	r3, r3, #7
 8002b04:	430b      	orrs	r3, r1
 8002b06:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b08:	6813      	ldr	r3, [r2, #0]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	428b      	cmp	r3, r1
 8002b10:	d1c3      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xa>
 8002b12:	e7cb      	b.n	8002aac <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	4b28      	ldr	r3, [pc, #160]	; (8002bb8 <HAL_RCC_ClockConfig+0x128>)
 8002b16:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b1a:	bf1e      	ittt	ne
 8002b1c:	685a      	ldrne	r2, [r3, #4]
 8002b1e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8002b22:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b24:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b26:	bf42      	ittt	mi
 8002b28:	685a      	ldrmi	r2, [r3, #4]
 8002b2a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002b2e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	68a0      	ldr	r0, [r4, #8]
 8002b34:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002b38:	4302      	orrs	r2, r0
 8002b3a:	605a      	str	r2, [r3, #4]
 8002b3c:	e7b9      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b3e:	6862      	ldr	r2, [r4, #4]
 8002b40:	4e1d      	ldr	r6, [pc, #116]	; (8002bb8 <HAL_RCC_ClockConfig+0x128>)
 8002b42:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b44:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b46:	d11a      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b48:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4c:	d0a5      	beq.n	8002a9a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b4e:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b50:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b54:	f023 0303 	bic.w	r3, r3, #3
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002b5c:	f7ff fc8a 	bl	8002474 <HAL_GetTick>
 8002b60:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b62:	6873      	ldr	r3, [r6, #4]
 8002b64:	6862      	ldr	r2, [r4, #4]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002b6e:	d0a2      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b70:	f7ff fc80 	bl	8002474 <HAL_GetTick>
 8002b74:	1bc0      	subs	r0, r0, r7
 8002b76:	4540      	cmp	r0, r8
 8002b78:	d9f3      	bls.n	8002b62 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8002b7a:	2003      	movs	r0, #3
 8002b7c:	e78e      	b.n	8002a9c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b7e:	2a02      	cmp	r2, #2
 8002b80:	d102      	bne.n	8002b88 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b82:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002b86:	e7e1      	b.n	8002b4c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b88:	f013 0f02 	tst.w	r3, #2
 8002b8c:	e7de      	b.n	8002b4c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	6813      	ldr	r3, [r2, #0]
 8002b90:	f023 0307 	bic.w	r3, r3, #7
 8002b94:	432b      	orrs	r3, r5
 8002b96:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b98:	6813      	ldr	r3, [r2, #0]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	42ab      	cmp	r3, r5
 8002ba0:	f47f af7b 	bne.w	8002a9a <HAL_RCC_ClockConfig+0xa>
 8002ba4:	e78d      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba6:	686b      	ldr	r3, [r5, #4]
 8002ba8:	68e1      	ldr	r1, [r4, #12]
 8002baa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002bae:	430b      	orrs	r3, r1
 8002bb0:	606b      	str	r3, [r5, #4]
 8002bb2:	e78b      	b.n	8002acc <HAL_RCC_ClockConfig+0x3c>
 8002bb4:	40022000 	.word	0x40022000
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	08004236 	.word	0x08004236
 8002bc0:	20000018 	.word	0x20000018
 8002bc4:	2000006c 	.word	0x2000006c

08002bc8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bc8:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <HAL_RCC_GetPCLK1Freq+0x14>)
 8002bca:	4a05      	ldr	r2, [pc, #20]	; (8002be0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002bd2:	5cd3      	ldrb	r3, [r2, r3]
 8002bd4:	4a03      	ldr	r2, [pc, #12]	; (8002be4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002bd6:	6810      	ldr	r0, [r2, #0]
}
 8002bd8:	40d8      	lsrs	r0, r3
 8002bda:	4770      	bx	lr
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	08004246 	.word	0x08004246
 8002be4:	20000018 	.word	0x20000018

08002be8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002be8:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <HAL_RCC_GetPCLK2Freq+0x14>)
 8002bea:	4a05      	ldr	r2, [pc, #20]	; (8002c00 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002bf2:	5cd3      	ldrb	r3, [r2, r3]
 8002bf4:	4a03      	ldr	r2, [pc, #12]	; (8002c04 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002bf6:	6810      	ldr	r0, [r2, #0]
}
 8002bf8:	40d8      	lsrs	r0, r3
 8002bfa:	4770      	bx	lr
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	08004246 	.word	0x08004246
 8002c04:	20000018 	.word	0x20000018

08002c08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c08:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c0a:	4604      	mov	r4, r0
 8002c0c:	2800      	cmp	r0, #0
 8002c0e:	d051      	beq.n	8002cb4 <HAL_SPI_Init+0xac>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d14a      	bne.n	8002cac <HAL_SPI_Init+0xa4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c16:	6842      	ldr	r2, [r0, #4]
 8002c18:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002c1c:	d000      	beq.n	8002c20 <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c1e:	61c3      	str	r3, [r0, #28]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c20:	2300      	movs	r3, #0
 8002c22:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c24:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002c28:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c2c:	b923      	cbnz	r3, 8002c38 <HAL_SPI_Init+0x30>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c2e:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8002c30:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002c34:	f7fd fca8 	bl	8000588 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c38:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c3a:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002c3c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002c40:	6813      	ldr	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c42:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8002c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c48:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c4a:	6863      	ldr	r3, [r4, #4]
 8002c4c:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8002c50:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8002c54:	4303      	orrs	r3, r0
 8002c56:	68e0      	ldr	r0, [r4, #12]
 8002c58:	69a1      	ldr	r1, [r4, #24]
 8002c5a:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8002c5e:	4303      	orrs	r3, r0
 8002c60:	6920      	ldr	r0, [r4, #16]
 8002c62:	f000 0002 	and.w	r0, r0, #2
 8002c66:	4303      	orrs	r3, r0
 8002c68:	6960      	ldr	r0, [r4, #20]
 8002c6a:	f000 0001 	and.w	r0, r0, #1
 8002c6e:	4303      	orrs	r3, r0
 8002c70:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8002c74:	4303      	orrs	r3, r0
 8002c76:	69e0      	ldr	r0, [r4, #28]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002c78:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c7a:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8002c7e:	4303      	orrs	r3, r0
 8002c80:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002c82:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c86:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8002c8a:	4303      	orrs	r3, r0
 8002c8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002c8e:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8002c92:	4303      	orrs	r3, r0
 8002c94:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002c96:	6051      	str	r1, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c98:	69d3      	ldr	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c9a:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ca0:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002ca2:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ca4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ca6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8002caa:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cac:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002cb2:	e7b5      	b.n	8002c20 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	e7f8      	b.n	8002caa <HAL_SPI_Init+0xa2>

08002cb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cb8:	b510      	push	{r4, lr}
 8002cba:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cbc:	6803      	ldr	r3, [r0, #0]
 8002cbe:	68c1      	ldr	r1, [r0, #12]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002cca:	6882      	ldr	r2, [r0, #8]
 8002ccc:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002cce:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002cd0:	4302      	orrs	r2, r0
 8002cd2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002cd4:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8002cd8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002cdc:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ce2:	695a      	ldr	r2, [r3, #20]
 8002ce4:	69a1      	ldr	r1, [r4, #24]
 8002ce6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002cea:	430a      	orrs	r2, r1
 8002cec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002cee:	4a0e      	ldr	r2, [pc, #56]	; (8002d28 <UART_SetConfig+0x70>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d115      	bne.n	8002d20 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002cf4:	f7ff ff78 	bl	8002be8 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cf8:	2319      	movs	r3, #25
 8002cfa:	4343      	muls	r3, r0
 8002cfc:	6862      	ldr	r2, [r4, #4]
 8002cfe:	6820      	ldr	r0, [r4, #0]
 8002d00:	0092      	lsls	r2, r2, #2
 8002d02:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d06:	2264      	movs	r2, #100	; 0x64
 8002d08:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d0c:	fb02 3311 	mls	r3, r2, r1, r3
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	3332      	adds	r3, #50	; 0x32
 8002d14:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d18:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002d1c:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d1e:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d20:	f7ff ff52 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 8002d24:	e7e8      	b.n	8002cf8 <UART_SetConfig+0x40>
 8002d26:	bf00      	nop
 8002d28:	40013800 	.word	0x40013800

08002d2c <HAL_UART_Init>:
{
 8002d2c:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002d2e:	4604      	mov	r4, r0
 8002d30:	b348      	cbz	r0, 8002d86 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002d32:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002d36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d3a:	b91b      	cbnz	r3, 8002d44 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002d3c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8002d40:	f7fd fc5c 	bl	80005fc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002d44:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002d46:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002d48:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8002d4c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002d4e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002d50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d54:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002d56:	f7ff ffaf 	bl	8002cb8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d5a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d5c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d6c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d74:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002d76:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d78:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d7a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d82:	6360      	str	r0, [r4, #52]	; 0x34
}
 8002d84:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002d86:	2001      	movs	r0, #1
 8002d88:	e7fc      	b.n	8002d84 <HAL_UART_Init+0x58>
	...

08002d8c <__errno>:
 8002d8c:	4b01      	ldr	r3, [pc, #4]	; (8002d94 <__errno+0x8>)
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	20000070 	.word	0x20000070

08002d98 <__libc_init_array>:
 8002d98:	b570      	push	{r4, r5, r6, lr}
 8002d9a:	2600      	movs	r6, #0
 8002d9c:	4d0c      	ldr	r5, [pc, #48]	; (8002dd0 <__libc_init_array+0x38>)
 8002d9e:	4c0d      	ldr	r4, [pc, #52]	; (8002dd4 <__libc_init_array+0x3c>)
 8002da0:	1b64      	subs	r4, r4, r5
 8002da2:	10a4      	asrs	r4, r4, #2
 8002da4:	42a6      	cmp	r6, r4
 8002da6:	d109      	bne.n	8002dbc <__libc_init_array+0x24>
 8002da8:	f001 f902 	bl	8003fb0 <_init>
 8002dac:	2600      	movs	r6, #0
 8002dae:	4d0a      	ldr	r5, [pc, #40]	; (8002dd8 <__libc_init_array+0x40>)
 8002db0:	4c0a      	ldr	r4, [pc, #40]	; (8002ddc <__libc_init_array+0x44>)
 8002db2:	1b64      	subs	r4, r4, r5
 8002db4:	10a4      	asrs	r4, r4, #2
 8002db6:	42a6      	cmp	r6, r4
 8002db8:	d105      	bne.n	8002dc6 <__libc_init_array+0x2e>
 8002dba:	bd70      	pop	{r4, r5, r6, pc}
 8002dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dc0:	4798      	blx	r3
 8002dc2:	3601      	adds	r6, #1
 8002dc4:	e7ee      	b.n	8002da4 <__libc_init_array+0xc>
 8002dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dca:	4798      	blx	r3
 8002dcc:	3601      	adds	r6, #1
 8002dce:	e7f2      	b.n	8002db6 <__libc_init_array+0x1e>
 8002dd0:	080044e8 	.word	0x080044e8
 8002dd4:	080044e8 	.word	0x080044e8
 8002dd8:	080044e8 	.word	0x080044e8
 8002ddc:	080044ec 	.word	0x080044ec

08002de0 <memset>:
 8002de0:	4603      	mov	r3, r0
 8002de2:	4402      	add	r2, r0
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d100      	bne.n	8002dea <memset+0xa>
 8002de8:	4770      	bx	lr
 8002dea:	f803 1b01 	strb.w	r1, [r3], #1
 8002dee:	e7f9      	b.n	8002de4 <memset+0x4>

08002df0 <iprintf>:
 8002df0:	b40f      	push	{r0, r1, r2, r3}
 8002df2:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <iprintf+0x2c>)
 8002df4:	b513      	push	{r0, r1, r4, lr}
 8002df6:	681c      	ldr	r4, [r3, #0]
 8002df8:	b124      	cbz	r4, 8002e04 <iprintf+0x14>
 8002dfa:	69a3      	ldr	r3, [r4, #24]
 8002dfc:	b913      	cbnz	r3, 8002e04 <iprintf+0x14>
 8002dfe:	4620      	mov	r0, r4
 8002e00:	f000 fb28 	bl	8003454 <__sinit>
 8002e04:	ab05      	add	r3, sp, #20
 8002e06:	4620      	mov	r0, r4
 8002e08:	9a04      	ldr	r2, [sp, #16]
 8002e0a:	68a1      	ldr	r1, [r4, #8]
 8002e0c:	9301      	str	r3, [sp, #4]
 8002e0e:	f000 fd33 	bl	8003878 <_vfiprintf_r>
 8002e12:	b002      	add	sp, #8
 8002e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e18:	b004      	add	sp, #16
 8002e1a:	4770      	bx	lr
 8002e1c:	20000070 	.word	0x20000070

08002e20 <_puts_r>:
 8002e20:	b570      	push	{r4, r5, r6, lr}
 8002e22:	460e      	mov	r6, r1
 8002e24:	4605      	mov	r5, r0
 8002e26:	b118      	cbz	r0, 8002e30 <_puts_r+0x10>
 8002e28:	6983      	ldr	r3, [r0, #24]
 8002e2a:	b90b      	cbnz	r3, 8002e30 <_puts_r+0x10>
 8002e2c:	f000 fb12 	bl	8003454 <__sinit>
 8002e30:	69ab      	ldr	r3, [r5, #24]
 8002e32:	68ac      	ldr	r4, [r5, #8]
 8002e34:	b913      	cbnz	r3, 8002e3c <_puts_r+0x1c>
 8002e36:	4628      	mov	r0, r5
 8002e38:	f000 fb0c 	bl	8003454 <__sinit>
 8002e3c:	4b2c      	ldr	r3, [pc, #176]	; (8002ef0 <_puts_r+0xd0>)
 8002e3e:	429c      	cmp	r4, r3
 8002e40:	d120      	bne.n	8002e84 <_puts_r+0x64>
 8002e42:	686c      	ldr	r4, [r5, #4]
 8002e44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e46:	07db      	lsls	r3, r3, #31
 8002e48:	d405      	bmi.n	8002e56 <_puts_r+0x36>
 8002e4a:	89a3      	ldrh	r3, [r4, #12]
 8002e4c:	0598      	lsls	r0, r3, #22
 8002e4e:	d402      	bmi.n	8002e56 <_puts_r+0x36>
 8002e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e52:	f000 fb9d 	bl	8003590 <__retarget_lock_acquire_recursive>
 8002e56:	89a3      	ldrh	r3, [r4, #12]
 8002e58:	0719      	lsls	r1, r3, #28
 8002e5a:	d51d      	bpl.n	8002e98 <_puts_r+0x78>
 8002e5c:	6923      	ldr	r3, [r4, #16]
 8002e5e:	b1db      	cbz	r3, 8002e98 <_puts_r+0x78>
 8002e60:	3e01      	subs	r6, #1
 8002e62:	68a3      	ldr	r3, [r4, #8]
 8002e64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	60a3      	str	r3, [r4, #8]
 8002e6c:	bb39      	cbnz	r1, 8002ebe <_puts_r+0x9e>
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	da38      	bge.n	8002ee4 <_puts_r+0xc4>
 8002e72:	4622      	mov	r2, r4
 8002e74:	210a      	movs	r1, #10
 8002e76:	4628      	mov	r0, r5
 8002e78:	f000 f916 	bl	80030a8 <__swbuf_r>
 8002e7c:	3001      	adds	r0, #1
 8002e7e:	d011      	beq.n	8002ea4 <_puts_r+0x84>
 8002e80:	250a      	movs	r5, #10
 8002e82:	e011      	b.n	8002ea8 <_puts_r+0x88>
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <_puts_r+0xd4>)
 8002e86:	429c      	cmp	r4, r3
 8002e88:	d101      	bne.n	8002e8e <_puts_r+0x6e>
 8002e8a:	68ac      	ldr	r4, [r5, #8]
 8002e8c:	e7da      	b.n	8002e44 <_puts_r+0x24>
 8002e8e:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <_puts_r+0xd8>)
 8002e90:	429c      	cmp	r4, r3
 8002e92:	bf08      	it	eq
 8002e94:	68ec      	ldreq	r4, [r5, #12]
 8002e96:	e7d5      	b.n	8002e44 <_puts_r+0x24>
 8002e98:	4621      	mov	r1, r4
 8002e9a:	4628      	mov	r0, r5
 8002e9c:	f000 f956 	bl	800314c <__swsetup_r>
 8002ea0:	2800      	cmp	r0, #0
 8002ea2:	d0dd      	beq.n	8002e60 <_puts_r+0x40>
 8002ea4:	f04f 35ff 	mov.w	r5, #4294967295
 8002ea8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002eaa:	07da      	lsls	r2, r3, #31
 8002eac:	d405      	bmi.n	8002eba <_puts_r+0x9a>
 8002eae:	89a3      	ldrh	r3, [r4, #12]
 8002eb0:	059b      	lsls	r3, r3, #22
 8002eb2:	d402      	bmi.n	8002eba <_puts_r+0x9a>
 8002eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002eb6:	f000 fb6c 	bl	8003592 <__retarget_lock_release_recursive>
 8002eba:	4628      	mov	r0, r5
 8002ebc:	bd70      	pop	{r4, r5, r6, pc}
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	da04      	bge.n	8002ecc <_puts_r+0xac>
 8002ec2:	69a2      	ldr	r2, [r4, #24]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	dc06      	bgt.n	8002ed6 <_puts_r+0xb6>
 8002ec8:	290a      	cmp	r1, #10
 8002eca:	d004      	beq.n	8002ed6 <_puts_r+0xb6>
 8002ecc:	6823      	ldr	r3, [r4, #0]
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	6022      	str	r2, [r4, #0]
 8002ed2:	7019      	strb	r1, [r3, #0]
 8002ed4:	e7c5      	b.n	8002e62 <_puts_r+0x42>
 8002ed6:	4622      	mov	r2, r4
 8002ed8:	4628      	mov	r0, r5
 8002eda:	f000 f8e5 	bl	80030a8 <__swbuf_r>
 8002ede:	3001      	adds	r0, #1
 8002ee0:	d1bf      	bne.n	8002e62 <_puts_r+0x42>
 8002ee2:	e7df      	b.n	8002ea4 <_puts_r+0x84>
 8002ee4:	250a      	movs	r5, #10
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	6022      	str	r2, [r4, #0]
 8002eec:	701d      	strb	r5, [r3, #0]
 8002eee:	e7db      	b.n	8002ea8 <_puts_r+0x88>
 8002ef0:	08004474 	.word	0x08004474
 8002ef4:	08004494 	.word	0x08004494
 8002ef8:	08004454 	.word	0x08004454

08002efc <puts>:
 8002efc:	4b02      	ldr	r3, [pc, #8]	; (8002f08 <puts+0xc>)
 8002efe:	4601      	mov	r1, r0
 8002f00:	6818      	ldr	r0, [r3, #0]
 8002f02:	f7ff bf8d 	b.w	8002e20 <_puts_r>
 8002f06:	bf00      	nop
 8002f08:	20000070 	.word	0x20000070

08002f0c <setbuf>:
 8002f0c:	2900      	cmp	r1, #0
 8002f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f12:	bf0c      	ite	eq
 8002f14:	2202      	moveq	r2, #2
 8002f16:	2200      	movne	r2, #0
 8002f18:	f000 b800 	b.w	8002f1c <setvbuf>

08002f1c <setvbuf>:
 8002f1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002f20:	461d      	mov	r5, r3
 8002f22:	4b5d      	ldr	r3, [pc, #372]	; (8003098 <setvbuf+0x17c>)
 8002f24:	4604      	mov	r4, r0
 8002f26:	681f      	ldr	r7, [r3, #0]
 8002f28:	460e      	mov	r6, r1
 8002f2a:	4690      	mov	r8, r2
 8002f2c:	b127      	cbz	r7, 8002f38 <setvbuf+0x1c>
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	b913      	cbnz	r3, 8002f38 <setvbuf+0x1c>
 8002f32:	4638      	mov	r0, r7
 8002f34:	f000 fa8e 	bl	8003454 <__sinit>
 8002f38:	4b58      	ldr	r3, [pc, #352]	; (800309c <setvbuf+0x180>)
 8002f3a:	429c      	cmp	r4, r3
 8002f3c:	d167      	bne.n	800300e <setvbuf+0xf2>
 8002f3e:	687c      	ldr	r4, [r7, #4]
 8002f40:	f1b8 0f02 	cmp.w	r8, #2
 8002f44:	d006      	beq.n	8002f54 <setvbuf+0x38>
 8002f46:	f1b8 0f01 	cmp.w	r8, #1
 8002f4a:	f200 809f 	bhi.w	800308c <setvbuf+0x170>
 8002f4e:	2d00      	cmp	r5, #0
 8002f50:	f2c0 809c 	blt.w	800308c <setvbuf+0x170>
 8002f54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f56:	07db      	lsls	r3, r3, #31
 8002f58:	d405      	bmi.n	8002f66 <setvbuf+0x4a>
 8002f5a:	89a3      	ldrh	r3, [r4, #12]
 8002f5c:	0598      	lsls	r0, r3, #22
 8002f5e:	d402      	bmi.n	8002f66 <setvbuf+0x4a>
 8002f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f62:	f000 fb15 	bl	8003590 <__retarget_lock_acquire_recursive>
 8002f66:	4621      	mov	r1, r4
 8002f68:	4638      	mov	r0, r7
 8002f6a:	f000 f9df 	bl	800332c <_fflush_r>
 8002f6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f70:	b141      	cbz	r1, 8002f84 <setvbuf+0x68>
 8002f72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f76:	4299      	cmp	r1, r3
 8002f78:	d002      	beq.n	8002f80 <setvbuf+0x64>
 8002f7a:	4638      	mov	r0, r7
 8002f7c:	f000 fb78 	bl	8003670 <_free_r>
 8002f80:	2300      	movs	r3, #0
 8002f82:	6363      	str	r3, [r4, #52]	; 0x34
 8002f84:	2300      	movs	r3, #0
 8002f86:	61a3      	str	r3, [r4, #24]
 8002f88:	6063      	str	r3, [r4, #4]
 8002f8a:	89a3      	ldrh	r3, [r4, #12]
 8002f8c:	0619      	lsls	r1, r3, #24
 8002f8e:	d503      	bpl.n	8002f98 <setvbuf+0x7c>
 8002f90:	4638      	mov	r0, r7
 8002f92:	6921      	ldr	r1, [r4, #16]
 8002f94:	f000 fb6c 	bl	8003670 <_free_r>
 8002f98:	89a3      	ldrh	r3, [r4, #12]
 8002f9a:	f1b8 0f02 	cmp.w	r8, #2
 8002f9e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002fa2:	f023 0303 	bic.w	r3, r3, #3
 8002fa6:	81a3      	strh	r3, [r4, #12]
 8002fa8:	d06c      	beq.n	8003084 <setvbuf+0x168>
 8002faa:	ab01      	add	r3, sp, #4
 8002fac:	466a      	mov	r2, sp
 8002fae:	4621      	mov	r1, r4
 8002fb0:	4638      	mov	r0, r7
 8002fb2:	f000 faef 	bl	8003594 <__swhatbuf_r>
 8002fb6:	89a3      	ldrh	r3, [r4, #12]
 8002fb8:	4318      	orrs	r0, r3
 8002fba:	81a0      	strh	r0, [r4, #12]
 8002fbc:	2d00      	cmp	r5, #0
 8002fbe:	d130      	bne.n	8003022 <setvbuf+0x106>
 8002fc0:	9d00      	ldr	r5, [sp, #0]
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	f000 fb4c 	bl	8003660 <malloc>
 8002fc8:	4606      	mov	r6, r0
 8002fca:	2800      	cmp	r0, #0
 8002fcc:	d155      	bne.n	800307a <setvbuf+0x15e>
 8002fce:	f8dd 9000 	ldr.w	r9, [sp]
 8002fd2:	45a9      	cmp	r9, r5
 8002fd4:	d14a      	bne.n	800306c <setvbuf+0x150>
 8002fd6:	f04f 35ff 	mov.w	r5, #4294967295
 8002fda:	2200      	movs	r2, #0
 8002fdc:	60a2      	str	r2, [r4, #8]
 8002fde:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002fe2:	6022      	str	r2, [r4, #0]
 8002fe4:	6122      	str	r2, [r4, #16]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fec:	6162      	str	r2, [r4, #20]
 8002fee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ff0:	f043 0302 	orr.w	r3, r3, #2
 8002ff4:	07d2      	lsls	r2, r2, #31
 8002ff6:	81a3      	strh	r3, [r4, #12]
 8002ff8:	d405      	bmi.n	8003006 <setvbuf+0xea>
 8002ffa:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002ffe:	d102      	bne.n	8003006 <setvbuf+0xea>
 8003000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003002:	f000 fac6 	bl	8003592 <__retarget_lock_release_recursive>
 8003006:	4628      	mov	r0, r5
 8003008:	b003      	add	sp, #12
 800300a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800300e:	4b24      	ldr	r3, [pc, #144]	; (80030a0 <setvbuf+0x184>)
 8003010:	429c      	cmp	r4, r3
 8003012:	d101      	bne.n	8003018 <setvbuf+0xfc>
 8003014:	68bc      	ldr	r4, [r7, #8]
 8003016:	e793      	b.n	8002f40 <setvbuf+0x24>
 8003018:	4b22      	ldr	r3, [pc, #136]	; (80030a4 <setvbuf+0x188>)
 800301a:	429c      	cmp	r4, r3
 800301c:	bf08      	it	eq
 800301e:	68fc      	ldreq	r4, [r7, #12]
 8003020:	e78e      	b.n	8002f40 <setvbuf+0x24>
 8003022:	2e00      	cmp	r6, #0
 8003024:	d0cd      	beq.n	8002fc2 <setvbuf+0xa6>
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	b913      	cbnz	r3, 8003030 <setvbuf+0x114>
 800302a:	4638      	mov	r0, r7
 800302c:	f000 fa12 	bl	8003454 <__sinit>
 8003030:	f1b8 0f01 	cmp.w	r8, #1
 8003034:	bf08      	it	eq
 8003036:	89a3      	ldrheq	r3, [r4, #12]
 8003038:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800303c:	bf04      	itt	eq
 800303e:	f043 0301 	orreq.w	r3, r3, #1
 8003042:	81a3      	strheq	r3, [r4, #12]
 8003044:	89a2      	ldrh	r2, [r4, #12]
 8003046:	6026      	str	r6, [r4, #0]
 8003048:	f012 0308 	ands.w	r3, r2, #8
 800304c:	d01c      	beq.n	8003088 <setvbuf+0x16c>
 800304e:	07d3      	lsls	r3, r2, #31
 8003050:	bf41      	itttt	mi
 8003052:	2300      	movmi	r3, #0
 8003054:	426d      	negmi	r5, r5
 8003056:	60a3      	strmi	r3, [r4, #8]
 8003058:	61a5      	strmi	r5, [r4, #24]
 800305a:	bf58      	it	pl
 800305c:	60a5      	strpl	r5, [r4, #8]
 800305e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003060:	f015 0501 	ands.w	r5, r5, #1
 8003064:	d115      	bne.n	8003092 <setvbuf+0x176>
 8003066:	f412 7f00 	tst.w	r2, #512	; 0x200
 800306a:	e7c8      	b.n	8002ffe <setvbuf+0xe2>
 800306c:	4648      	mov	r0, r9
 800306e:	f000 faf7 	bl	8003660 <malloc>
 8003072:	4606      	mov	r6, r0
 8003074:	2800      	cmp	r0, #0
 8003076:	d0ae      	beq.n	8002fd6 <setvbuf+0xba>
 8003078:	464d      	mov	r5, r9
 800307a:	89a3      	ldrh	r3, [r4, #12]
 800307c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003080:	81a3      	strh	r3, [r4, #12]
 8003082:	e7d0      	b.n	8003026 <setvbuf+0x10a>
 8003084:	2500      	movs	r5, #0
 8003086:	e7a8      	b.n	8002fda <setvbuf+0xbe>
 8003088:	60a3      	str	r3, [r4, #8]
 800308a:	e7e8      	b.n	800305e <setvbuf+0x142>
 800308c:	f04f 35ff 	mov.w	r5, #4294967295
 8003090:	e7b9      	b.n	8003006 <setvbuf+0xea>
 8003092:	2500      	movs	r5, #0
 8003094:	e7b7      	b.n	8003006 <setvbuf+0xea>
 8003096:	bf00      	nop
 8003098:	20000070 	.word	0x20000070
 800309c:	08004474 	.word	0x08004474
 80030a0:	08004494 	.word	0x08004494
 80030a4:	08004454 	.word	0x08004454

080030a8 <__swbuf_r>:
 80030a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030aa:	460e      	mov	r6, r1
 80030ac:	4614      	mov	r4, r2
 80030ae:	4605      	mov	r5, r0
 80030b0:	b118      	cbz	r0, 80030ba <__swbuf_r+0x12>
 80030b2:	6983      	ldr	r3, [r0, #24]
 80030b4:	b90b      	cbnz	r3, 80030ba <__swbuf_r+0x12>
 80030b6:	f000 f9cd 	bl	8003454 <__sinit>
 80030ba:	4b21      	ldr	r3, [pc, #132]	; (8003140 <__swbuf_r+0x98>)
 80030bc:	429c      	cmp	r4, r3
 80030be:	d12b      	bne.n	8003118 <__swbuf_r+0x70>
 80030c0:	686c      	ldr	r4, [r5, #4]
 80030c2:	69a3      	ldr	r3, [r4, #24]
 80030c4:	60a3      	str	r3, [r4, #8]
 80030c6:	89a3      	ldrh	r3, [r4, #12]
 80030c8:	071a      	lsls	r2, r3, #28
 80030ca:	d52f      	bpl.n	800312c <__swbuf_r+0x84>
 80030cc:	6923      	ldr	r3, [r4, #16]
 80030ce:	b36b      	cbz	r3, 800312c <__swbuf_r+0x84>
 80030d0:	6923      	ldr	r3, [r4, #16]
 80030d2:	6820      	ldr	r0, [r4, #0]
 80030d4:	b2f6      	uxtb	r6, r6
 80030d6:	1ac0      	subs	r0, r0, r3
 80030d8:	6963      	ldr	r3, [r4, #20]
 80030da:	4637      	mov	r7, r6
 80030dc:	4283      	cmp	r3, r0
 80030de:	dc04      	bgt.n	80030ea <__swbuf_r+0x42>
 80030e0:	4621      	mov	r1, r4
 80030e2:	4628      	mov	r0, r5
 80030e4:	f000 f922 	bl	800332c <_fflush_r>
 80030e8:	bb30      	cbnz	r0, 8003138 <__swbuf_r+0x90>
 80030ea:	68a3      	ldr	r3, [r4, #8]
 80030ec:	3001      	adds	r0, #1
 80030ee:	3b01      	subs	r3, #1
 80030f0:	60a3      	str	r3, [r4, #8]
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	6022      	str	r2, [r4, #0]
 80030f8:	701e      	strb	r6, [r3, #0]
 80030fa:	6963      	ldr	r3, [r4, #20]
 80030fc:	4283      	cmp	r3, r0
 80030fe:	d004      	beq.n	800310a <__swbuf_r+0x62>
 8003100:	89a3      	ldrh	r3, [r4, #12]
 8003102:	07db      	lsls	r3, r3, #31
 8003104:	d506      	bpl.n	8003114 <__swbuf_r+0x6c>
 8003106:	2e0a      	cmp	r6, #10
 8003108:	d104      	bne.n	8003114 <__swbuf_r+0x6c>
 800310a:	4621      	mov	r1, r4
 800310c:	4628      	mov	r0, r5
 800310e:	f000 f90d 	bl	800332c <_fflush_r>
 8003112:	b988      	cbnz	r0, 8003138 <__swbuf_r+0x90>
 8003114:	4638      	mov	r0, r7
 8003116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003118:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <__swbuf_r+0x9c>)
 800311a:	429c      	cmp	r4, r3
 800311c:	d101      	bne.n	8003122 <__swbuf_r+0x7a>
 800311e:	68ac      	ldr	r4, [r5, #8]
 8003120:	e7cf      	b.n	80030c2 <__swbuf_r+0x1a>
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <__swbuf_r+0xa0>)
 8003124:	429c      	cmp	r4, r3
 8003126:	bf08      	it	eq
 8003128:	68ec      	ldreq	r4, [r5, #12]
 800312a:	e7ca      	b.n	80030c2 <__swbuf_r+0x1a>
 800312c:	4621      	mov	r1, r4
 800312e:	4628      	mov	r0, r5
 8003130:	f000 f80c 	bl	800314c <__swsetup_r>
 8003134:	2800      	cmp	r0, #0
 8003136:	d0cb      	beq.n	80030d0 <__swbuf_r+0x28>
 8003138:	f04f 37ff 	mov.w	r7, #4294967295
 800313c:	e7ea      	b.n	8003114 <__swbuf_r+0x6c>
 800313e:	bf00      	nop
 8003140:	08004474 	.word	0x08004474
 8003144:	08004494 	.word	0x08004494
 8003148:	08004454 	.word	0x08004454

0800314c <__swsetup_r>:
 800314c:	4b32      	ldr	r3, [pc, #200]	; (8003218 <__swsetup_r+0xcc>)
 800314e:	b570      	push	{r4, r5, r6, lr}
 8003150:	681d      	ldr	r5, [r3, #0]
 8003152:	4606      	mov	r6, r0
 8003154:	460c      	mov	r4, r1
 8003156:	b125      	cbz	r5, 8003162 <__swsetup_r+0x16>
 8003158:	69ab      	ldr	r3, [r5, #24]
 800315a:	b913      	cbnz	r3, 8003162 <__swsetup_r+0x16>
 800315c:	4628      	mov	r0, r5
 800315e:	f000 f979 	bl	8003454 <__sinit>
 8003162:	4b2e      	ldr	r3, [pc, #184]	; (800321c <__swsetup_r+0xd0>)
 8003164:	429c      	cmp	r4, r3
 8003166:	d10f      	bne.n	8003188 <__swsetup_r+0x3c>
 8003168:	686c      	ldr	r4, [r5, #4]
 800316a:	89a3      	ldrh	r3, [r4, #12]
 800316c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003170:	0719      	lsls	r1, r3, #28
 8003172:	d42c      	bmi.n	80031ce <__swsetup_r+0x82>
 8003174:	06dd      	lsls	r5, r3, #27
 8003176:	d411      	bmi.n	800319c <__swsetup_r+0x50>
 8003178:	2309      	movs	r3, #9
 800317a:	6033      	str	r3, [r6, #0]
 800317c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003180:	f04f 30ff 	mov.w	r0, #4294967295
 8003184:	81a3      	strh	r3, [r4, #12]
 8003186:	e03e      	b.n	8003206 <__swsetup_r+0xba>
 8003188:	4b25      	ldr	r3, [pc, #148]	; (8003220 <__swsetup_r+0xd4>)
 800318a:	429c      	cmp	r4, r3
 800318c:	d101      	bne.n	8003192 <__swsetup_r+0x46>
 800318e:	68ac      	ldr	r4, [r5, #8]
 8003190:	e7eb      	b.n	800316a <__swsetup_r+0x1e>
 8003192:	4b24      	ldr	r3, [pc, #144]	; (8003224 <__swsetup_r+0xd8>)
 8003194:	429c      	cmp	r4, r3
 8003196:	bf08      	it	eq
 8003198:	68ec      	ldreq	r4, [r5, #12]
 800319a:	e7e6      	b.n	800316a <__swsetup_r+0x1e>
 800319c:	0758      	lsls	r0, r3, #29
 800319e:	d512      	bpl.n	80031c6 <__swsetup_r+0x7a>
 80031a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031a2:	b141      	cbz	r1, 80031b6 <__swsetup_r+0x6a>
 80031a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031a8:	4299      	cmp	r1, r3
 80031aa:	d002      	beq.n	80031b2 <__swsetup_r+0x66>
 80031ac:	4630      	mov	r0, r6
 80031ae:	f000 fa5f 	bl	8003670 <_free_r>
 80031b2:	2300      	movs	r3, #0
 80031b4:	6363      	str	r3, [r4, #52]	; 0x34
 80031b6:	89a3      	ldrh	r3, [r4, #12]
 80031b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80031bc:	81a3      	strh	r3, [r4, #12]
 80031be:	2300      	movs	r3, #0
 80031c0:	6063      	str	r3, [r4, #4]
 80031c2:	6923      	ldr	r3, [r4, #16]
 80031c4:	6023      	str	r3, [r4, #0]
 80031c6:	89a3      	ldrh	r3, [r4, #12]
 80031c8:	f043 0308 	orr.w	r3, r3, #8
 80031cc:	81a3      	strh	r3, [r4, #12]
 80031ce:	6923      	ldr	r3, [r4, #16]
 80031d0:	b94b      	cbnz	r3, 80031e6 <__swsetup_r+0x9a>
 80031d2:	89a3      	ldrh	r3, [r4, #12]
 80031d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80031d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031dc:	d003      	beq.n	80031e6 <__swsetup_r+0x9a>
 80031de:	4621      	mov	r1, r4
 80031e0:	4630      	mov	r0, r6
 80031e2:	f000 f9fd 	bl	80035e0 <__smakebuf_r>
 80031e6:	89a0      	ldrh	r0, [r4, #12]
 80031e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80031ec:	f010 0301 	ands.w	r3, r0, #1
 80031f0:	d00a      	beq.n	8003208 <__swsetup_r+0xbc>
 80031f2:	2300      	movs	r3, #0
 80031f4:	60a3      	str	r3, [r4, #8]
 80031f6:	6963      	ldr	r3, [r4, #20]
 80031f8:	425b      	negs	r3, r3
 80031fa:	61a3      	str	r3, [r4, #24]
 80031fc:	6923      	ldr	r3, [r4, #16]
 80031fe:	b943      	cbnz	r3, 8003212 <__swsetup_r+0xc6>
 8003200:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003204:	d1ba      	bne.n	800317c <__swsetup_r+0x30>
 8003206:	bd70      	pop	{r4, r5, r6, pc}
 8003208:	0781      	lsls	r1, r0, #30
 800320a:	bf58      	it	pl
 800320c:	6963      	ldrpl	r3, [r4, #20]
 800320e:	60a3      	str	r3, [r4, #8]
 8003210:	e7f4      	b.n	80031fc <__swsetup_r+0xb0>
 8003212:	2000      	movs	r0, #0
 8003214:	e7f7      	b.n	8003206 <__swsetup_r+0xba>
 8003216:	bf00      	nop
 8003218:	20000070 	.word	0x20000070
 800321c:	08004474 	.word	0x08004474
 8003220:	08004494 	.word	0x08004494
 8003224:	08004454 	.word	0x08004454

08003228 <__sflush_r>:
 8003228:	898a      	ldrh	r2, [r1, #12]
 800322a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800322c:	4605      	mov	r5, r0
 800322e:	0710      	lsls	r0, r2, #28
 8003230:	460c      	mov	r4, r1
 8003232:	d457      	bmi.n	80032e4 <__sflush_r+0xbc>
 8003234:	684b      	ldr	r3, [r1, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	dc04      	bgt.n	8003244 <__sflush_r+0x1c>
 800323a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800323c:	2b00      	cmp	r3, #0
 800323e:	dc01      	bgt.n	8003244 <__sflush_r+0x1c>
 8003240:	2000      	movs	r0, #0
 8003242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003244:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003246:	2e00      	cmp	r6, #0
 8003248:	d0fa      	beq.n	8003240 <__sflush_r+0x18>
 800324a:	2300      	movs	r3, #0
 800324c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003250:	682f      	ldr	r7, [r5, #0]
 8003252:	602b      	str	r3, [r5, #0]
 8003254:	d032      	beq.n	80032bc <__sflush_r+0x94>
 8003256:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003258:	89a3      	ldrh	r3, [r4, #12]
 800325a:	075a      	lsls	r2, r3, #29
 800325c:	d505      	bpl.n	800326a <__sflush_r+0x42>
 800325e:	6863      	ldr	r3, [r4, #4]
 8003260:	1ac0      	subs	r0, r0, r3
 8003262:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003264:	b10b      	cbz	r3, 800326a <__sflush_r+0x42>
 8003266:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003268:	1ac0      	subs	r0, r0, r3
 800326a:	2300      	movs	r3, #0
 800326c:	4602      	mov	r2, r0
 800326e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003270:	4628      	mov	r0, r5
 8003272:	6a21      	ldr	r1, [r4, #32]
 8003274:	47b0      	blx	r6
 8003276:	1c43      	adds	r3, r0, #1
 8003278:	89a3      	ldrh	r3, [r4, #12]
 800327a:	d106      	bne.n	800328a <__sflush_r+0x62>
 800327c:	6829      	ldr	r1, [r5, #0]
 800327e:	291d      	cmp	r1, #29
 8003280:	d82c      	bhi.n	80032dc <__sflush_r+0xb4>
 8003282:	4a29      	ldr	r2, [pc, #164]	; (8003328 <__sflush_r+0x100>)
 8003284:	40ca      	lsrs	r2, r1
 8003286:	07d6      	lsls	r6, r2, #31
 8003288:	d528      	bpl.n	80032dc <__sflush_r+0xb4>
 800328a:	2200      	movs	r2, #0
 800328c:	6062      	str	r2, [r4, #4]
 800328e:	6922      	ldr	r2, [r4, #16]
 8003290:	04d9      	lsls	r1, r3, #19
 8003292:	6022      	str	r2, [r4, #0]
 8003294:	d504      	bpl.n	80032a0 <__sflush_r+0x78>
 8003296:	1c42      	adds	r2, r0, #1
 8003298:	d101      	bne.n	800329e <__sflush_r+0x76>
 800329a:	682b      	ldr	r3, [r5, #0]
 800329c:	b903      	cbnz	r3, 80032a0 <__sflush_r+0x78>
 800329e:	6560      	str	r0, [r4, #84]	; 0x54
 80032a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032a2:	602f      	str	r7, [r5, #0]
 80032a4:	2900      	cmp	r1, #0
 80032a6:	d0cb      	beq.n	8003240 <__sflush_r+0x18>
 80032a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032ac:	4299      	cmp	r1, r3
 80032ae:	d002      	beq.n	80032b6 <__sflush_r+0x8e>
 80032b0:	4628      	mov	r0, r5
 80032b2:	f000 f9dd 	bl	8003670 <_free_r>
 80032b6:	2000      	movs	r0, #0
 80032b8:	6360      	str	r0, [r4, #52]	; 0x34
 80032ba:	e7c2      	b.n	8003242 <__sflush_r+0x1a>
 80032bc:	6a21      	ldr	r1, [r4, #32]
 80032be:	2301      	movs	r3, #1
 80032c0:	4628      	mov	r0, r5
 80032c2:	47b0      	blx	r6
 80032c4:	1c41      	adds	r1, r0, #1
 80032c6:	d1c7      	bne.n	8003258 <__sflush_r+0x30>
 80032c8:	682b      	ldr	r3, [r5, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0c4      	beq.n	8003258 <__sflush_r+0x30>
 80032ce:	2b1d      	cmp	r3, #29
 80032d0:	d001      	beq.n	80032d6 <__sflush_r+0xae>
 80032d2:	2b16      	cmp	r3, #22
 80032d4:	d101      	bne.n	80032da <__sflush_r+0xb2>
 80032d6:	602f      	str	r7, [r5, #0]
 80032d8:	e7b2      	b.n	8003240 <__sflush_r+0x18>
 80032da:	89a3      	ldrh	r3, [r4, #12]
 80032dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032e0:	81a3      	strh	r3, [r4, #12]
 80032e2:	e7ae      	b.n	8003242 <__sflush_r+0x1a>
 80032e4:	690f      	ldr	r7, [r1, #16]
 80032e6:	2f00      	cmp	r7, #0
 80032e8:	d0aa      	beq.n	8003240 <__sflush_r+0x18>
 80032ea:	0793      	lsls	r3, r2, #30
 80032ec:	bf18      	it	ne
 80032ee:	2300      	movne	r3, #0
 80032f0:	680e      	ldr	r6, [r1, #0]
 80032f2:	bf08      	it	eq
 80032f4:	694b      	ldreq	r3, [r1, #20]
 80032f6:	1bf6      	subs	r6, r6, r7
 80032f8:	600f      	str	r7, [r1, #0]
 80032fa:	608b      	str	r3, [r1, #8]
 80032fc:	2e00      	cmp	r6, #0
 80032fe:	dd9f      	ble.n	8003240 <__sflush_r+0x18>
 8003300:	4633      	mov	r3, r6
 8003302:	463a      	mov	r2, r7
 8003304:	4628      	mov	r0, r5
 8003306:	6a21      	ldr	r1, [r4, #32]
 8003308:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800330c:	47e0      	blx	ip
 800330e:	2800      	cmp	r0, #0
 8003310:	dc06      	bgt.n	8003320 <__sflush_r+0xf8>
 8003312:	89a3      	ldrh	r3, [r4, #12]
 8003314:	f04f 30ff 	mov.w	r0, #4294967295
 8003318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800331c:	81a3      	strh	r3, [r4, #12]
 800331e:	e790      	b.n	8003242 <__sflush_r+0x1a>
 8003320:	4407      	add	r7, r0
 8003322:	1a36      	subs	r6, r6, r0
 8003324:	e7ea      	b.n	80032fc <__sflush_r+0xd4>
 8003326:	bf00      	nop
 8003328:	20400001 	.word	0x20400001

0800332c <_fflush_r>:
 800332c:	b538      	push	{r3, r4, r5, lr}
 800332e:	690b      	ldr	r3, [r1, #16]
 8003330:	4605      	mov	r5, r0
 8003332:	460c      	mov	r4, r1
 8003334:	b913      	cbnz	r3, 800333c <_fflush_r+0x10>
 8003336:	2500      	movs	r5, #0
 8003338:	4628      	mov	r0, r5
 800333a:	bd38      	pop	{r3, r4, r5, pc}
 800333c:	b118      	cbz	r0, 8003346 <_fflush_r+0x1a>
 800333e:	6983      	ldr	r3, [r0, #24]
 8003340:	b90b      	cbnz	r3, 8003346 <_fflush_r+0x1a>
 8003342:	f000 f887 	bl	8003454 <__sinit>
 8003346:	4b14      	ldr	r3, [pc, #80]	; (8003398 <_fflush_r+0x6c>)
 8003348:	429c      	cmp	r4, r3
 800334a:	d11b      	bne.n	8003384 <_fflush_r+0x58>
 800334c:	686c      	ldr	r4, [r5, #4]
 800334e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0ef      	beq.n	8003336 <_fflush_r+0xa>
 8003356:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003358:	07d0      	lsls	r0, r2, #31
 800335a:	d404      	bmi.n	8003366 <_fflush_r+0x3a>
 800335c:	0599      	lsls	r1, r3, #22
 800335e:	d402      	bmi.n	8003366 <_fflush_r+0x3a>
 8003360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003362:	f000 f915 	bl	8003590 <__retarget_lock_acquire_recursive>
 8003366:	4628      	mov	r0, r5
 8003368:	4621      	mov	r1, r4
 800336a:	f7ff ff5d 	bl	8003228 <__sflush_r>
 800336e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003370:	4605      	mov	r5, r0
 8003372:	07da      	lsls	r2, r3, #31
 8003374:	d4e0      	bmi.n	8003338 <_fflush_r+0xc>
 8003376:	89a3      	ldrh	r3, [r4, #12]
 8003378:	059b      	lsls	r3, r3, #22
 800337a:	d4dd      	bmi.n	8003338 <_fflush_r+0xc>
 800337c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800337e:	f000 f908 	bl	8003592 <__retarget_lock_release_recursive>
 8003382:	e7d9      	b.n	8003338 <_fflush_r+0xc>
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <_fflush_r+0x70>)
 8003386:	429c      	cmp	r4, r3
 8003388:	d101      	bne.n	800338e <_fflush_r+0x62>
 800338a:	68ac      	ldr	r4, [r5, #8]
 800338c:	e7df      	b.n	800334e <_fflush_r+0x22>
 800338e:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <_fflush_r+0x74>)
 8003390:	429c      	cmp	r4, r3
 8003392:	bf08      	it	eq
 8003394:	68ec      	ldreq	r4, [r5, #12]
 8003396:	e7da      	b.n	800334e <_fflush_r+0x22>
 8003398:	08004474 	.word	0x08004474
 800339c:	08004494 	.word	0x08004494
 80033a0:	08004454 	.word	0x08004454

080033a4 <std>:
 80033a4:	2300      	movs	r3, #0
 80033a6:	b510      	push	{r4, lr}
 80033a8:	4604      	mov	r4, r0
 80033aa:	e9c0 3300 	strd	r3, r3, [r0]
 80033ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033b2:	6083      	str	r3, [r0, #8]
 80033b4:	8181      	strh	r1, [r0, #12]
 80033b6:	6643      	str	r3, [r0, #100]	; 0x64
 80033b8:	81c2      	strh	r2, [r0, #14]
 80033ba:	6183      	str	r3, [r0, #24]
 80033bc:	4619      	mov	r1, r3
 80033be:	2208      	movs	r2, #8
 80033c0:	305c      	adds	r0, #92	; 0x5c
 80033c2:	f7ff fd0d 	bl	8002de0 <memset>
 80033c6:	4b05      	ldr	r3, [pc, #20]	; (80033dc <std+0x38>)
 80033c8:	6224      	str	r4, [r4, #32]
 80033ca:	6263      	str	r3, [r4, #36]	; 0x24
 80033cc:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <std+0x3c>)
 80033ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80033d0:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <std+0x40>)
 80033d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033d4:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <std+0x44>)
 80033d6:	6323      	str	r3, [r4, #48]	; 0x30
 80033d8:	bd10      	pop	{r4, pc}
 80033da:	bf00      	nop
 80033dc:	08003e25 	.word	0x08003e25
 80033e0:	08003e47 	.word	0x08003e47
 80033e4:	08003e7f 	.word	0x08003e7f
 80033e8:	08003ea3 	.word	0x08003ea3

080033ec <_cleanup_r>:
 80033ec:	4901      	ldr	r1, [pc, #4]	; (80033f4 <_cleanup_r+0x8>)
 80033ee:	f000 b8af 	b.w	8003550 <_fwalk_reent>
 80033f2:	bf00      	nop
 80033f4:	0800332d 	.word	0x0800332d

080033f8 <__sfmoreglue>:
 80033f8:	2268      	movs	r2, #104	; 0x68
 80033fa:	b570      	push	{r4, r5, r6, lr}
 80033fc:	1e4d      	subs	r5, r1, #1
 80033fe:	4355      	muls	r5, r2
 8003400:	460e      	mov	r6, r1
 8003402:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003406:	f000 f99b 	bl	8003740 <_malloc_r>
 800340a:	4604      	mov	r4, r0
 800340c:	b140      	cbz	r0, 8003420 <__sfmoreglue+0x28>
 800340e:	2100      	movs	r1, #0
 8003410:	e9c0 1600 	strd	r1, r6, [r0]
 8003414:	300c      	adds	r0, #12
 8003416:	60a0      	str	r0, [r4, #8]
 8003418:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800341c:	f7ff fce0 	bl	8002de0 <memset>
 8003420:	4620      	mov	r0, r4
 8003422:	bd70      	pop	{r4, r5, r6, pc}

08003424 <__sfp_lock_acquire>:
 8003424:	4801      	ldr	r0, [pc, #4]	; (800342c <__sfp_lock_acquire+0x8>)
 8003426:	f000 b8b3 	b.w	8003590 <__retarget_lock_acquire_recursive>
 800342a:	bf00      	nop
 800342c:	20000461 	.word	0x20000461

08003430 <__sfp_lock_release>:
 8003430:	4801      	ldr	r0, [pc, #4]	; (8003438 <__sfp_lock_release+0x8>)
 8003432:	f000 b8ae 	b.w	8003592 <__retarget_lock_release_recursive>
 8003436:	bf00      	nop
 8003438:	20000461 	.word	0x20000461

0800343c <__sinit_lock_acquire>:
 800343c:	4801      	ldr	r0, [pc, #4]	; (8003444 <__sinit_lock_acquire+0x8>)
 800343e:	f000 b8a7 	b.w	8003590 <__retarget_lock_acquire_recursive>
 8003442:	bf00      	nop
 8003444:	20000462 	.word	0x20000462

08003448 <__sinit_lock_release>:
 8003448:	4801      	ldr	r0, [pc, #4]	; (8003450 <__sinit_lock_release+0x8>)
 800344a:	f000 b8a2 	b.w	8003592 <__retarget_lock_release_recursive>
 800344e:	bf00      	nop
 8003450:	20000462 	.word	0x20000462

08003454 <__sinit>:
 8003454:	b510      	push	{r4, lr}
 8003456:	4604      	mov	r4, r0
 8003458:	f7ff fff0 	bl	800343c <__sinit_lock_acquire>
 800345c:	69a3      	ldr	r3, [r4, #24]
 800345e:	b11b      	cbz	r3, 8003468 <__sinit+0x14>
 8003460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003464:	f7ff bff0 	b.w	8003448 <__sinit_lock_release>
 8003468:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800346c:	6523      	str	r3, [r4, #80]	; 0x50
 800346e:	4b13      	ldr	r3, [pc, #76]	; (80034bc <__sinit+0x68>)
 8003470:	4a13      	ldr	r2, [pc, #76]	; (80034c0 <__sinit+0x6c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	62a2      	str	r2, [r4, #40]	; 0x28
 8003476:	42a3      	cmp	r3, r4
 8003478:	bf08      	it	eq
 800347a:	2301      	moveq	r3, #1
 800347c:	4620      	mov	r0, r4
 800347e:	bf08      	it	eq
 8003480:	61a3      	streq	r3, [r4, #24]
 8003482:	f000 f81f 	bl	80034c4 <__sfp>
 8003486:	6060      	str	r0, [r4, #4]
 8003488:	4620      	mov	r0, r4
 800348a:	f000 f81b 	bl	80034c4 <__sfp>
 800348e:	60a0      	str	r0, [r4, #8]
 8003490:	4620      	mov	r0, r4
 8003492:	f000 f817 	bl	80034c4 <__sfp>
 8003496:	2200      	movs	r2, #0
 8003498:	2104      	movs	r1, #4
 800349a:	60e0      	str	r0, [r4, #12]
 800349c:	6860      	ldr	r0, [r4, #4]
 800349e:	f7ff ff81 	bl	80033a4 <std>
 80034a2:	2201      	movs	r2, #1
 80034a4:	2109      	movs	r1, #9
 80034a6:	68a0      	ldr	r0, [r4, #8]
 80034a8:	f7ff ff7c 	bl	80033a4 <std>
 80034ac:	2202      	movs	r2, #2
 80034ae:	2112      	movs	r1, #18
 80034b0:	68e0      	ldr	r0, [r4, #12]
 80034b2:	f7ff ff77 	bl	80033a4 <std>
 80034b6:	2301      	movs	r3, #1
 80034b8:	61a3      	str	r3, [r4, #24]
 80034ba:	e7d1      	b.n	8003460 <__sinit+0xc>
 80034bc:	08004450 	.word	0x08004450
 80034c0:	080033ed 	.word	0x080033ed

080034c4 <__sfp>:
 80034c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c6:	4607      	mov	r7, r0
 80034c8:	f7ff ffac 	bl	8003424 <__sfp_lock_acquire>
 80034cc:	4b1e      	ldr	r3, [pc, #120]	; (8003548 <__sfp+0x84>)
 80034ce:	681e      	ldr	r6, [r3, #0]
 80034d0:	69b3      	ldr	r3, [r6, #24]
 80034d2:	b913      	cbnz	r3, 80034da <__sfp+0x16>
 80034d4:	4630      	mov	r0, r6
 80034d6:	f7ff ffbd 	bl	8003454 <__sinit>
 80034da:	3648      	adds	r6, #72	; 0x48
 80034dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	d503      	bpl.n	80034ec <__sfp+0x28>
 80034e4:	6833      	ldr	r3, [r6, #0]
 80034e6:	b30b      	cbz	r3, 800352c <__sfp+0x68>
 80034e8:	6836      	ldr	r6, [r6, #0]
 80034ea:	e7f7      	b.n	80034dc <__sfp+0x18>
 80034ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80034f0:	b9d5      	cbnz	r5, 8003528 <__sfp+0x64>
 80034f2:	4b16      	ldr	r3, [pc, #88]	; (800354c <__sfp+0x88>)
 80034f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80034f8:	60e3      	str	r3, [r4, #12]
 80034fa:	6665      	str	r5, [r4, #100]	; 0x64
 80034fc:	f000 f847 	bl	800358e <__retarget_lock_init_recursive>
 8003500:	f7ff ff96 	bl	8003430 <__sfp_lock_release>
 8003504:	2208      	movs	r2, #8
 8003506:	4629      	mov	r1, r5
 8003508:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800350c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003510:	6025      	str	r5, [r4, #0]
 8003512:	61a5      	str	r5, [r4, #24]
 8003514:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003518:	f7ff fc62 	bl	8002de0 <memset>
 800351c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003520:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003524:	4620      	mov	r0, r4
 8003526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003528:	3468      	adds	r4, #104	; 0x68
 800352a:	e7d9      	b.n	80034e0 <__sfp+0x1c>
 800352c:	2104      	movs	r1, #4
 800352e:	4638      	mov	r0, r7
 8003530:	f7ff ff62 	bl	80033f8 <__sfmoreglue>
 8003534:	4604      	mov	r4, r0
 8003536:	6030      	str	r0, [r6, #0]
 8003538:	2800      	cmp	r0, #0
 800353a:	d1d5      	bne.n	80034e8 <__sfp+0x24>
 800353c:	f7ff ff78 	bl	8003430 <__sfp_lock_release>
 8003540:	230c      	movs	r3, #12
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	e7ee      	b.n	8003524 <__sfp+0x60>
 8003546:	bf00      	nop
 8003548:	08004450 	.word	0x08004450
 800354c:	ffff0001 	.word	0xffff0001

08003550 <_fwalk_reent>:
 8003550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003554:	4606      	mov	r6, r0
 8003556:	4688      	mov	r8, r1
 8003558:	2700      	movs	r7, #0
 800355a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800355e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003562:	f1b9 0901 	subs.w	r9, r9, #1
 8003566:	d505      	bpl.n	8003574 <_fwalk_reent+0x24>
 8003568:	6824      	ldr	r4, [r4, #0]
 800356a:	2c00      	cmp	r4, #0
 800356c:	d1f7      	bne.n	800355e <_fwalk_reent+0xe>
 800356e:	4638      	mov	r0, r7
 8003570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003574:	89ab      	ldrh	r3, [r5, #12]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d907      	bls.n	800358a <_fwalk_reent+0x3a>
 800357a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800357e:	3301      	adds	r3, #1
 8003580:	d003      	beq.n	800358a <_fwalk_reent+0x3a>
 8003582:	4629      	mov	r1, r5
 8003584:	4630      	mov	r0, r6
 8003586:	47c0      	blx	r8
 8003588:	4307      	orrs	r7, r0
 800358a:	3568      	adds	r5, #104	; 0x68
 800358c:	e7e9      	b.n	8003562 <_fwalk_reent+0x12>

0800358e <__retarget_lock_init_recursive>:
 800358e:	4770      	bx	lr

08003590 <__retarget_lock_acquire_recursive>:
 8003590:	4770      	bx	lr

08003592 <__retarget_lock_release_recursive>:
 8003592:	4770      	bx	lr

08003594 <__swhatbuf_r>:
 8003594:	b570      	push	{r4, r5, r6, lr}
 8003596:	460e      	mov	r6, r1
 8003598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800359c:	4614      	mov	r4, r2
 800359e:	2900      	cmp	r1, #0
 80035a0:	461d      	mov	r5, r3
 80035a2:	b096      	sub	sp, #88	; 0x58
 80035a4:	da08      	bge.n	80035b8 <__swhatbuf_r+0x24>
 80035a6:	2200      	movs	r2, #0
 80035a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80035ac:	602a      	str	r2, [r5, #0]
 80035ae:	061a      	lsls	r2, r3, #24
 80035b0:	d410      	bmi.n	80035d4 <__swhatbuf_r+0x40>
 80035b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035b6:	e00e      	b.n	80035d6 <__swhatbuf_r+0x42>
 80035b8:	466a      	mov	r2, sp
 80035ba:	f000 fc99 	bl	8003ef0 <_fstat_r>
 80035be:	2800      	cmp	r0, #0
 80035c0:	dbf1      	blt.n	80035a6 <__swhatbuf_r+0x12>
 80035c2:	9a01      	ldr	r2, [sp, #4]
 80035c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80035c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80035cc:	425a      	negs	r2, r3
 80035ce:	415a      	adcs	r2, r3
 80035d0:	602a      	str	r2, [r5, #0]
 80035d2:	e7ee      	b.n	80035b2 <__swhatbuf_r+0x1e>
 80035d4:	2340      	movs	r3, #64	; 0x40
 80035d6:	2000      	movs	r0, #0
 80035d8:	6023      	str	r3, [r4, #0]
 80035da:	b016      	add	sp, #88	; 0x58
 80035dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080035e0 <__smakebuf_r>:
 80035e0:	898b      	ldrh	r3, [r1, #12]
 80035e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80035e4:	079d      	lsls	r5, r3, #30
 80035e6:	4606      	mov	r6, r0
 80035e8:	460c      	mov	r4, r1
 80035ea:	d507      	bpl.n	80035fc <__smakebuf_r+0x1c>
 80035ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80035f0:	6023      	str	r3, [r4, #0]
 80035f2:	6123      	str	r3, [r4, #16]
 80035f4:	2301      	movs	r3, #1
 80035f6:	6163      	str	r3, [r4, #20]
 80035f8:	b002      	add	sp, #8
 80035fa:	bd70      	pop	{r4, r5, r6, pc}
 80035fc:	466a      	mov	r2, sp
 80035fe:	ab01      	add	r3, sp, #4
 8003600:	f7ff ffc8 	bl	8003594 <__swhatbuf_r>
 8003604:	9900      	ldr	r1, [sp, #0]
 8003606:	4605      	mov	r5, r0
 8003608:	4630      	mov	r0, r6
 800360a:	f000 f899 	bl	8003740 <_malloc_r>
 800360e:	b948      	cbnz	r0, 8003624 <__smakebuf_r+0x44>
 8003610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003614:	059a      	lsls	r2, r3, #22
 8003616:	d4ef      	bmi.n	80035f8 <__smakebuf_r+0x18>
 8003618:	f023 0303 	bic.w	r3, r3, #3
 800361c:	f043 0302 	orr.w	r3, r3, #2
 8003620:	81a3      	strh	r3, [r4, #12]
 8003622:	e7e3      	b.n	80035ec <__smakebuf_r+0xc>
 8003624:	4b0d      	ldr	r3, [pc, #52]	; (800365c <__smakebuf_r+0x7c>)
 8003626:	62b3      	str	r3, [r6, #40]	; 0x28
 8003628:	89a3      	ldrh	r3, [r4, #12]
 800362a:	6020      	str	r0, [r4, #0]
 800362c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003630:	81a3      	strh	r3, [r4, #12]
 8003632:	9b00      	ldr	r3, [sp, #0]
 8003634:	6120      	str	r0, [r4, #16]
 8003636:	6163      	str	r3, [r4, #20]
 8003638:	9b01      	ldr	r3, [sp, #4]
 800363a:	b15b      	cbz	r3, 8003654 <__smakebuf_r+0x74>
 800363c:	4630      	mov	r0, r6
 800363e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003642:	f000 fc67 	bl	8003f14 <_isatty_r>
 8003646:	b128      	cbz	r0, 8003654 <__smakebuf_r+0x74>
 8003648:	89a3      	ldrh	r3, [r4, #12]
 800364a:	f023 0303 	bic.w	r3, r3, #3
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	81a3      	strh	r3, [r4, #12]
 8003654:	89a0      	ldrh	r0, [r4, #12]
 8003656:	4305      	orrs	r5, r0
 8003658:	81a5      	strh	r5, [r4, #12]
 800365a:	e7cd      	b.n	80035f8 <__smakebuf_r+0x18>
 800365c:	080033ed 	.word	0x080033ed

08003660 <malloc>:
 8003660:	4b02      	ldr	r3, [pc, #8]	; (800366c <malloc+0xc>)
 8003662:	4601      	mov	r1, r0
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	f000 b86b 	b.w	8003740 <_malloc_r>
 800366a:	bf00      	nop
 800366c:	20000070 	.word	0x20000070

08003670 <_free_r>:
 8003670:	b538      	push	{r3, r4, r5, lr}
 8003672:	4605      	mov	r5, r0
 8003674:	2900      	cmp	r1, #0
 8003676:	d040      	beq.n	80036fa <_free_r+0x8a>
 8003678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800367c:	1f0c      	subs	r4, r1, #4
 800367e:	2b00      	cmp	r3, #0
 8003680:	bfb8      	it	lt
 8003682:	18e4      	addlt	r4, r4, r3
 8003684:	f000 fc76 	bl	8003f74 <__malloc_lock>
 8003688:	4a1c      	ldr	r2, [pc, #112]	; (80036fc <_free_r+0x8c>)
 800368a:	6813      	ldr	r3, [r2, #0]
 800368c:	b933      	cbnz	r3, 800369c <_free_r+0x2c>
 800368e:	6063      	str	r3, [r4, #4]
 8003690:	6014      	str	r4, [r2, #0]
 8003692:	4628      	mov	r0, r5
 8003694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003698:	f000 bc72 	b.w	8003f80 <__malloc_unlock>
 800369c:	42a3      	cmp	r3, r4
 800369e:	d908      	bls.n	80036b2 <_free_r+0x42>
 80036a0:	6820      	ldr	r0, [r4, #0]
 80036a2:	1821      	adds	r1, r4, r0
 80036a4:	428b      	cmp	r3, r1
 80036a6:	bf01      	itttt	eq
 80036a8:	6819      	ldreq	r1, [r3, #0]
 80036aa:	685b      	ldreq	r3, [r3, #4]
 80036ac:	1809      	addeq	r1, r1, r0
 80036ae:	6021      	streq	r1, [r4, #0]
 80036b0:	e7ed      	b.n	800368e <_free_r+0x1e>
 80036b2:	461a      	mov	r2, r3
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	b10b      	cbz	r3, 80036bc <_free_r+0x4c>
 80036b8:	42a3      	cmp	r3, r4
 80036ba:	d9fa      	bls.n	80036b2 <_free_r+0x42>
 80036bc:	6811      	ldr	r1, [r2, #0]
 80036be:	1850      	adds	r0, r2, r1
 80036c0:	42a0      	cmp	r0, r4
 80036c2:	d10b      	bne.n	80036dc <_free_r+0x6c>
 80036c4:	6820      	ldr	r0, [r4, #0]
 80036c6:	4401      	add	r1, r0
 80036c8:	1850      	adds	r0, r2, r1
 80036ca:	4283      	cmp	r3, r0
 80036cc:	6011      	str	r1, [r2, #0]
 80036ce:	d1e0      	bne.n	8003692 <_free_r+0x22>
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	4401      	add	r1, r0
 80036d6:	6011      	str	r1, [r2, #0]
 80036d8:	6053      	str	r3, [r2, #4]
 80036da:	e7da      	b.n	8003692 <_free_r+0x22>
 80036dc:	d902      	bls.n	80036e4 <_free_r+0x74>
 80036de:	230c      	movs	r3, #12
 80036e0:	602b      	str	r3, [r5, #0]
 80036e2:	e7d6      	b.n	8003692 <_free_r+0x22>
 80036e4:	6820      	ldr	r0, [r4, #0]
 80036e6:	1821      	adds	r1, r4, r0
 80036e8:	428b      	cmp	r3, r1
 80036ea:	bf01      	itttt	eq
 80036ec:	6819      	ldreq	r1, [r3, #0]
 80036ee:	685b      	ldreq	r3, [r3, #4]
 80036f0:	1809      	addeq	r1, r1, r0
 80036f2:	6021      	streq	r1, [r4, #0]
 80036f4:	6063      	str	r3, [r4, #4]
 80036f6:	6054      	str	r4, [r2, #4]
 80036f8:	e7cb      	b.n	8003692 <_free_r+0x22>
 80036fa:	bd38      	pop	{r3, r4, r5, pc}
 80036fc:	20000464 	.word	0x20000464

08003700 <sbrk_aligned>:
 8003700:	b570      	push	{r4, r5, r6, lr}
 8003702:	4e0e      	ldr	r6, [pc, #56]	; (800373c <sbrk_aligned+0x3c>)
 8003704:	460c      	mov	r4, r1
 8003706:	6831      	ldr	r1, [r6, #0]
 8003708:	4605      	mov	r5, r0
 800370a:	b911      	cbnz	r1, 8003712 <sbrk_aligned+0x12>
 800370c:	f000 fb7a 	bl	8003e04 <_sbrk_r>
 8003710:	6030      	str	r0, [r6, #0]
 8003712:	4621      	mov	r1, r4
 8003714:	4628      	mov	r0, r5
 8003716:	f000 fb75 	bl	8003e04 <_sbrk_r>
 800371a:	1c43      	adds	r3, r0, #1
 800371c:	d00a      	beq.n	8003734 <sbrk_aligned+0x34>
 800371e:	1cc4      	adds	r4, r0, #3
 8003720:	f024 0403 	bic.w	r4, r4, #3
 8003724:	42a0      	cmp	r0, r4
 8003726:	d007      	beq.n	8003738 <sbrk_aligned+0x38>
 8003728:	1a21      	subs	r1, r4, r0
 800372a:	4628      	mov	r0, r5
 800372c:	f000 fb6a 	bl	8003e04 <_sbrk_r>
 8003730:	3001      	adds	r0, #1
 8003732:	d101      	bne.n	8003738 <sbrk_aligned+0x38>
 8003734:	f04f 34ff 	mov.w	r4, #4294967295
 8003738:	4620      	mov	r0, r4
 800373a:	bd70      	pop	{r4, r5, r6, pc}
 800373c:	20000468 	.word	0x20000468

08003740 <_malloc_r>:
 8003740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003744:	1ccd      	adds	r5, r1, #3
 8003746:	f025 0503 	bic.w	r5, r5, #3
 800374a:	3508      	adds	r5, #8
 800374c:	2d0c      	cmp	r5, #12
 800374e:	bf38      	it	cc
 8003750:	250c      	movcc	r5, #12
 8003752:	2d00      	cmp	r5, #0
 8003754:	4607      	mov	r7, r0
 8003756:	db01      	blt.n	800375c <_malloc_r+0x1c>
 8003758:	42a9      	cmp	r1, r5
 800375a:	d905      	bls.n	8003768 <_malloc_r+0x28>
 800375c:	230c      	movs	r3, #12
 800375e:	2600      	movs	r6, #0
 8003760:	603b      	str	r3, [r7, #0]
 8003762:	4630      	mov	r0, r6
 8003764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003768:	4e2e      	ldr	r6, [pc, #184]	; (8003824 <_malloc_r+0xe4>)
 800376a:	f000 fc03 	bl	8003f74 <__malloc_lock>
 800376e:	6833      	ldr	r3, [r6, #0]
 8003770:	461c      	mov	r4, r3
 8003772:	bb34      	cbnz	r4, 80037c2 <_malloc_r+0x82>
 8003774:	4629      	mov	r1, r5
 8003776:	4638      	mov	r0, r7
 8003778:	f7ff ffc2 	bl	8003700 <sbrk_aligned>
 800377c:	1c43      	adds	r3, r0, #1
 800377e:	4604      	mov	r4, r0
 8003780:	d14d      	bne.n	800381e <_malloc_r+0xde>
 8003782:	6834      	ldr	r4, [r6, #0]
 8003784:	4626      	mov	r6, r4
 8003786:	2e00      	cmp	r6, #0
 8003788:	d140      	bne.n	800380c <_malloc_r+0xcc>
 800378a:	6823      	ldr	r3, [r4, #0]
 800378c:	4631      	mov	r1, r6
 800378e:	4638      	mov	r0, r7
 8003790:	eb04 0803 	add.w	r8, r4, r3
 8003794:	f000 fb36 	bl	8003e04 <_sbrk_r>
 8003798:	4580      	cmp	r8, r0
 800379a:	d13a      	bne.n	8003812 <_malloc_r+0xd2>
 800379c:	6821      	ldr	r1, [r4, #0]
 800379e:	3503      	adds	r5, #3
 80037a0:	1a6d      	subs	r5, r5, r1
 80037a2:	f025 0503 	bic.w	r5, r5, #3
 80037a6:	3508      	adds	r5, #8
 80037a8:	2d0c      	cmp	r5, #12
 80037aa:	bf38      	it	cc
 80037ac:	250c      	movcc	r5, #12
 80037ae:	4638      	mov	r0, r7
 80037b0:	4629      	mov	r1, r5
 80037b2:	f7ff ffa5 	bl	8003700 <sbrk_aligned>
 80037b6:	3001      	adds	r0, #1
 80037b8:	d02b      	beq.n	8003812 <_malloc_r+0xd2>
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	442b      	add	r3, r5
 80037be:	6023      	str	r3, [r4, #0]
 80037c0:	e00e      	b.n	80037e0 <_malloc_r+0xa0>
 80037c2:	6822      	ldr	r2, [r4, #0]
 80037c4:	1b52      	subs	r2, r2, r5
 80037c6:	d41e      	bmi.n	8003806 <_malloc_r+0xc6>
 80037c8:	2a0b      	cmp	r2, #11
 80037ca:	d916      	bls.n	80037fa <_malloc_r+0xba>
 80037cc:	1961      	adds	r1, r4, r5
 80037ce:	42a3      	cmp	r3, r4
 80037d0:	6025      	str	r5, [r4, #0]
 80037d2:	bf18      	it	ne
 80037d4:	6059      	strne	r1, [r3, #4]
 80037d6:	6863      	ldr	r3, [r4, #4]
 80037d8:	bf08      	it	eq
 80037da:	6031      	streq	r1, [r6, #0]
 80037dc:	5162      	str	r2, [r4, r5]
 80037de:	604b      	str	r3, [r1, #4]
 80037e0:	4638      	mov	r0, r7
 80037e2:	f104 060b 	add.w	r6, r4, #11
 80037e6:	f000 fbcb 	bl	8003f80 <__malloc_unlock>
 80037ea:	f026 0607 	bic.w	r6, r6, #7
 80037ee:	1d23      	adds	r3, r4, #4
 80037f0:	1af2      	subs	r2, r6, r3
 80037f2:	d0b6      	beq.n	8003762 <_malloc_r+0x22>
 80037f4:	1b9b      	subs	r3, r3, r6
 80037f6:	50a3      	str	r3, [r4, r2]
 80037f8:	e7b3      	b.n	8003762 <_malloc_r+0x22>
 80037fa:	6862      	ldr	r2, [r4, #4]
 80037fc:	42a3      	cmp	r3, r4
 80037fe:	bf0c      	ite	eq
 8003800:	6032      	streq	r2, [r6, #0]
 8003802:	605a      	strne	r2, [r3, #4]
 8003804:	e7ec      	b.n	80037e0 <_malloc_r+0xa0>
 8003806:	4623      	mov	r3, r4
 8003808:	6864      	ldr	r4, [r4, #4]
 800380a:	e7b2      	b.n	8003772 <_malloc_r+0x32>
 800380c:	4634      	mov	r4, r6
 800380e:	6876      	ldr	r6, [r6, #4]
 8003810:	e7b9      	b.n	8003786 <_malloc_r+0x46>
 8003812:	230c      	movs	r3, #12
 8003814:	4638      	mov	r0, r7
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	f000 fbb2 	bl	8003f80 <__malloc_unlock>
 800381c:	e7a1      	b.n	8003762 <_malloc_r+0x22>
 800381e:	6025      	str	r5, [r4, #0]
 8003820:	e7de      	b.n	80037e0 <_malloc_r+0xa0>
 8003822:	bf00      	nop
 8003824:	20000464 	.word	0x20000464

08003828 <__sfputc_r>:
 8003828:	6893      	ldr	r3, [r2, #8]
 800382a:	b410      	push	{r4}
 800382c:	3b01      	subs	r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	6093      	str	r3, [r2, #8]
 8003832:	da07      	bge.n	8003844 <__sfputc_r+0x1c>
 8003834:	6994      	ldr	r4, [r2, #24]
 8003836:	42a3      	cmp	r3, r4
 8003838:	db01      	blt.n	800383e <__sfputc_r+0x16>
 800383a:	290a      	cmp	r1, #10
 800383c:	d102      	bne.n	8003844 <__sfputc_r+0x1c>
 800383e:	bc10      	pop	{r4}
 8003840:	f7ff bc32 	b.w	80030a8 <__swbuf_r>
 8003844:	6813      	ldr	r3, [r2, #0]
 8003846:	1c58      	adds	r0, r3, #1
 8003848:	6010      	str	r0, [r2, #0]
 800384a:	7019      	strb	r1, [r3, #0]
 800384c:	4608      	mov	r0, r1
 800384e:	bc10      	pop	{r4}
 8003850:	4770      	bx	lr

08003852 <__sfputs_r>:
 8003852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003854:	4606      	mov	r6, r0
 8003856:	460f      	mov	r7, r1
 8003858:	4614      	mov	r4, r2
 800385a:	18d5      	adds	r5, r2, r3
 800385c:	42ac      	cmp	r4, r5
 800385e:	d101      	bne.n	8003864 <__sfputs_r+0x12>
 8003860:	2000      	movs	r0, #0
 8003862:	e007      	b.n	8003874 <__sfputs_r+0x22>
 8003864:	463a      	mov	r2, r7
 8003866:	4630      	mov	r0, r6
 8003868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800386c:	f7ff ffdc 	bl	8003828 <__sfputc_r>
 8003870:	1c43      	adds	r3, r0, #1
 8003872:	d1f3      	bne.n	800385c <__sfputs_r+0xa>
 8003874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003878 <_vfiprintf_r>:
 8003878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800387c:	460d      	mov	r5, r1
 800387e:	4614      	mov	r4, r2
 8003880:	4698      	mov	r8, r3
 8003882:	4606      	mov	r6, r0
 8003884:	b09d      	sub	sp, #116	; 0x74
 8003886:	b118      	cbz	r0, 8003890 <_vfiprintf_r+0x18>
 8003888:	6983      	ldr	r3, [r0, #24]
 800388a:	b90b      	cbnz	r3, 8003890 <_vfiprintf_r+0x18>
 800388c:	f7ff fde2 	bl	8003454 <__sinit>
 8003890:	4b89      	ldr	r3, [pc, #548]	; (8003ab8 <_vfiprintf_r+0x240>)
 8003892:	429d      	cmp	r5, r3
 8003894:	d11b      	bne.n	80038ce <_vfiprintf_r+0x56>
 8003896:	6875      	ldr	r5, [r6, #4]
 8003898:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800389a:	07d9      	lsls	r1, r3, #31
 800389c:	d405      	bmi.n	80038aa <_vfiprintf_r+0x32>
 800389e:	89ab      	ldrh	r3, [r5, #12]
 80038a0:	059a      	lsls	r2, r3, #22
 80038a2:	d402      	bmi.n	80038aa <_vfiprintf_r+0x32>
 80038a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038a6:	f7ff fe73 	bl	8003590 <__retarget_lock_acquire_recursive>
 80038aa:	89ab      	ldrh	r3, [r5, #12]
 80038ac:	071b      	lsls	r3, r3, #28
 80038ae:	d501      	bpl.n	80038b4 <_vfiprintf_r+0x3c>
 80038b0:	692b      	ldr	r3, [r5, #16]
 80038b2:	b9eb      	cbnz	r3, 80038f0 <_vfiprintf_r+0x78>
 80038b4:	4629      	mov	r1, r5
 80038b6:	4630      	mov	r0, r6
 80038b8:	f7ff fc48 	bl	800314c <__swsetup_r>
 80038bc:	b1c0      	cbz	r0, 80038f0 <_vfiprintf_r+0x78>
 80038be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038c0:	07dc      	lsls	r4, r3, #31
 80038c2:	d50e      	bpl.n	80038e2 <_vfiprintf_r+0x6a>
 80038c4:	f04f 30ff 	mov.w	r0, #4294967295
 80038c8:	b01d      	add	sp, #116	; 0x74
 80038ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038ce:	4b7b      	ldr	r3, [pc, #492]	; (8003abc <_vfiprintf_r+0x244>)
 80038d0:	429d      	cmp	r5, r3
 80038d2:	d101      	bne.n	80038d8 <_vfiprintf_r+0x60>
 80038d4:	68b5      	ldr	r5, [r6, #8]
 80038d6:	e7df      	b.n	8003898 <_vfiprintf_r+0x20>
 80038d8:	4b79      	ldr	r3, [pc, #484]	; (8003ac0 <_vfiprintf_r+0x248>)
 80038da:	429d      	cmp	r5, r3
 80038dc:	bf08      	it	eq
 80038de:	68f5      	ldreq	r5, [r6, #12]
 80038e0:	e7da      	b.n	8003898 <_vfiprintf_r+0x20>
 80038e2:	89ab      	ldrh	r3, [r5, #12]
 80038e4:	0598      	lsls	r0, r3, #22
 80038e6:	d4ed      	bmi.n	80038c4 <_vfiprintf_r+0x4c>
 80038e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038ea:	f7ff fe52 	bl	8003592 <__retarget_lock_release_recursive>
 80038ee:	e7e9      	b.n	80038c4 <_vfiprintf_r+0x4c>
 80038f0:	2300      	movs	r3, #0
 80038f2:	9309      	str	r3, [sp, #36]	; 0x24
 80038f4:	2320      	movs	r3, #32
 80038f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038fa:	2330      	movs	r3, #48	; 0x30
 80038fc:	f04f 0901 	mov.w	r9, #1
 8003900:	f8cd 800c 	str.w	r8, [sp, #12]
 8003904:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003ac4 <_vfiprintf_r+0x24c>
 8003908:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800390c:	4623      	mov	r3, r4
 800390e:	469a      	mov	sl, r3
 8003910:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003914:	b10a      	cbz	r2, 800391a <_vfiprintf_r+0xa2>
 8003916:	2a25      	cmp	r2, #37	; 0x25
 8003918:	d1f9      	bne.n	800390e <_vfiprintf_r+0x96>
 800391a:	ebba 0b04 	subs.w	fp, sl, r4
 800391e:	d00b      	beq.n	8003938 <_vfiprintf_r+0xc0>
 8003920:	465b      	mov	r3, fp
 8003922:	4622      	mov	r2, r4
 8003924:	4629      	mov	r1, r5
 8003926:	4630      	mov	r0, r6
 8003928:	f7ff ff93 	bl	8003852 <__sfputs_r>
 800392c:	3001      	adds	r0, #1
 800392e:	f000 80aa 	beq.w	8003a86 <_vfiprintf_r+0x20e>
 8003932:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003934:	445a      	add	r2, fp
 8003936:	9209      	str	r2, [sp, #36]	; 0x24
 8003938:	f89a 3000 	ldrb.w	r3, [sl]
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 80a2 	beq.w	8003a86 <_vfiprintf_r+0x20e>
 8003942:	2300      	movs	r3, #0
 8003944:	f04f 32ff 	mov.w	r2, #4294967295
 8003948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800394c:	f10a 0a01 	add.w	sl, sl, #1
 8003950:	9304      	str	r3, [sp, #16]
 8003952:	9307      	str	r3, [sp, #28]
 8003954:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003958:	931a      	str	r3, [sp, #104]	; 0x68
 800395a:	4654      	mov	r4, sl
 800395c:	2205      	movs	r2, #5
 800395e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003962:	4858      	ldr	r0, [pc, #352]	; (8003ac4 <_vfiprintf_r+0x24c>)
 8003964:	f000 faf8 	bl	8003f58 <memchr>
 8003968:	9a04      	ldr	r2, [sp, #16]
 800396a:	b9d8      	cbnz	r0, 80039a4 <_vfiprintf_r+0x12c>
 800396c:	06d1      	lsls	r1, r2, #27
 800396e:	bf44      	itt	mi
 8003970:	2320      	movmi	r3, #32
 8003972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003976:	0713      	lsls	r3, r2, #28
 8003978:	bf44      	itt	mi
 800397a:	232b      	movmi	r3, #43	; 0x2b
 800397c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003980:	f89a 3000 	ldrb.w	r3, [sl]
 8003984:	2b2a      	cmp	r3, #42	; 0x2a
 8003986:	d015      	beq.n	80039b4 <_vfiprintf_r+0x13c>
 8003988:	4654      	mov	r4, sl
 800398a:	2000      	movs	r0, #0
 800398c:	f04f 0c0a 	mov.w	ip, #10
 8003990:	9a07      	ldr	r2, [sp, #28]
 8003992:	4621      	mov	r1, r4
 8003994:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003998:	3b30      	subs	r3, #48	; 0x30
 800399a:	2b09      	cmp	r3, #9
 800399c:	d94e      	bls.n	8003a3c <_vfiprintf_r+0x1c4>
 800399e:	b1b0      	cbz	r0, 80039ce <_vfiprintf_r+0x156>
 80039a0:	9207      	str	r2, [sp, #28]
 80039a2:	e014      	b.n	80039ce <_vfiprintf_r+0x156>
 80039a4:	eba0 0308 	sub.w	r3, r0, r8
 80039a8:	fa09 f303 	lsl.w	r3, r9, r3
 80039ac:	4313      	orrs	r3, r2
 80039ae:	46a2      	mov	sl, r4
 80039b0:	9304      	str	r3, [sp, #16]
 80039b2:	e7d2      	b.n	800395a <_vfiprintf_r+0xe2>
 80039b4:	9b03      	ldr	r3, [sp, #12]
 80039b6:	1d19      	adds	r1, r3, #4
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	9103      	str	r1, [sp, #12]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	bfbb      	ittet	lt
 80039c0:	425b      	neglt	r3, r3
 80039c2:	f042 0202 	orrlt.w	r2, r2, #2
 80039c6:	9307      	strge	r3, [sp, #28]
 80039c8:	9307      	strlt	r3, [sp, #28]
 80039ca:	bfb8      	it	lt
 80039cc:	9204      	strlt	r2, [sp, #16]
 80039ce:	7823      	ldrb	r3, [r4, #0]
 80039d0:	2b2e      	cmp	r3, #46	; 0x2e
 80039d2:	d10c      	bne.n	80039ee <_vfiprintf_r+0x176>
 80039d4:	7863      	ldrb	r3, [r4, #1]
 80039d6:	2b2a      	cmp	r3, #42	; 0x2a
 80039d8:	d135      	bne.n	8003a46 <_vfiprintf_r+0x1ce>
 80039da:	9b03      	ldr	r3, [sp, #12]
 80039dc:	3402      	adds	r4, #2
 80039de:	1d1a      	adds	r2, r3, #4
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	9203      	str	r2, [sp, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	bfb8      	it	lt
 80039e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80039ec:	9305      	str	r3, [sp, #20]
 80039ee:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003ac8 <_vfiprintf_r+0x250>
 80039f2:	2203      	movs	r2, #3
 80039f4:	4650      	mov	r0, sl
 80039f6:	7821      	ldrb	r1, [r4, #0]
 80039f8:	f000 faae 	bl	8003f58 <memchr>
 80039fc:	b140      	cbz	r0, 8003a10 <_vfiprintf_r+0x198>
 80039fe:	2340      	movs	r3, #64	; 0x40
 8003a00:	eba0 000a 	sub.w	r0, r0, sl
 8003a04:	fa03 f000 	lsl.w	r0, r3, r0
 8003a08:	9b04      	ldr	r3, [sp, #16]
 8003a0a:	3401      	adds	r4, #1
 8003a0c:	4303      	orrs	r3, r0
 8003a0e:	9304      	str	r3, [sp, #16]
 8003a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a14:	2206      	movs	r2, #6
 8003a16:	482d      	ldr	r0, [pc, #180]	; (8003acc <_vfiprintf_r+0x254>)
 8003a18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a1c:	f000 fa9c 	bl	8003f58 <memchr>
 8003a20:	2800      	cmp	r0, #0
 8003a22:	d03f      	beq.n	8003aa4 <_vfiprintf_r+0x22c>
 8003a24:	4b2a      	ldr	r3, [pc, #168]	; (8003ad0 <_vfiprintf_r+0x258>)
 8003a26:	bb1b      	cbnz	r3, 8003a70 <_vfiprintf_r+0x1f8>
 8003a28:	9b03      	ldr	r3, [sp, #12]
 8003a2a:	3307      	adds	r3, #7
 8003a2c:	f023 0307 	bic.w	r3, r3, #7
 8003a30:	3308      	adds	r3, #8
 8003a32:	9303      	str	r3, [sp, #12]
 8003a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a36:	443b      	add	r3, r7
 8003a38:	9309      	str	r3, [sp, #36]	; 0x24
 8003a3a:	e767      	b.n	800390c <_vfiprintf_r+0x94>
 8003a3c:	460c      	mov	r4, r1
 8003a3e:	2001      	movs	r0, #1
 8003a40:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a44:	e7a5      	b.n	8003992 <_vfiprintf_r+0x11a>
 8003a46:	2300      	movs	r3, #0
 8003a48:	f04f 0c0a 	mov.w	ip, #10
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	3401      	adds	r4, #1
 8003a50:	9305      	str	r3, [sp, #20]
 8003a52:	4620      	mov	r0, r4
 8003a54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a58:	3a30      	subs	r2, #48	; 0x30
 8003a5a:	2a09      	cmp	r2, #9
 8003a5c:	d903      	bls.n	8003a66 <_vfiprintf_r+0x1ee>
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0c5      	beq.n	80039ee <_vfiprintf_r+0x176>
 8003a62:	9105      	str	r1, [sp, #20]
 8003a64:	e7c3      	b.n	80039ee <_vfiprintf_r+0x176>
 8003a66:	4604      	mov	r4, r0
 8003a68:	2301      	movs	r3, #1
 8003a6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a6e:	e7f0      	b.n	8003a52 <_vfiprintf_r+0x1da>
 8003a70:	ab03      	add	r3, sp, #12
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	462a      	mov	r2, r5
 8003a76:	4630      	mov	r0, r6
 8003a78:	4b16      	ldr	r3, [pc, #88]	; (8003ad4 <_vfiprintf_r+0x25c>)
 8003a7a:	a904      	add	r1, sp, #16
 8003a7c:	f3af 8000 	nop.w
 8003a80:	4607      	mov	r7, r0
 8003a82:	1c78      	adds	r0, r7, #1
 8003a84:	d1d6      	bne.n	8003a34 <_vfiprintf_r+0x1bc>
 8003a86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a88:	07d9      	lsls	r1, r3, #31
 8003a8a:	d405      	bmi.n	8003a98 <_vfiprintf_r+0x220>
 8003a8c:	89ab      	ldrh	r3, [r5, #12]
 8003a8e:	059a      	lsls	r2, r3, #22
 8003a90:	d402      	bmi.n	8003a98 <_vfiprintf_r+0x220>
 8003a92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a94:	f7ff fd7d 	bl	8003592 <__retarget_lock_release_recursive>
 8003a98:	89ab      	ldrh	r3, [r5, #12]
 8003a9a:	065b      	lsls	r3, r3, #25
 8003a9c:	f53f af12 	bmi.w	80038c4 <_vfiprintf_r+0x4c>
 8003aa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003aa2:	e711      	b.n	80038c8 <_vfiprintf_r+0x50>
 8003aa4:	ab03      	add	r3, sp, #12
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	462a      	mov	r2, r5
 8003aaa:	4630      	mov	r0, r6
 8003aac:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <_vfiprintf_r+0x25c>)
 8003aae:	a904      	add	r1, sp, #16
 8003ab0:	f000 f882 	bl	8003bb8 <_printf_i>
 8003ab4:	e7e4      	b.n	8003a80 <_vfiprintf_r+0x208>
 8003ab6:	bf00      	nop
 8003ab8:	08004474 	.word	0x08004474
 8003abc:	08004494 	.word	0x08004494
 8003ac0:	08004454 	.word	0x08004454
 8003ac4:	080044b4 	.word	0x080044b4
 8003ac8:	080044ba 	.word	0x080044ba
 8003acc:	080044be 	.word	0x080044be
 8003ad0:	00000000 	.word	0x00000000
 8003ad4:	08003853 	.word	0x08003853

08003ad8 <_printf_common>:
 8003ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003adc:	4616      	mov	r6, r2
 8003ade:	4699      	mov	r9, r3
 8003ae0:	688a      	ldr	r2, [r1, #8]
 8003ae2:	690b      	ldr	r3, [r1, #16]
 8003ae4:	4607      	mov	r7, r0
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	bfb8      	it	lt
 8003aea:	4613      	movlt	r3, r2
 8003aec:	6033      	str	r3, [r6, #0]
 8003aee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003af2:	460c      	mov	r4, r1
 8003af4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003af8:	b10a      	cbz	r2, 8003afe <_printf_common+0x26>
 8003afa:	3301      	adds	r3, #1
 8003afc:	6033      	str	r3, [r6, #0]
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	0699      	lsls	r1, r3, #26
 8003b02:	bf42      	ittt	mi
 8003b04:	6833      	ldrmi	r3, [r6, #0]
 8003b06:	3302      	addmi	r3, #2
 8003b08:	6033      	strmi	r3, [r6, #0]
 8003b0a:	6825      	ldr	r5, [r4, #0]
 8003b0c:	f015 0506 	ands.w	r5, r5, #6
 8003b10:	d106      	bne.n	8003b20 <_printf_common+0x48>
 8003b12:	f104 0a19 	add.w	sl, r4, #25
 8003b16:	68e3      	ldr	r3, [r4, #12]
 8003b18:	6832      	ldr	r2, [r6, #0]
 8003b1a:	1a9b      	subs	r3, r3, r2
 8003b1c:	42ab      	cmp	r3, r5
 8003b1e:	dc28      	bgt.n	8003b72 <_printf_common+0x9a>
 8003b20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b24:	1e13      	subs	r3, r2, #0
 8003b26:	6822      	ldr	r2, [r4, #0]
 8003b28:	bf18      	it	ne
 8003b2a:	2301      	movne	r3, #1
 8003b2c:	0692      	lsls	r2, r2, #26
 8003b2e:	d42d      	bmi.n	8003b8c <_printf_common+0xb4>
 8003b30:	4649      	mov	r1, r9
 8003b32:	4638      	mov	r0, r7
 8003b34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b38:	47c0      	blx	r8
 8003b3a:	3001      	adds	r0, #1
 8003b3c:	d020      	beq.n	8003b80 <_printf_common+0xa8>
 8003b3e:	6823      	ldr	r3, [r4, #0]
 8003b40:	68e5      	ldr	r5, [r4, #12]
 8003b42:	f003 0306 	and.w	r3, r3, #6
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	bf18      	it	ne
 8003b4a:	2500      	movne	r5, #0
 8003b4c:	6832      	ldr	r2, [r6, #0]
 8003b4e:	f04f 0600 	mov.w	r6, #0
 8003b52:	68a3      	ldr	r3, [r4, #8]
 8003b54:	bf08      	it	eq
 8003b56:	1aad      	subeq	r5, r5, r2
 8003b58:	6922      	ldr	r2, [r4, #16]
 8003b5a:	bf08      	it	eq
 8003b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b60:	4293      	cmp	r3, r2
 8003b62:	bfc4      	itt	gt
 8003b64:	1a9b      	subgt	r3, r3, r2
 8003b66:	18ed      	addgt	r5, r5, r3
 8003b68:	341a      	adds	r4, #26
 8003b6a:	42b5      	cmp	r5, r6
 8003b6c:	d11a      	bne.n	8003ba4 <_printf_common+0xcc>
 8003b6e:	2000      	movs	r0, #0
 8003b70:	e008      	b.n	8003b84 <_printf_common+0xac>
 8003b72:	2301      	movs	r3, #1
 8003b74:	4652      	mov	r2, sl
 8003b76:	4649      	mov	r1, r9
 8003b78:	4638      	mov	r0, r7
 8003b7a:	47c0      	blx	r8
 8003b7c:	3001      	adds	r0, #1
 8003b7e:	d103      	bne.n	8003b88 <_printf_common+0xb0>
 8003b80:	f04f 30ff 	mov.w	r0, #4294967295
 8003b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b88:	3501      	adds	r5, #1
 8003b8a:	e7c4      	b.n	8003b16 <_printf_common+0x3e>
 8003b8c:	2030      	movs	r0, #48	; 0x30
 8003b8e:	18e1      	adds	r1, r4, r3
 8003b90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b9a:	4422      	add	r2, r4
 8003b9c:	3302      	adds	r3, #2
 8003b9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ba2:	e7c5      	b.n	8003b30 <_printf_common+0x58>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	4622      	mov	r2, r4
 8003ba8:	4649      	mov	r1, r9
 8003baa:	4638      	mov	r0, r7
 8003bac:	47c0      	blx	r8
 8003bae:	3001      	adds	r0, #1
 8003bb0:	d0e6      	beq.n	8003b80 <_printf_common+0xa8>
 8003bb2:	3601      	adds	r6, #1
 8003bb4:	e7d9      	b.n	8003b6a <_printf_common+0x92>
	...

08003bb8 <_printf_i>:
 8003bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bbc:	7e0f      	ldrb	r7, [r1, #24]
 8003bbe:	4691      	mov	r9, r2
 8003bc0:	2f78      	cmp	r7, #120	; 0x78
 8003bc2:	4680      	mov	r8, r0
 8003bc4:	460c      	mov	r4, r1
 8003bc6:	469a      	mov	sl, r3
 8003bc8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bce:	d807      	bhi.n	8003be0 <_printf_i+0x28>
 8003bd0:	2f62      	cmp	r7, #98	; 0x62
 8003bd2:	d80a      	bhi.n	8003bea <_printf_i+0x32>
 8003bd4:	2f00      	cmp	r7, #0
 8003bd6:	f000 80d9 	beq.w	8003d8c <_printf_i+0x1d4>
 8003bda:	2f58      	cmp	r7, #88	; 0x58
 8003bdc:	f000 80a4 	beq.w	8003d28 <_printf_i+0x170>
 8003be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003be4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003be8:	e03a      	b.n	8003c60 <_printf_i+0xa8>
 8003bea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bee:	2b15      	cmp	r3, #21
 8003bf0:	d8f6      	bhi.n	8003be0 <_printf_i+0x28>
 8003bf2:	a101      	add	r1, pc, #4	; (adr r1, 8003bf8 <_printf_i+0x40>)
 8003bf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bf8:	08003c51 	.word	0x08003c51
 8003bfc:	08003c65 	.word	0x08003c65
 8003c00:	08003be1 	.word	0x08003be1
 8003c04:	08003be1 	.word	0x08003be1
 8003c08:	08003be1 	.word	0x08003be1
 8003c0c:	08003be1 	.word	0x08003be1
 8003c10:	08003c65 	.word	0x08003c65
 8003c14:	08003be1 	.word	0x08003be1
 8003c18:	08003be1 	.word	0x08003be1
 8003c1c:	08003be1 	.word	0x08003be1
 8003c20:	08003be1 	.word	0x08003be1
 8003c24:	08003d73 	.word	0x08003d73
 8003c28:	08003c95 	.word	0x08003c95
 8003c2c:	08003d55 	.word	0x08003d55
 8003c30:	08003be1 	.word	0x08003be1
 8003c34:	08003be1 	.word	0x08003be1
 8003c38:	08003d95 	.word	0x08003d95
 8003c3c:	08003be1 	.word	0x08003be1
 8003c40:	08003c95 	.word	0x08003c95
 8003c44:	08003be1 	.word	0x08003be1
 8003c48:	08003be1 	.word	0x08003be1
 8003c4c:	08003d5d 	.word	0x08003d5d
 8003c50:	682b      	ldr	r3, [r5, #0]
 8003c52:	1d1a      	adds	r2, r3, #4
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	602a      	str	r2, [r5, #0]
 8003c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0a4      	b.n	8003dae <_printf_i+0x1f6>
 8003c64:	6820      	ldr	r0, [r4, #0]
 8003c66:	6829      	ldr	r1, [r5, #0]
 8003c68:	0606      	lsls	r6, r0, #24
 8003c6a:	f101 0304 	add.w	r3, r1, #4
 8003c6e:	d50a      	bpl.n	8003c86 <_printf_i+0xce>
 8003c70:	680e      	ldr	r6, [r1, #0]
 8003c72:	602b      	str	r3, [r5, #0]
 8003c74:	2e00      	cmp	r6, #0
 8003c76:	da03      	bge.n	8003c80 <_printf_i+0xc8>
 8003c78:	232d      	movs	r3, #45	; 0x2d
 8003c7a:	4276      	negs	r6, r6
 8003c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c80:	230a      	movs	r3, #10
 8003c82:	485e      	ldr	r0, [pc, #376]	; (8003dfc <_printf_i+0x244>)
 8003c84:	e019      	b.n	8003cba <_printf_i+0x102>
 8003c86:	680e      	ldr	r6, [r1, #0]
 8003c88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c8c:	602b      	str	r3, [r5, #0]
 8003c8e:	bf18      	it	ne
 8003c90:	b236      	sxthne	r6, r6
 8003c92:	e7ef      	b.n	8003c74 <_printf_i+0xbc>
 8003c94:	682b      	ldr	r3, [r5, #0]
 8003c96:	6820      	ldr	r0, [r4, #0]
 8003c98:	1d19      	adds	r1, r3, #4
 8003c9a:	6029      	str	r1, [r5, #0]
 8003c9c:	0601      	lsls	r1, r0, #24
 8003c9e:	d501      	bpl.n	8003ca4 <_printf_i+0xec>
 8003ca0:	681e      	ldr	r6, [r3, #0]
 8003ca2:	e002      	b.n	8003caa <_printf_i+0xf2>
 8003ca4:	0646      	lsls	r6, r0, #25
 8003ca6:	d5fb      	bpl.n	8003ca0 <_printf_i+0xe8>
 8003ca8:	881e      	ldrh	r6, [r3, #0]
 8003caa:	2f6f      	cmp	r7, #111	; 0x6f
 8003cac:	bf0c      	ite	eq
 8003cae:	2308      	moveq	r3, #8
 8003cb0:	230a      	movne	r3, #10
 8003cb2:	4852      	ldr	r0, [pc, #328]	; (8003dfc <_printf_i+0x244>)
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cba:	6865      	ldr	r5, [r4, #4]
 8003cbc:	2d00      	cmp	r5, #0
 8003cbe:	bfa8      	it	ge
 8003cc0:	6821      	ldrge	r1, [r4, #0]
 8003cc2:	60a5      	str	r5, [r4, #8]
 8003cc4:	bfa4      	itt	ge
 8003cc6:	f021 0104 	bicge.w	r1, r1, #4
 8003cca:	6021      	strge	r1, [r4, #0]
 8003ccc:	b90e      	cbnz	r6, 8003cd2 <_printf_i+0x11a>
 8003cce:	2d00      	cmp	r5, #0
 8003cd0:	d04d      	beq.n	8003d6e <_printf_i+0x1b6>
 8003cd2:	4615      	mov	r5, r2
 8003cd4:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cd8:	fb03 6711 	mls	r7, r3, r1, r6
 8003cdc:	5dc7      	ldrb	r7, [r0, r7]
 8003cde:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ce2:	4637      	mov	r7, r6
 8003ce4:	42bb      	cmp	r3, r7
 8003ce6:	460e      	mov	r6, r1
 8003ce8:	d9f4      	bls.n	8003cd4 <_printf_i+0x11c>
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d10b      	bne.n	8003d06 <_printf_i+0x14e>
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	07de      	lsls	r6, r3, #31
 8003cf2:	d508      	bpl.n	8003d06 <_printf_i+0x14e>
 8003cf4:	6923      	ldr	r3, [r4, #16]
 8003cf6:	6861      	ldr	r1, [r4, #4]
 8003cf8:	4299      	cmp	r1, r3
 8003cfa:	bfde      	ittt	le
 8003cfc:	2330      	movle	r3, #48	; 0x30
 8003cfe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d06:	1b52      	subs	r2, r2, r5
 8003d08:	6122      	str	r2, [r4, #16]
 8003d0a:	464b      	mov	r3, r9
 8003d0c:	4621      	mov	r1, r4
 8003d0e:	4640      	mov	r0, r8
 8003d10:	f8cd a000 	str.w	sl, [sp]
 8003d14:	aa03      	add	r2, sp, #12
 8003d16:	f7ff fedf 	bl	8003ad8 <_printf_common>
 8003d1a:	3001      	adds	r0, #1
 8003d1c:	d14c      	bne.n	8003db8 <_printf_i+0x200>
 8003d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d22:	b004      	add	sp, #16
 8003d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d28:	4834      	ldr	r0, [pc, #208]	; (8003dfc <_printf_i+0x244>)
 8003d2a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d2e:	6829      	ldr	r1, [r5, #0]
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d36:	6029      	str	r1, [r5, #0]
 8003d38:	061d      	lsls	r5, r3, #24
 8003d3a:	d514      	bpl.n	8003d66 <_printf_i+0x1ae>
 8003d3c:	07df      	lsls	r7, r3, #31
 8003d3e:	bf44      	itt	mi
 8003d40:	f043 0320 	orrmi.w	r3, r3, #32
 8003d44:	6023      	strmi	r3, [r4, #0]
 8003d46:	b91e      	cbnz	r6, 8003d50 <_printf_i+0x198>
 8003d48:	6823      	ldr	r3, [r4, #0]
 8003d4a:	f023 0320 	bic.w	r3, r3, #32
 8003d4e:	6023      	str	r3, [r4, #0]
 8003d50:	2310      	movs	r3, #16
 8003d52:	e7af      	b.n	8003cb4 <_printf_i+0xfc>
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	f043 0320 	orr.w	r3, r3, #32
 8003d5a:	6023      	str	r3, [r4, #0]
 8003d5c:	2378      	movs	r3, #120	; 0x78
 8003d5e:	4828      	ldr	r0, [pc, #160]	; (8003e00 <_printf_i+0x248>)
 8003d60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d64:	e7e3      	b.n	8003d2e <_printf_i+0x176>
 8003d66:	0659      	lsls	r1, r3, #25
 8003d68:	bf48      	it	mi
 8003d6a:	b2b6      	uxthmi	r6, r6
 8003d6c:	e7e6      	b.n	8003d3c <_printf_i+0x184>
 8003d6e:	4615      	mov	r5, r2
 8003d70:	e7bb      	b.n	8003cea <_printf_i+0x132>
 8003d72:	682b      	ldr	r3, [r5, #0]
 8003d74:	6826      	ldr	r6, [r4, #0]
 8003d76:	1d18      	adds	r0, r3, #4
 8003d78:	6961      	ldr	r1, [r4, #20]
 8003d7a:	6028      	str	r0, [r5, #0]
 8003d7c:	0635      	lsls	r5, r6, #24
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	d501      	bpl.n	8003d86 <_printf_i+0x1ce>
 8003d82:	6019      	str	r1, [r3, #0]
 8003d84:	e002      	b.n	8003d8c <_printf_i+0x1d4>
 8003d86:	0670      	lsls	r0, r6, #25
 8003d88:	d5fb      	bpl.n	8003d82 <_printf_i+0x1ca>
 8003d8a:	8019      	strh	r1, [r3, #0]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	4615      	mov	r5, r2
 8003d90:	6123      	str	r3, [r4, #16]
 8003d92:	e7ba      	b.n	8003d0a <_printf_i+0x152>
 8003d94:	682b      	ldr	r3, [r5, #0]
 8003d96:	2100      	movs	r1, #0
 8003d98:	1d1a      	adds	r2, r3, #4
 8003d9a:	602a      	str	r2, [r5, #0]
 8003d9c:	681d      	ldr	r5, [r3, #0]
 8003d9e:	6862      	ldr	r2, [r4, #4]
 8003da0:	4628      	mov	r0, r5
 8003da2:	f000 f8d9 	bl	8003f58 <memchr>
 8003da6:	b108      	cbz	r0, 8003dac <_printf_i+0x1f4>
 8003da8:	1b40      	subs	r0, r0, r5
 8003daa:	6060      	str	r0, [r4, #4]
 8003dac:	6863      	ldr	r3, [r4, #4]
 8003dae:	6123      	str	r3, [r4, #16]
 8003db0:	2300      	movs	r3, #0
 8003db2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003db6:	e7a8      	b.n	8003d0a <_printf_i+0x152>
 8003db8:	462a      	mov	r2, r5
 8003dba:	4649      	mov	r1, r9
 8003dbc:	4640      	mov	r0, r8
 8003dbe:	6923      	ldr	r3, [r4, #16]
 8003dc0:	47d0      	blx	sl
 8003dc2:	3001      	adds	r0, #1
 8003dc4:	d0ab      	beq.n	8003d1e <_printf_i+0x166>
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	079b      	lsls	r3, r3, #30
 8003dca:	d413      	bmi.n	8003df4 <_printf_i+0x23c>
 8003dcc:	68e0      	ldr	r0, [r4, #12]
 8003dce:	9b03      	ldr	r3, [sp, #12]
 8003dd0:	4298      	cmp	r0, r3
 8003dd2:	bfb8      	it	lt
 8003dd4:	4618      	movlt	r0, r3
 8003dd6:	e7a4      	b.n	8003d22 <_printf_i+0x16a>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	4632      	mov	r2, r6
 8003ddc:	4649      	mov	r1, r9
 8003dde:	4640      	mov	r0, r8
 8003de0:	47d0      	blx	sl
 8003de2:	3001      	adds	r0, #1
 8003de4:	d09b      	beq.n	8003d1e <_printf_i+0x166>
 8003de6:	3501      	adds	r5, #1
 8003de8:	68e3      	ldr	r3, [r4, #12]
 8003dea:	9903      	ldr	r1, [sp, #12]
 8003dec:	1a5b      	subs	r3, r3, r1
 8003dee:	42ab      	cmp	r3, r5
 8003df0:	dcf2      	bgt.n	8003dd8 <_printf_i+0x220>
 8003df2:	e7eb      	b.n	8003dcc <_printf_i+0x214>
 8003df4:	2500      	movs	r5, #0
 8003df6:	f104 0619 	add.w	r6, r4, #25
 8003dfa:	e7f5      	b.n	8003de8 <_printf_i+0x230>
 8003dfc:	080044c5 	.word	0x080044c5
 8003e00:	080044d6 	.word	0x080044d6

08003e04 <_sbrk_r>:
 8003e04:	b538      	push	{r3, r4, r5, lr}
 8003e06:	2300      	movs	r3, #0
 8003e08:	4d05      	ldr	r5, [pc, #20]	; (8003e20 <_sbrk_r+0x1c>)
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	4608      	mov	r0, r1
 8003e0e:	602b      	str	r3, [r5, #0]
 8003e10:	f7fc fc88 	bl	8000724 <_sbrk>
 8003e14:	1c43      	adds	r3, r0, #1
 8003e16:	d102      	bne.n	8003e1e <_sbrk_r+0x1a>
 8003e18:	682b      	ldr	r3, [r5, #0]
 8003e1a:	b103      	cbz	r3, 8003e1e <_sbrk_r+0x1a>
 8003e1c:	6023      	str	r3, [r4, #0]
 8003e1e:	bd38      	pop	{r3, r4, r5, pc}
 8003e20:	2000046c 	.word	0x2000046c

08003e24 <__sread>:
 8003e24:	b510      	push	{r4, lr}
 8003e26:	460c      	mov	r4, r1
 8003e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e2c:	f000 f8ae 	bl	8003f8c <_read_r>
 8003e30:	2800      	cmp	r0, #0
 8003e32:	bfab      	itete	ge
 8003e34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e36:	89a3      	ldrhlt	r3, [r4, #12]
 8003e38:	181b      	addge	r3, r3, r0
 8003e3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e3e:	bfac      	ite	ge
 8003e40:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e42:	81a3      	strhlt	r3, [r4, #12]
 8003e44:	bd10      	pop	{r4, pc}

08003e46 <__swrite>:
 8003e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e4a:	461f      	mov	r7, r3
 8003e4c:	898b      	ldrh	r3, [r1, #12]
 8003e4e:	4605      	mov	r5, r0
 8003e50:	05db      	lsls	r3, r3, #23
 8003e52:	460c      	mov	r4, r1
 8003e54:	4616      	mov	r6, r2
 8003e56:	d505      	bpl.n	8003e64 <__swrite+0x1e>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e60:	f000 f868 	bl	8003f34 <_lseek_r>
 8003e64:	89a3      	ldrh	r3, [r4, #12]
 8003e66:	4632      	mov	r2, r6
 8003e68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e6c:	81a3      	strh	r3, [r4, #12]
 8003e6e:	4628      	mov	r0, r5
 8003e70:	463b      	mov	r3, r7
 8003e72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e7a:	f000 b817 	b.w	8003eac <_write_r>

08003e7e <__sseek>:
 8003e7e:	b510      	push	{r4, lr}
 8003e80:	460c      	mov	r4, r1
 8003e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e86:	f000 f855 	bl	8003f34 <_lseek_r>
 8003e8a:	1c43      	adds	r3, r0, #1
 8003e8c:	89a3      	ldrh	r3, [r4, #12]
 8003e8e:	bf15      	itete	ne
 8003e90:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e9a:	81a3      	strheq	r3, [r4, #12]
 8003e9c:	bf18      	it	ne
 8003e9e:	81a3      	strhne	r3, [r4, #12]
 8003ea0:	bd10      	pop	{r4, pc}

08003ea2 <__sclose>:
 8003ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ea6:	f000 b813 	b.w	8003ed0 <_close_r>
	...

08003eac <_write_r>:
 8003eac:	b538      	push	{r3, r4, r5, lr}
 8003eae:	4604      	mov	r4, r0
 8003eb0:	4608      	mov	r0, r1
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	4d05      	ldr	r5, [pc, #20]	; (8003ecc <_write_r+0x20>)
 8003eb8:	602a      	str	r2, [r5, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f7fc fc18 	bl	80006f0 <_write>
 8003ec0:	1c43      	adds	r3, r0, #1
 8003ec2:	d102      	bne.n	8003eca <_write_r+0x1e>
 8003ec4:	682b      	ldr	r3, [r5, #0]
 8003ec6:	b103      	cbz	r3, 8003eca <_write_r+0x1e>
 8003ec8:	6023      	str	r3, [r4, #0]
 8003eca:	bd38      	pop	{r3, r4, r5, pc}
 8003ecc:	2000046c 	.word	0x2000046c

08003ed0 <_close_r>:
 8003ed0:	b538      	push	{r3, r4, r5, lr}
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	4d05      	ldr	r5, [pc, #20]	; (8003eec <_close_r+0x1c>)
 8003ed6:	4604      	mov	r4, r0
 8003ed8:	4608      	mov	r0, r1
 8003eda:	602b      	str	r3, [r5, #0]
 8003edc:	f7fc fc16 	bl	800070c <_close>
 8003ee0:	1c43      	adds	r3, r0, #1
 8003ee2:	d102      	bne.n	8003eea <_close_r+0x1a>
 8003ee4:	682b      	ldr	r3, [r5, #0]
 8003ee6:	b103      	cbz	r3, 8003eea <_close_r+0x1a>
 8003ee8:	6023      	str	r3, [r4, #0]
 8003eea:	bd38      	pop	{r3, r4, r5, pc}
 8003eec:	2000046c 	.word	0x2000046c

08003ef0 <_fstat_r>:
 8003ef0:	b538      	push	{r3, r4, r5, lr}
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	4d06      	ldr	r5, [pc, #24]	; (8003f10 <_fstat_r+0x20>)
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	4608      	mov	r0, r1
 8003efa:	4611      	mov	r1, r2
 8003efc:	602b      	str	r3, [r5, #0]
 8003efe:	f7fc fc08 	bl	8000712 <_fstat>
 8003f02:	1c43      	adds	r3, r0, #1
 8003f04:	d102      	bne.n	8003f0c <_fstat_r+0x1c>
 8003f06:	682b      	ldr	r3, [r5, #0]
 8003f08:	b103      	cbz	r3, 8003f0c <_fstat_r+0x1c>
 8003f0a:	6023      	str	r3, [r4, #0]
 8003f0c:	bd38      	pop	{r3, r4, r5, pc}
 8003f0e:	bf00      	nop
 8003f10:	2000046c 	.word	0x2000046c

08003f14 <_isatty_r>:
 8003f14:	b538      	push	{r3, r4, r5, lr}
 8003f16:	2300      	movs	r3, #0
 8003f18:	4d05      	ldr	r5, [pc, #20]	; (8003f30 <_isatty_r+0x1c>)
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	4608      	mov	r0, r1
 8003f1e:	602b      	str	r3, [r5, #0]
 8003f20:	f7fc fbfc 	bl	800071c <_isatty>
 8003f24:	1c43      	adds	r3, r0, #1
 8003f26:	d102      	bne.n	8003f2e <_isatty_r+0x1a>
 8003f28:	682b      	ldr	r3, [r5, #0]
 8003f2a:	b103      	cbz	r3, 8003f2e <_isatty_r+0x1a>
 8003f2c:	6023      	str	r3, [r4, #0]
 8003f2e:	bd38      	pop	{r3, r4, r5, pc}
 8003f30:	2000046c 	.word	0x2000046c

08003f34 <_lseek_r>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	4604      	mov	r4, r0
 8003f38:	4608      	mov	r0, r1
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	4d05      	ldr	r5, [pc, #20]	; (8003f54 <_lseek_r+0x20>)
 8003f40:	602a      	str	r2, [r5, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f7fc fbec 	bl	8000720 <_lseek>
 8003f48:	1c43      	adds	r3, r0, #1
 8003f4a:	d102      	bne.n	8003f52 <_lseek_r+0x1e>
 8003f4c:	682b      	ldr	r3, [r5, #0]
 8003f4e:	b103      	cbz	r3, 8003f52 <_lseek_r+0x1e>
 8003f50:	6023      	str	r3, [r4, #0]
 8003f52:	bd38      	pop	{r3, r4, r5, pc}
 8003f54:	2000046c 	.word	0x2000046c

08003f58 <memchr>:
 8003f58:	4603      	mov	r3, r0
 8003f5a:	b510      	push	{r4, lr}
 8003f5c:	b2c9      	uxtb	r1, r1
 8003f5e:	4402      	add	r2, r0
 8003f60:	4293      	cmp	r3, r2
 8003f62:	4618      	mov	r0, r3
 8003f64:	d101      	bne.n	8003f6a <memchr+0x12>
 8003f66:	2000      	movs	r0, #0
 8003f68:	e003      	b.n	8003f72 <memchr+0x1a>
 8003f6a:	7804      	ldrb	r4, [r0, #0]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	428c      	cmp	r4, r1
 8003f70:	d1f6      	bne.n	8003f60 <memchr+0x8>
 8003f72:	bd10      	pop	{r4, pc}

08003f74 <__malloc_lock>:
 8003f74:	4801      	ldr	r0, [pc, #4]	; (8003f7c <__malloc_lock+0x8>)
 8003f76:	f7ff bb0b 	b.w	8003590 <__retarget_lock_acquire_recursive>
 8003f7a:	bf00      	nop
 8003f7c:	20000460 	.word	0x20000460

08003f80 <__malloc_unlock>:
 8003f80:	4801      	ldr	r0, [pc, #4]	; (8003f88 <__malloc_unlock+0x8>)
 8003f82:	f7ff bb06 	b.w	8003592 <__retarget_lock_release_recursive>
 8003f86:	bf00      	nop
 8003f88:	20000460 	.word	0x20000460

08003f8c <_read_r>:
 8003f8c:	b538      	push	{r3, r4, r5, lr}
 8003f8e:	4604      	mov	r4, r0
 8003f90:	4608      	mov	r0, r1
 8003f92:	4611      	mov	r1, r2
 8003f94:	2200      	movs	r2, #0
 8003f96:	4d05      	ldr	r5, [pc, #20]	; (8003fac <_read_r+0x20>)
 8003f98:	602a      	str	r2, [r5, #0]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f7fc fb9a 	bl	80006d4 <_read>
 8003fa0:	1c43      	adds	r3, r0, #1
 8003fa2:	d102      	bne.n	8003faa <_read_r+0x1e>
 8003fa4:	682b      	ldr	r3, [r5, #0]
 8003fa6:	b103      	cbz	r3, 8003faa <_read_r+0x1e>
 8003fa8:	6023      	str	r3, [r4, #0]
 8003faa:	bd38      	pop	{r3, r4, r5, pc}
 8003fac:	2000046c 	.word	0x2000046c

08003fb0 <_init>:
 8003fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb2:	bf00      	nop
 8003fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fb6:	bc08      	pop	{r3}
 8003fb8:	469e      	mov	lr, r3
 8003fba:	4770      	bx	lr

08003fbc <_fini>:
 8003fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fbe:	bf00      	nop
 8003fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fc2:	bc08      	pop	{r3}
 8003fc4:	469e      	mov	lr, r3
 8003fc6:	4770      	bx	lr
